{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid643740568\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1966613498}
{\list\listtemplateid880680935\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1244003717}
{\list\listtemplateid631704478\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid791999512}
}
{\*\listoverridetable
{\listoverride\listid1966613498\listoverridecount0\ls1}
{\listoverride\listid1244003717\listoverridecount0\ls2}
{\listoverride\listid791999512\listoverridecount0\ls3}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 SED version 4.1.2
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 SED(1)                                                             User Commands                                                            SED(1)
\par 
\par NAME
\par \plain \f1\fs20\cf1        sed - manual page for sed version 4.1.2
\par \plain \f1\fs20 
\par SYNOPSIS
\par     \plain \f1\fs20\cf1    sed [OPTION]... \{script-only-if-no-other-script\} [input-file]...
\par \plain \f1\fs20 
\par DESCRIPTION
\par        Sed  is  a  stream  editor.   A  stream  editor  is  used  to perform basic text transformations on an input stream (a file or input from a
\par        pipeline).  While in some ways similar to an editor which permits scripted edits (such as ed), sed works by making only one pass  over  the
\par        input(s),  and  is  consequently  more efficient.  But it is sed's ability to filter text in a pipeline which particularly distinguishes it
\par        from other types of editors.
\par 
\par \plain \f1\fs20\cf1        -n, --quiet, --silent
\par 
\par \plain \f1\fs20               suppress automatic printing of pattern space
\par 
\par \plain \f1\fs20\cf1        -e script, --expression=script
\par \plain \f1\fs20 
\par               add the script to the commands to be executed
\par 
\par \plain \f1\fs20\cf1        -f script-file, --file=script-file
\par \plain \f1\fs20 
\par               add the contents of script-file to the commands to be executed
\par 
\par \plain \f1\fs20\cf1        -i[SUFFIX], --in-place[=SUFFIX]
\par \plain \f1\fs20 
\par               edit files in place (makes backup if extension supplied)
\par 
\par      \plain \f1\fs20\cf1   -l N, --line-length=N
\par \plain \f1\fs20 
\par               specify the desired line-wrap length for the 'l' command
\par 
\par \plain \f1\fs20\cf1        --posix
\par \plain \f1\fs20 
\par               disable all GNU extensions.
\par 
\par \plain \f1\fs20\cf1        -r, --regexp-extended
\par \plain \f1\fs20 
\par               use extended regular expressions in the script.
\par 
\par \plain \f1\fs20\cf1        -s, --separate
\par \plain \f1\fs20 
\par               consider files as separate rather than as a single continuous long stream.
\par 
\par \plain \f1\fs20\cf1        -u, --unbuffered
\par \plain \f1\fs20 
\par               load minimal amounts of data from the input files and flush the output buffers more often
\par 
\par        --help display this help and exit
\par 
\par        --version
\par               output version information and exit
\par 
\par        If no -e, --expression, -f, or --file option is given, then the first non-option argument is taken as the sed  script  to  interpret.   All
\par        remaining arguments are names of input files; if no input files are specified, then the standard input is read.
\par 
\par        E-mail bug reports to: bonzini@gnu.org .  Be sure to include the word ''sed'' somewhere in the ''Subject:'' field.
\par 
\par \plain \f1\b\fs20 COMMAND SYNOPSIS
\par \plain \f1\fs20        This  is  just a brief synopsis of sed commands to serve as a reminder to those who already know sed; other documentation (such as the tex-
\par        info document) must be consulted for fuller descriptions.
\par 
\par \plain \f1\fs20\cf1    Zero-address ''commands''
\par \plain \f1\fs20        : label
\par               Label for b and t commands.
\par 
\par        #comment
\par               The comment extends until the next newline (or the end of a -e script fragment).
\par 
\par        \}      The closing bracket of a \{ \} block.
\par 
\par \plain \f1\fs20\cf1    Zero- or One- address commands
\par \plain \f1\fs20        =      Print the current line number.
\par 
\par        a \\
\par 
\par        text   Append text, which has each embedded newline preceded by a backslash.
\par 
\par        i \\
\par 
\par        text   Insert text, which has each embedded newline preceded by a backslash.
\par 
\par        q      Immediately quit the sed script without processing any more input, except that if auto-print is not  disabled  the  current  pattern
\par               space will be printed.
\par 
\par        Q      Immediately quit the sed script without processing any more input.
\par 
\par        r filename
\par               Append text read from filename.
\par 
\par        R filename
\par               Append a line read from filename.
\par 
\par    Commands which accept address ranges
\par        \{      Begin a block of commands (end with a \}).
\par 
\par        b label
\par               Branch to label; if label is omitted, branch to end of script.
\par 
\par        t label
\par               If  a  s///  has done a successful substitution since the last input line was read and since the last t or T command, then branch to
\par               label; if label is omitted, branch to end of script.
\par 
\par        T label
\par               If no s/// has done a successful substitution since the last input line was read and since the last t or T command, then  branch  to
\par               label; if label is omitted, branch to end of script.
\par 
\par        c \\
\par 
\par        text   Replace the selected lines with text, which has each embedded newline preceded by a backslash.
\par 
\par        d      Delete pattern space.  Start next cycle.
\par 
\par        D      Delete  up  to the first embedded newline in the pattern space.  Start next cycle, but skip reading from the input if there is still
\par               data in the pattern space.
\par 
\par        h H    Copy/append pattern space to hold space.
\par 
\par        g G    Copy/append hold space to pattern space.
\par 
\par        x      Exchange the contents of the hold and pattern spaces.
\par 
\par        l      List out the current line in a ''visually unambiguous'' form.
\par 
\par        n N    Read/append the next line of input into the pattern space.
\par 
\par        p      Print the current pattern space.
\par 
\par        P      Print up to the first embedded newline of the current pattern space.
\par 
\par        s/regexp/replacement/
\par               Attempt to match regexp against the pattern space.  If successful, replace that portion matched with replacement.   The  replacement
\par               may  contain the special character & to refer to that portion of the pattern space which matched, and the special escapes \\1 through
\par               \\9 to refer to the corresponding matching sub-expressions in the regexp.
\par 
\par        w filename
\par               Write the current pattern space to filename.
\par 
\par        W filename
\par               Write the first line of the current pattern space to filename.
\par 
\par        y/source/dest/
\par               Transliterate the characters in the pattern space which appear in source to the corresponding character in dest.
\par 
\par Addresses
\par        Sed commands can be given with no addresses, in which case the command will be executed for all input lines; with  one  address,  in  which
\par        case  the  command will only be executed for input lines which match that address; or with two addresses, in which case the command will be
\par        executed for all input lines which match the inclusive range of lines starting from the first address and continuing to the second address.
\par        Three  things  to note about address ranges: the syntax is addr1,addr2 (i.e., the addresses are separated by a comma); the line which addr1
\par        matched will always be accepted, even if addr2 selects an earlier line; and if addr2 is a regexp, it will not be tested  against  the  line
\par        that addr1 matched.
\par 
\par        After the address (or address-range), and before the command, a !  may be inserted, which specifies that the command shall only be executed
\par        if the address (or address-range) does not match.
\par 
\par        The following address types are supported:
\par 
\par        number Match only the specified line number.
\par 
\par        first~step
\par               Match every step'th line starting with line first.  For example, ''sed -n 1~2p'' will print all the odd-numbered lines in the  input
\par               stream, and the address 2~5 will match every fifth line, starting with the second. (This is an extension.)
\par 
\par        $      Match the last line.
\par 
\par        /regexp/
\par               Match lines matching the regular expression regexp.
\par 
\par        \\cregexpc
\par               Match lines matching the regular expression regexp.  The c may be any character.
\par 
\par        GNU sed also supports some special 2-address forms:
\par 
\par        0,addr2
\par               Start out in "matched first address" state, until addr2 is found.  This is similar to 1,addr2, except that if addr2 matches the very
\par               first line of input the 0,addr2 form will be at the end of its range, whereas the 1,addr2 form will still be at the beginning of its
\par               range.
\par 
\par        addr1,+N
\par               Will match addr1 and the N lines following addr1.
\par 
\par        addr1,~N
\par               Will match addr1 and the lines following addr1 until the next line whose input line number is a multiple of N.
\par 
\par REGULAR EXPRESSIONS
\par        POSIX.2  BREs  should  be  supported,  but they aren't completely because of performance problems.  The \\n sequence in a regular expression
\par        matches the newline character, and similarly for \\a, \\t, and other sequences.
\par 
\par BUGS
\par        E-mail bug reports to bonzini@gnu.org.  Be sure to include the word ''sed'' somewhere in the ''Subject:'' field.  Also, please include  the
\par        output of ''sed --version'' in the body of your report if at all possible.
\par 
\par COPYRIGHT
\par        Copyright 2003 Free Software Foundation, Inc.
\par        This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICU-
\par        LAR PURPOSE, to the extent permitted by law.
\par 
\par SEE ALSO
\par        awk(1), ed(1), grep(1), tr(1), perlre(1), sed.info, any of various books on sed, the sed FAQ (http://sed.sf.net/grabbag/tutorials/sed-
\par        faq.html), http://sed.sf.net/grabbag/.
\par 
\par        The full documentation for sed is maintained as a Texinfo manual.  If the info and sed programs are properly installed at your site, the
\par        command
\par 
\par               info sed
\par 
\par        should give you access to the complete manual.
\par 
\par sed version 4.1.2                                                   August 2004                                                             SED(1)\par}