{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid510050203\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1806298121}
{\list\listtemplateid1750516785\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid2087706364}
{\list\listtemplateid2098319088\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid597266615}
}
{\*\listoverridetable
{\listoverride\listid1806298121\listoverridecount0\ls1}
{\listoverride\listid2087706364\listoverridecount0\ls2}
{\listoverride\listid597266615\listoverridecount0\ls3}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 SED POSIX
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 SED(P)                                                                                                                                      SED(P)
\par 
\par NAME
\par \plain \f1\fs20\cf1        sed - stream editor
\par \plain \f1\fs20 
\par SYNOPSIS
\par \plain \f1\fs20\cf1        sed [-n] script[file...]
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1        sed [-n][-e script]...[-f script_file]...[file...]
\par \plain \f1\fs20 
\par DESCRIPTION
\par        The  sed utility is a stream editor that shall read one or more text files, make editing changes according to a script of editing commands,
\par        and write the results to standard output. The script shall be obtained from either the script  operand  string  or  a  combination  of  the
\par        option-arguments from the -e script and -f script_file options.
\par 
\par OPTIONS
\par        The  sed utility shall conform to the Base Definitions volume of IEEE Std 1003.1-2001, Section 12.2, Utility Syntax Guidelines, except that
\par        the order of presentation of the -e and -f options is significant.
\par 
\par        The following options shall be supported:
\par 
\par \plain \f1\fs20\cf1        -e  script
\par \plain \f1\fs20               Add the editing commands specified by the script option-argument to the end of the script of editing commands.  The  script  option-
\par               argument shall have the same properties as the script operand, described in the OPERANDS section.
\par 
\par \plain \f1\fs20\cf1        -f  script_file
\par \plain \f1\fs20               Add the editing commands in the file script_file to the end of the script.
\par 
\par        -n     Suppress  the  default  output  (in  which  each  line, after it is examined for editing, is written to standard output). Only lines
\par               explicitly selected for output are written.
\par 
\par        \plain \f1\fs20\cf1 Multiple -e and -f options may be specified.\plain \f1\fs20  All commands shall be added to the script in the order specified, regardless of their  origin.
\par 
\par OPERANDS
\par        The following operands shall be supported:
\par 
\par        file   A  pathname  of a file whose contents are read and edited. If multiple file operands are specified, the named files shall be read in
\par               the order specified and the concatenation shall be edited.  If no file operands are specified, the standard input shall be used.
\par 
\par        script A string to be used as the script of editing commands. The application shall not present a script that violates the restrictions  of
\par               a text file except that the final character need not be a <newline>.
\par 
\par STDIN
\par        The standard input shall be used only if no file operands are specified. See the INPUT FILES section.
\par 
\par INPUT FILES
\par        The input files shall be text files. The script_files named by the -f option shall consist of editing commands.
\par 
\par ENVIRONMENT VARIABLES
\par        The following environment variables shall affect the execution of sed:
\par 
\par        LANG   Provide  a  default  value  for  the  internationalization  variables  that  are  unset or null. (See the Base Definitions volume of
\par               IEEE Std 1003.1-2001, Section 8.2, Internationalization Variables for the  precedence  of  internationalization  variables  used  to
\par               determine the values of locale categories.)
\par 
\par        LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.
\par 
\par        LC_COLLATE
\par 
\par               Determine  the locale for the behavior of ranges, equivalence classes, and multi-character collating elements within regular expres-
\par               sions.
\par 
\par        LC_CTYPE
\par               Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-byte as opposed to
\par               multi-byte characters in arguments and input files), and the behavior of character classes within regular expressions.
\par 
\par        LC_MESSAGES
\par               Determine the locale that should be used to affect the format and contents of diagnostic messages written to standard error.
\par 
\par        NLSPATH
\par               Determine the location of message catalogs for the processing of LC_MESSAGES .
\par 
\par ASYNCHRONOUS EVENTS
\par        Default.
\par 
\par STDOUT
\par        The  input files shall be written to standard output, with the editing commands specified in the script applied. If the -n option is speci-
\par        fied, only those input lines selected by the script shall be written to standard output.
\par 
\par STDERR
\par        The standard error shall be used only for diagnostic messages.
\par 
\par OUTPUT FILES
\par        The output files shall be text files whose formats are dependent on the editing commands given.
\par 
\par EXTENDED DESCRIPTION
\par        The script shall consist of editing commands of the following form:
\par 
\par \plain \f1\fs20\cf1               [address[,address]]function
\par \plain \f1\fs20 
\par        where function represents a single-character command verb from the list in Editing Commands in sed , followed by any applicable  arguments.
\par 
\par        The  command  can be preceded by <blank>s and/or semicolons. The function can be preceded by <blank>s. These optional characters shall have
\par        no effect.
\par 
\par        In default operation, sed cyclically shall append a line of input, less its terminating <newline>, into the  pattern  space.  Normally  the
\par        pattern  space will be empty, unless a D command terminated the last cycle. The sed utility shall then apply in sequence all commands whose
\par        addresses select that pattern space, and at the end of the script copy the pattern space to standard output (except when -n  is  specified)
\par        and  delete  the  pattern  space. Whenever the pattern space is written to standard output or a named file, sed shall immediately follow it
\par        with a <newline>.
\par 
\par        Some of the editing commands use a hold space to save all or part of the pattern space for  subsequent  retrieval.  The  pattern  and  hold
\par        spaces shall each be able to hold at least 8192 bytes.
\par 
\par    Addresses in sed
\par        An  address  is  either a decimal number that counts input lines cumulatively across files, a '$' character that addresses the last line of
\par        input, or a context address (which consists of a BRE, as described in Regular Expressions in sed , preceded and followed  by  a  delimiter,
\par        usually a slash).
\par 
\par        An editing command with no addresses shall select every pattern space.
\par 
\par        An editing command with one address shall select each pattern space that matches the address.
\par 
\par        An  editing command with two addresses shall select the inclusive range from the first pattern space that matches the first address through
\par        the next pattern space that matches the second. (If the second address is a number less than or equal to the line  number  first  selected,
\par        only  one  line  shall  be  selected.) Starting at the first line following the selected range, sed shall look again for the first address.
\par        Thereafter, the process shall be repeated. Omitting either or both of the address components  in  the  following  form  produces  undefined
\par        results:
\par 
\par               [address[,address]]
\par 
\par \plain \f1\fs20\cf1    Regular Expressions in sed
\par \plain \f1\fs20        The sed utility shall support the BREs described in the Base Definitions volume of IEEE Std 1003.1-2001, Section 9.3, Basic Regular Expres-
\par        sions, with the following additions:
\par 
\par         * In a context address, the construction "\\cBREc" , where c is any character other than backslash or  <newline>,  shall  be  identical  to
\par           "/BRE/"  .  If  the  character  designated by c appears following a backslash, then it shall be considered to be that literal character,
\par           which shall not terminate the BRE. For example, in the context address "\\xabc\\xdefx" , the second x stands for itself, so that  the  BRE
\par           is "abcxdef" .
\par 
\par         * The  escape  sequence  '\\n' shall match a <newline> embedded in the pattern space. A literal <newline> shall not be used in the BRE of a
\par           context address or in the substitute function.
\par 
\par         * If an RE is empty (that is, no pattern is specified) sed shall behave as if the last RE used in the last command applied (either  as  an
\par           address or as part of a substitute command) was specified.
\par 
\par \plain \f1\fs20\cf1    Editing Commands in sed
\par \plain \f1\fs20        In  the  following  list  of  editing  commands,  the maximum number of permissible addresses for each function is indicated by [ 0addr], [
\par        1addr], or [ 2addr], representing zero, one, or two addresses.
\par 
\par        The argument text shall consist of one or more lines. Each embedded <newline> in the text shall be preceded by  a  backslash.  Other  back-
\par        slashes in text shall be removed, and the following character shall be treated literally.
\par 
\par        The  r  and  w command verbs, and the w flag to the s command, take an optional rfile (or wfile) parameter, separated from the command verb
\par        letter or flag by one or more <blank>s; implementations may allow zero separation as an extension.
\par 
\par        The argument rfile or the argument wfile shall terminate the editing command. Each wfile shall be created before processing begins.  Imple-
\par        mentations  shall  support at least ten wfile arguments in the script; the actual number (greater than or equal to 10) that is supported by
\par        the implementation is unspecified. The use of the wfile parameter shall cause that file to be initially created, if it does not  exist,  or
\par        shall replace the contents of an existing file.
\par 
\par \plain \f1\fs20\cf1        The b, r, s, t, w, y, and : command verbs shall accept additional arguments. \plain \f1\fs20  The following synopses indicate which arguments shall be sep-
\par        arated from the command verbs by a single <space>.
\par 
\par        The a and r commands schedule text for later output. The text specified for the a command, and the contents of the file specified for the r
\par        command,  shall  be written to standard output just before the next attempt to fetch a line of input when executing the N or n commands, or
\par        when reaching the end of the script. If written when reaching the end of the script, and the -n option was not specified, the text shall be
\par        written  after  copying  the pattern space to standard output. The contents of the file specified for the r command shall be as of the time
\par        the output is written, not the time the r command is applied. The text shall be output in the order in which the  a  and  r  commands  were
\par        applied to the input.
\par 
\par        Command verbs other than \{, a, b, c, i, r, t, w, :, and # can be followed by a semicolon, optional <blank>s, and another command verb. How-
\par        ever, when the s command verb is used with the w flag, following it with another command in this manner produces undefined results.
\par 
\par        A function can be preceded by one or more '!' characters, in which case the function shall be applied if the addresses do  not  select  the
\par        pattern  space. Zero or more <blank>s shall be accepted before the first '!' character. It is unspecified whether <blank>s can follow a '!'
\par        character, and conforming applications shall not follow a '!'  character with <blank>s.
\par 
\par        [2addr] \{function
\par 
\par        function
\par 
\par        ...
\par 
\par        \}      Execute a list of sed functions only when the pattern space is selected. The list of sed functions shall be surrounded by braces and
\par               separated  by  <newline>s, and conform to the following rules. The braces can be preceded or followed by <blank>s. The functions can
\par               be preceded by <blank>s, but shall not be followed by <blank>s. The <right-brace> shall be preceded by a <newline> and can  be  pre-
\par               ceded or followed by <blank>s.
\par 
\par        [1addr]a\\
\par 
\par        text   Write text to standard output as described previously.
\par 
\par        [2addr]b [label]
\par 
\par               Branch  to  the  :  function bearing the label. If label is not specified, branch to the end of the script. The implementation shall
\par               support labels recognized as unique up to at least 8 characters; the actual length (greater than or equal to 8) that shall  be  sup-
\par               ported by the implementation is unspecified.  It is unspecified whether exceeding a label length causes an error or a silent trunca-
\par               tion.
\par 
\par        [2addr]c\\
\par 
\par        text   Delete the pattern space. With a 0 or 1 address or at the end of a 2-address range, place text on the  output  and  start  the  next
\par               cycle.
\par 
\par        [2addr]d
\par               Delete the pattern space and start the next cycle.
\par 
\par        [2addr]D
\par               Delete the initial segment of the pattern space through the first <newline> and start the next cycle.
\par 
\par        [2addr]g
\par               Replace the contents of the pattern space by the contents of the hold space.
\par 
\par        [2addr]G
\par               Append to the pattern space a <newline> followed by the contents of the hold space.
\par 
\par        [2addr]h
\par               Replace the contents of the hold space with the contents of the pattern space.
\par 
\par        [2addr]H
\par               Append to the hold space a <newline> followed by the contents of the pattern space.
\par 
\par        [1addr]i\\
\par 
\par        text   Write text to standard output.
\par 
\par        [2addr]l
\par               (The letter ell.) Write the pattern space to standard output in a visually unambiguous form. The characters listed in the Base Defi-
\par               nitions volume of IEEE Std 1003.1-2001, Table 5-1, Escape Sequences and Associated Actions ( '\\\\' , '\\a' , '\\b' , '\\f' , '\\r' , '\\t'
\par               ,  '\\v'  ) shall be written as the corresponding escape sequence; the '\\n' in that table is not applicable. Non-printable characters
\par               not in that table shall be written as one three-digit octal number (with a preceding backslash) for each byte in the character (most
\par               significant byte first). If the size of a byte on the system is greater than 9 bits, the format used for non-printable characters is
\par               implementation-defined.
\par 
\par        Long lines shall be folded, with the point of folding indicated by writing a backslash followed by a <newline>; the length at which folding
\par        occurs is unspecified, but should be appropriate for the output device. The end of each line shall be marked with a '$' .
\par 
\par        [2addr]n
\par               Write  the  pattern  space  to standard output if the default output has not been suppressed, and replace the pattern space with the
\par               next line of input, less its terminating <newline>.
\par 
\par        If no next line of input is available, the n command verb shall branch to the end of the script and quit without starting a new cycle.
\par 
\par        [2addr]N
\par               Append the next line of input, less its terminating <newline>, to the pattern space, using an embedded  <newline>  to  separate  the
\par               appended material from the original material. Note that the current line number changes.
\par 
\par        If  no  next  line of input is available, the N command verb shall branch to the end of the script and quit without starting a new cycle or
\par        copying the pattern space to standard output.
\par 
\par        [2addr]p
\par               Write the pattern space to standard output.
\par 
\par        [2addr]P
\par               Write the pattern space, up to the first <newline>, to standard output.
\par 
\par        [1addr]q
\par               Branch to the end of the script and quit without starting a new cycle.
\par 
\par        [1addr]r  rfile
\par               Copy the contents of rfile to standard output as described previously.  If rfile does not exist or  cannot  be  read,  it  shall  be
\par               treated as if it were an empty file, causing no error condition.
\par 
\par        [2addr]s/BRE/replacement/flags
\par 
\par               Substitute the replacement string for instances of the BRE in the pattern space. Any character other than backslash or <newline> can
\par               be used instead of a slash to delimit the BRE and the replacement. Within the BRE and the replacement, the BRE delimiter itself  can
\par               be used as a literal character if it is preceded by a backslash.
\par 
\par        The  replacement  string shall be scanned from beginning to end. An ampersand ( '&' ) appearing in the replacement shall be replaced by the
\par        string matching the BRE. The special meaning of '&' in this context can be suppressed by preceding it by a backslash. The characters  "\\n",
\par        where  n is a digit, shall be replaced by the text matched by the corresponding backreference expression. The special meaning of "\\n" where
\par        n is a digit in this context, can be suppressed by preceding it by a backslash. For each other backslash ( '\\' ) encountered, the following
\par        character  shall  lose  its  special  meaning (if any). The meaning of a '\\' immediately followed by any character other than '&' , '\\' , a
\par        digit, or the delimiter character used for this command, is unspecified.
\par 
\par        A line can be split by substituting a <newline> into it. The application shall escape the <newline> in the replacement by preceding it by a
\par        backslash.  A  substitution  shall  be  considered to have been performed even if the replacement string is identical to the string that it
\par        replaces. Any backslash used to alter the default meaning of a subsequent character shall be discarded from  the  BRE  or  the  replacement
\par        before evaluating the BRE or using the replacement.
\par 
\par        The value of flags shall be zero or more of:
\par 
\par        n
\par               Substitute for the nth occurrence only of the BRE found within the pattern space.
\par 
\par        g
\par               Globally  substitute for all non-overlapping instances of the BRE rather than just the first one. If both g and n are specified, the
\par               results are unspecified.
\par 
\par        p
\par               Write the pattern space to standard output if a replacement was made.
\par 
\par        w  wfile
\par               Write. Append the pattern space to wfile if a replacement was made. A conforming application shall precede the wfile  argument  with
\par               one  or  more  <blank>s.  If the w flag is not the last flag value given in a concatenation of multiple flag values, the results are
\par               undefined.
\par 
\par        [2addr]t [label]
\par 
\par               Test. Branch to the : command verb bearing the label if any substitutions have been made since the most recent reading of  an  input
\par               line or execution of a t. If label is not specified, branch to the end of the script.
\par 
\par        [2addr]w  wfile
\par 
\par               Append (write) the pattern space to wfile.
\par 
\par        [2addr]x
\par               Exchange the contents of the pattern and hold spaces.
\par 
\par        [2addr]y/string1/string2/
\par 
\par               Replace  all  occurrences  of  characters in string1 with the corresponding characters in string2. If a backslash followed by an 'n'
\par               appear in string1 or string2, the two characters shall be handled as a single <newline>. If the number of characters in string1  and
\par               string2  are not equal, or if any of the characters in string1 appear more than once, the results are undefined. Any character other
\par               than backslash or <newline> can be used instead of slash to delimit the strings. If the delimiter  is  not  n,  within  string1  and
\par               string2,  the  delimiter  itself  can  be used as a literal character if it is preceded by a backslash.  If a backslash character is
\par               immediately followed by a backslash character in string1 or string2, the two backslash characters shall be counted as a single  lit-
\par               eral backslash character. The meaning of a backslash followed by any character that is not 'n' , a backslash, or the delimiter char-
\par               acter is undefined.
\par 
\par        [0addr]:label
\par               Do nothing. This command bears a label to which the b and t commands branch.
\par 
\par \plain \f1\fs20\cf2        [1addr]=
\par \plain \f1\fs20           \plain \f1\fs20\cf1     Write the following to standard output:
\par 
\par               "%d\\n", <current line number>
\par \plain \f1\fs20 
\par        [0addr]
\par \plain \f1\fs20\cf1               Ignore this empty command.
\par \plain \f1\fs20 
\par        [0addr]#
\par               Ignore the '#' and the remainder of the line (treat them as a comment), with the single exception that if the first  two  characters
\par               in  the script are "#n" , the default output shall be suppressed; this shall be the equivalent of specifying -n on the command line.
\par 
\par EXIT STATUS
\par        The following exit values shall be returned:
\par 
\par         0     Successful completion.
\par 
\par        >0     An error occurred.
\par 
\par CONSEQUENCES OF ERRORS
\par        Default.
\par 
\par        The following sections are informative.
\par 
\par APPLICATION USAGE
\par        Regular expressions match entire strings, not just individual lines, but a <newline> is matched by '\\n' in a sed RE;  a  <newline>  is  not
\par        allowed  by  the general definition of regular expression in IEEE Std 1003.1-2001.  Also note that '\\n' cannot be used to match a <newline>
\par        at the end of an arbitrary input line; <newline>s appear in the pattern space as a result of the N editing command.
\par 
\par EXAMPLES
\par        This sed script simulates the BSD cat -s command, squeezing excess blank lines from standard input.
\par 
\par               sed -n '
\par               # Write non-empty lines.
\par               /./ \{
\par                   p
\par                   d
\par                   \}
\par               # Write a single empty line, then look for more empty lines.
\par               /^$/    p
\par               # Get next line, discard the held <newline> (empty line),
\par               # and look for more empty lines.
\par               :Empty
\par               /^$/    \{
\par                   N
\par                   s/.//
\par                   b Empty
\par                   \}
\par               # Write the non-empty line before going back to search
\par               # for the first in a set of empty lines.
\par                   p
\par 
\par RATIONALE
\par        This volume of IEEE Std 1003.1-2001 requires implementations to support at least ten distinct wfiles, matching historical practice on  many
\par        implementations. Implementations are encouraged to support more, but conforming applications should not exceed this limit.
\par 
\par        The  exit  status  codes specified here are different from those in System V. System V returns 2 for garbled sed commands, but returns zero
\par        with its usage message or if the input file could not be opened. The standard developers considered this to be a bug.
\par 
\par        The manner in which the l command writes non-printable characters was changed to avoid  the  historical  backspace-overstrike  method,  and
\par        other  requirements  to achieve unambiguous output were added. See the RATIONALE for ed for details of the format chosen, which is the same
\par        as that chosen for sed.
\par 
\par        This volume of IEEE Std 1003.1-2001 requires implementations to provide pattern and hold spaces of at least 8192  bytes,  larger  than  the
\par        4000  bytes  spaces used by some historical implementations, but less than the 20480 bytes limit used in an early proposal. Implementations
\par        are encouraged to allocate dynamically larger pattern and hold spaces as needed.
\par 
\par        The requirements for acceptance of <blank>s and <space>s in command lines has been made more explicit than in early proposals  to  describe
\par        clearly  the historical practice and to remove confusion about the phrase "protect initial blanks [sic] and tabs from the stripping that is
\par        done on every script line" that appears in much of the historical documentation of the sed utility description of text. (Not all  implemen-
\par        tations  are  known  to  have stripped <blank>s from text lines, although they all have allowed leading <blank>s preceding the address on a
\par        command line.)
\par 
\par        The treatment of '#' comments differs from the SVID which only allows a comment as the first line of the script,  but  matches  BSD-derived
\par        implementations.  The  comment  character  is  treated as a command, and it has the same properties in terms of being accepted with leading
\par        <blank>s; the BSD implementation has historically supported this.
\par 
\par        Early proposals required that a script_file have at least one non-comment line. Some historical implementations have behaved in  unexpected
\par        ways  if this were not the case. The standard developers considered that this was incorrect behavior and that application developers should
\par        not have to avoid this feature. A correct implementation of this volume of IEEE Std 1003.1-2001 shall permit script_files that consist only
\par        of comment lines.
\par 
\par        Early  proposals  indicated  that  if -e and -f options were intermixed, all -e options were processed before any -f options. This has been
\par        changed to process them in the order presented because it matches historical practice and is more intuitive.
\par 
\par        The treatment of the p flag to the s command differs between System V and BSD-based systems when the default output is suppressed.  In  the
\par        two examples:
\par 
\par               echo a | sed    's/a/A/p'
\par               echo a | sed -n 's/a/A/p'
\par 
\par        this  volume of IEEE Std 1003.1-2001, BSD, System V documentation, and the SVID indicate that the first example should write two lines with
\par        A, whereas the second should write one.  Some System V systems write the A only once in both examples because the p flag is ignored if  the
\par        -n option is not specified.
\par 
\par        This is a case of a diametrical difference between systems that could not be reconciled through the compromise of declaring the behavior to
\par        be unspecified. The SVID/BSD/System V documentation behavior was adopted for this volume of IEEE Std 1003.1-2001 because:
\par 
\par         * No known documentation for any historic system describes the interaction between the p flag and the -n option.
\par 
\par         * The selected behavior is more correct as there is no technical justification for any interaction between the p flag and the -n option. A
\par           relationship  between  -n and the p flag might imply that they are only used together, but this ignores valid scripts that interrupt the
\par           cyclical nature of the processing through the use of the D, d, q, or branching commands. Such scripts rely on the p suffix to write  the
\par           pattern space because they do not make use of the default output at the "bottom" of the script.
\par 
\par         * Because  the  -n  option makes the p flag unnecessary, any interaction would only be useful if sed scripts were written to run both with
\par           and without the -n option. This is believed to be unlikely. It is even more unlikely that programmers have coded the p flag expecting it
\par           to be unnecessary.  Because the interaction was not documented, the likelihood of a programmer discovering the interaction and depending
\par           on it is further decreased.
\par 
\par         * Finally, scripts that break under the specified behavior produce too much output instead of too little, which is easier to diagnose  and
\par           correct.
\par 
\par        The  form  of  the substitute command that uses the n suffix was limited to the first 512 matches in an early proposal. This limit has been
\par        removed because there is no reason an editor processing lines of \{LINE_MAX\} length should have this  restriction.  The  command  s/a/A/2047
\par        should be able to substitute the 2047th occurrence of a on a line.
\par 
\par        The b, t, and : commands are documented to ignore leading white space, but no mention is made of trailing white space. Historical implemen-
\par        tations of sed assigned different locations to the labels 'x' and "x " . This is not useful, and leads to subtle programming errors, but it
\par        is  historical practice, and changing it could theoretically break working scripts. Implementors are encouraged to provide warning messages
\par        about labels that are never used or jumps to labels that do not exist.
\par 
\par        Historically, the sed ! and \} editing commands did not permit multiple commands on a single line using a semicolon as a command  delimiter.
\par        Implementations are permitted, but not required, to support this extension.
\par 
\par FUTURE DIRECTIONS
\par        None.
\par 
\par SEE ALSO
\par        awk , ed , grep
\par 
\par COPYRIGHT
\par        Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003 Edition, Standard for Information Technol-
\par        ogy -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copyright (C) 2001-2003 by the Institute of
\par        Electrical  and  Electronics  Engineers, Inc and The Open Group. In the event of any discrepancy between this version and the original IEEE
\par        and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can  be  obtained
\par        online at http://www.opengroup.org/unix/online.html .
\par 
\par POSIX                                                                  2003                                                                 SED(P)\par}