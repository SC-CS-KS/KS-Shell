{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid437655926\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1799871314}
{\list\listtemplateid471488161\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1715419433}
{\list\listtemplateid906627028\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f3\fs24}
\listid551811881}
}
{\*\listoverridetable
{\listoverride\listid1799871314\listoverridecount0\ls1}
{\listoverride\listid1715419433\listoverridecount0\ls2}
{\listoverride\listid551811881\listoverridecount0\ls3}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 patch
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par 
\par \plain \f1\fs20 PATCH(1)                                                              PATCH(1)
\par 
\par NAME
\par \plain \f1\fs20\cf1        patch - apply a diff file to an original
\par \plain \f1\fs20 
\par SYNOPSIS
\par        patch [options] [originalfile [patchfile]]
\par 
\par        but usually just
\par 
\par \plain \f1\fs20\cf1        patch -pnum <patchfile
\par \plain \f1\fs20 
\par DESCRIPTION
\par        patch takes a patch file patchfile containing a difference listing produced by the diff program and applies those
\par        differences to one or more original files, producing patched versions.  Normally the patched versions are put  in
\par        place  of  the  originals.   Backups  can  be  made; see the -b or --backup option.  The names of the files to be
\par        patched are usually taken from the patch file, but if there\rquote s just one file to be patched it can be specified  on
\par        the command line as originalfile.
\par 
\par        Upon  startup, patch attempts to determine the type of the diff listing, unless overruled by a -c (--context), -e
\par        (--ed), -n (--normal), or -u (--unified) option.  Context diffs (old-style, new-style, and  unified)  and  normal
\par        diffs are applied by the patch program itself, while ed diffs are simply fed to the ed(1) editor via a pipe.
\par 
\par        patch tries to skip any leading garbage, apply the diff, and then skip any trailing garbage.  Thus you could feed
\par        an article or message containing a diff listing to patch, and it should work.  If the entire diff is indented  by
\par        a  consistent  amount, or if a context diff contains lines ending in CRLF or is encapsulated one or more times by
\par        prepending "- " to lines starting with "-" as specified by Internet RFC 934, this is taken into  account.   After
\par        removing indenting or encapsulation, lines beginning with # are ignored, as they are considered to be comments.
\par 
\par        With context diffs, and to a lesser extent with normal diffs, patch can detect when the line numbers mentioned in
\par        the patch are incorrect, and attempts to find the correct place to apply each hunk of  the  patch.   As  a  first
\par        guess,  it  takes  the line number mentioned for the hunk, plus or minus any offset used in applying the previous
\par        hunk.  If that is not the correct place, patch scans both forwards and backwards for a set of lines matching  the
\par        context given in the hunk.  First patch looks for a place where all lines of the context match.  If no such place
\par        is found, and it\rquote s a context diff, and the maximum fuzz factor is set to 1 or more, then another scan takes place
\par        ignoring the first and last line of context.  If that fails, and the maximum fuzz factor is set to 2 or more, the
\par        first two and last two lines of context are ignored, and another scan is made.  (The default maximum fuzz  factor
\par        is 2.)
\par 
\par        Hunks  with  less prefix context than suffix context (after applying fuzz) must apply at the start of the file if
\par        their first line number is 1.  Hunks with more prefix context than suffix  context  (after  applying  fuzz)  must
\par        apply at the end of the file.
\par 
\par        If patch cannot find a place to install that hunk of the patch, it puts the hunk out to a reject file, which nor-
\par        mally is the name of the output file plus a .rej suffix, or # if .rej would generate a file name that is too long
\par        (if  even  appending  the  single  character # makes the file name too long, then # replaces the file name\rquote s last
\par        character).
\par 
\par        The rejected hunk comes out in unified or context diff format.  If the input was a normal diff, many of the  con-
\par        texts are simply null.  The line numbers on the hunks in the reject file may be different than in the patch file:
\par        they reflect the approximate location patch thinks the failed hunks belong in the new file rather  than  the  old
\par        one.
\par 
\par        As  each hunk is completed, you are told if the hunk failed, and if so which line (in the new file) patch thought
\par        the hunk should go on.  If the hunk is installed at a different line from the line number specified in the  diff,
\par        you  are  told the offset.  A single large offset may indicate that a hunk was installed in the wrong place.  You
\par        are also told if a fuzz factor was used to make the match, in which case you should also be slightly  suspicious.
\par        If the --verbose option is given, you are also told about hunks that match exactly.
\par 
\par        If no original file origfile is specified on the command line, patch tries to figure out from the leading garbage
\par        what the name of the file to edit is, using the following rules.
\par 
\par        First, patch takes an ordered list of candidate file names as follows:
\par 
\par         \uc2\u183 \'a1\'a4 If the header is that of a context diff, patch takes the old and new file names in  the  header.   A  name  is\uc1
\par           ignored  if it does not have enough slashes to satisfy the -pnum or --strip=num option.  The name /dev/null is
\par           also ignored.
\par 
\par         \uc2\u183 \'a1\'a4 If there is an Index: line in the leading garbage and if either the old and new names are both  absent  or  if\uc1
\par           patch is conforming to POSIX, patch takes the name in the Index: line.
\par 
\par         \uc2\u183 \'a1\'a4 For  the purpose of the following rules, the candidate file names are considered to be in the order (old, new,\uc1
\par           index), regardless of the order that they appear in the header.
\par 
\par        Then patch selects a file name from the candidate list as follows:
\par 
\par         \uc2\u183 \'a1\'a4 If some of the named files exist, patch selects the first name if conforming to POSIX, and the best name  oth-\uc1
\par           erwise.
\par 
\par         \uc2\u183 \'a1\'a4 If patch is not ignoring RCS, ClearCase, Perforce, and SCCS (see the -g num or --get=num option), and no named\uc1
\par           files exist but an RCS, ClearCase, Perforce, or SCCS master is found, patch selects the first named file  with
\par           an RCS, ClearCase, Perforce, or SCCS master.
\par 
\par         \uc2\u183 \'a1\'a4 If no named files exist, no RCS, ClearCase, Perforce, or SCCS master was found, some names are given, patch is\uc1
\par           not conforming to POSIX, and the patch appears to create a file, patch selects the  best  name  requiring  the
\par           creation of the fewest directories.
\par 
\par         \uc2\u183 \'a1\'a4 If  no file name results from the above heuristics, you are asked for the name of the file to patch, and patch\uc1
\par           selects that name.
\par 
\par        To determine the best of a nonempty list of file names, patch first takes all the names with the fewest path name
\par        components;  of  those,  it  then takes all the names with the shortest basename; of those, it then takes all the
\par        shortest names; finally, it takes the first remaining name.
\par 
\par        Additionally, if the leading garbage contains a Prereq: line, patch takes the first word from  the  prerequisites
\par        line  (normally  a  version number) and checks the original file to see if that word can be found.  If not, patch
\par        asks for confirmation before proceeding.
\par 
\par        The upshot of all this is that you should be able to say, while in a news interface, something like  the  follow-
\par        ing:
\par 
\par           | patch -d /usr/src/local/blurfl
\par 
\par        and patch a file in the blurfl directory directly from the article containing the patch.
\par 
\par        If  the  patch file contains more than one patch, patch tries to apply each of them as if they came from separate
\par        patch files.  This means, among other things, that it is assumed that the name of  the  file  to  patch  must  be
\par        determined  for each diff listing, and that the garbage before each diff listing contains interesting things such
\par        as file names and revision level, as mentioned previously.
\par 
\par OPTIONS
\par        -b  or  --backup
\par           Make backup files.  That is, when patching a file, rename or copy the original instead of removing  it.   When
\par           backing  up a file that does not exist, an empty, unreadable backup file is created as a placeholder to repre-
\par           sent the nonexistent file.  See the -V or --version-control option for details about how backup file names are
\par           determined.
\par 
\par        --backup-if-mismatch
\par           Back  up a file if the patch does not match the file exactly and if backups are not otherwise requested.  This
\par           is the default unless patch is conforming to POSIX.
\par 
\par        --no-backup-if-mismatch
\par           Do not back up a file if the patch does not match the file exactly and if backups are not otherwise requested.
\par           This is the default if patch is conforming to POSIX.
\par 
\par        -B pref  or  --prefix=pref
\par           Use  the  simple method to determine backup file names (see the -V method or --version-control method option),
\par           and append pref to a file name when generating its backup file name.  For example, with -B /junk/  the  simple
\par           backup file name for src/patch/util.c is /junk/src/patch/util.c.
\par 
\par        --binary
\par           Write  all files in binary mode, except for standard output and /dev/tty.  When reading, disable the heuristic
\par           for transforming CRLF line endings into LF line endings.  (On POSIX-conforming systems, reads and writes never
\par           transform  line endings. On Windows, reads and writes do transform line endings by default, and patches should
\par           be generated by diff --binary when line endings are significant.)
\par 
\par        -c  or  --context
\par           Interpret the patch file as a ordinary context diff.
\par 
\par        -d dir  or  --directory=dir
\par           Change to the directory dir immediately, before doing anything else.
\par 
\par        -D define  or  --ifdef=define
\par           Use the #ifdef ... #endif construct to mark changes, with define as the differentiating symbol.
\par 
\par        --dry-run
\par           Print the results of applying the patches without actually changing any files.
\par 
\par        -e  or  --ed
\par           Interpret the patch file as an ed script.
\par 
\par        -E  or  --remove-empty-files
\par           Remove output files that are empty after the patches have been applied.  Normally this option is  unnecessary,
\par           since patch can examine the time stamps on the header to determine whether a file should exist after patching.
\par           However, if the input is not a context diff or if patch is conforming to POSIX, patch does  not  remove  empty
\par           patched  files  unless  this option is given.  When patch removes a file, it also attempts to remove any empty
\par           ancestor directories.
\par 
\par        -f  or  --force
\par           Assume that the user knows exactly what he or she is doing, and do not ask any questions.  Skip patches  whose
\par           headers  do  not  say which file is to be patched; patch files even though they have the wrong version for the
\par           Prereq: line in the patch; and assume that patches are not reversed even if they look  like  they  are.   This
\par           option does not suppress commentary; use -s for that.
\par 
\par        -F num  or  --fuzz=num
\par           Set  the maximum fuzz factor.  This option only applies to diffs that have context, and causes patch to ignore
\par           up to that many lines in looking for places to install a hunk.  Note that a larger fuzz factor  increases  the
\par           odds  of a faulty patch.  The default fuzz factor is 2, and it may not be set to more than the number of lines
\par           of context in the context diff, ordinarily 3.
\par 
\par        -g num  or  --get=num
\par           This option controls patch\rquote s actions when a file is under RCS or SCCS control, and does not exist or is  read-
\par           only  and  matches  the  default  version,  or when a file is under ClearCase or Perforce control and does not
\par           exist.  If num is positive, patch gets (or checks out) the file from the revision  control  system;  if  zero,
\par           patch  ignores  RCS,  ClearCase, Perforce, and SCCS and does not get the file; and if negative, patch asks the
\par           user whether to get the file.  The default value of this option is given by the value of the  PATCH_GET  envi-
\par           ronment variable if it is set; if not, the default value is zero.
\par 
\par        --help
\par           Print a summary of options and exit.
\par 
\par        -i patchfile  or  --input=patchfile
\par           Read the patch from patchfile.  If patchfile is -, read from standard input, the default.
\par 
\par        -l  or  --ignore-whitespace
\par           Match  patterns  loosely,  in case tabs or spaces have been munged in your files.  Any sequence of one or more
\par           blanks in the patch file matches any sequence in the original file, and sequences of blanks  at  the  ends  of
\par           lines  are  ignored.  Normal characters must still match exactly.  Each line of the context must still match a
\par           line in the original file.
\par 
\par        --merge
\par           Merge a patch file into the original files similar to merge(1). If a conflict is found, patch outputs a  warn-
\par           ing and brackets the conflict with <<<<<<< and >>>>>>> lines.  A typical conflict will look like this:
\par 
\par               <<<<<<<
\par               lines from the original file
\par               =======
\par               lines from the patch
\par               >>>>>>>
\par 
\par           If  there  are  conflicts,  the  user  should edit the result and delete one of the alternatives.  This option
\par           implies --forward and does not take the --fuzz=num option into account.
\par 
\par        -n  or  --normal
\par           Interpret the patch file as a normal diff.
\par 
\par        -N  or  --forward
\par           Ignore patches that seem to be reversed or already applied.  See also -R.
\par 
\par        -o outfile  or  --output=outfile
\par           Send output to outfile instead of patching files in place.  Do not use this option if outfile is  one  of  the
\par           files to be patched.  When outfile is -, send output to standard output, and send any messages that would usu-
\par           ally go to standard output to standard error.
\par 
\par        -pnum  or  --strip=num
\par           Strip the smallest prefix containing num leading slashes from each file name  found  in  the  patch  file.   A
\par           sequence  of one or more adjacent slashes is counted as a single slash.  This controls how file names found in
\par           the patch file are treated, in case you keep your files in a different directory than the person who sent  out
\par           the patch.  For example, supposing the file name in the patch file was
\par 
\par              /u/howard/src/blurfl/blurfl.c
\par 
\par           setting -p0 gives the entire file name unmodified, -p1 gives
\par 
\par              u/howard/src/blurfl/blurfl.c
\par 
\par           without the leading slash, -p4 gives
\par 
\par              blurfl/blurfl.c
\par 
\par           and  not  specifying  -p at all just gives you blurfl.c.  Whatever you end up with is looked for either in the
\par           current directory, or the directory specified by the -d option.
\par 
\par        --posix
\par           Conform more strictly to the POSIX standard, as follows.
\par 
\par            \uc2\u183 \'a1\'a4 Take the first existing file from the list (old, new, index) when intuiting file names from diff headers.\uc1
\par 
\par            \uc2\u183 \'a1\'a4 Do not remove files that are empty after patching.\uc1
\par 
\par            \uc2\u183 \'a1\'a4 Do not ask whether to get files from RCS, ClearCase, Perforce, or SCCS.\uc1
\par 
\par            \uc2\u183 \'a1\'a4 Require that all options precede the files in the command line.\uc1
\par 
\par            \uc2\u183 \'a1\'a4 Do not backup files when there is a mismatch.\uc1
\par 
\par        --quoting-style=word
\par           Use style word to quote output names.  The word should be one of the following:
\par 
\par           literal
\par                  Output names as-is.
\par 
\par           shell  Quote names for the shell if they contain shell metacharacters or would cause ambiguous output.
\par 
\par           shell-always
\par                  Quote names for the shell, even if they would normally not require quoting.
\par 
\par           c      Quote names as for a C language string.
\par 
\par           escape Quote as with c except omit the surrounding double-quote characters.
\par 
\par           You can specify the default value of the --quoting-style option with the environment  variable  QUOTING_STYLE.
\par           If that environment variable is not set, the default value is shell.
\par 
\par        -r rejectfile  or  --reject-file=rejectfile
\par           Put rejects into rejectfile instead of the default .rej file.  When rejectfile is -, discard rejects.
\par 
\par        -R  or  --reverse
\par           Assume  that  this  patch  was  created with the old and new files swapped.  (Yes, I\rquote m afraid that does happen
\par           occasionally, human nature being what it is.)  patch attempts to swap each hunk  around  before  applying  it.
\par           Rejects come out in the swapped format.  The -R option does not work with ed diff scripts because there is too
\par           little information to reconstruct the reverse operation.
\par 
\par           If the first hunk of a patch fails, patch reverses the hunk to see if it can be applied that way.  If it  can,
\par           you are asked if you want to have the -R option set.  If it can\rquote t, the patch continues to be applied normally.
\par           (Note: this method cannot detect a reversed patch if it is a normal diff and if the first command is an append
\par           (i.e.  it should have been a delete) since appends always succeed, due to the fact that a null context matches
\par           anywhere.  Luckily, most patches add or change lines rather than delete them, so most  reversed  normal  diffs
\par           begin with a delete, which fails, triggering the heuristic.)
\par 
\par        --reject-format=format
\par           Produce reject files in the specified format (either context or unified).  Without this option, rejected hunks
\par           come out in unified diff format if the input patch was of that format,  otherwise  in  ordinary  context  diff
\par           form.
\par 
\par        -s  or  --silent  or  --quiet
\par           Work silently, unless an error occurs.
\par 
\par        -t  or  --batch
\par           Suppress  questions  like  -f,  but make some different assumptions: skip patches whose headers do not contain
\par           file names (the same as -f); skip patches for which the file has the wrong version for the Prereq: line in the
\par           patch; and assume that patches are reversed if they look like they are.
\par 
\par        -T  or  --set-time
\par           Set  the modification and access times of patched files from time stamps given in context diff headers, assum-
\par           ing that the context diff headers use local time.  This option is not recommended, because patches using local
\par           time  cannot  easily  be  used by people in other time zones, and because local time stamps are ambiguous when
\par           local clocks move backwards during daylight-saving time adjustments.  Instead of using this  option,  generate
\par           patches with UTC and use the -Z or --set-utc option instead.
\par 
\par        -u  or  --unified
\par           Interpret the patch file as a unified context diff.
\par 
\par        -v  or  --version
\par           Print out patch\rquote s revision header and patch level, and exit.
\par 
\par        -V method  or  --version-control=method
\par           Use  method to determine backup file names.  The method can also be given by the PATCH_VERSION_CONTROL (or, if
\par           that\rquote s not set, the VERSION_CONTROL) environment variable, which is overridden by  this  option.   The  method
\par           does not affect whether backup files are made; it affects only the names of any backup files that are made.
\par 
\par           The  value of method is like the GNU Emacs \lquote version-control\rquote  variable; patch also recognizes synonyms that are
\par           more descriptive.  The valid values for method are (unique abbreviations are accepted):
\par 
\par           existing  or  nil
\par              Make numbered backups of files that already have them, otherwise simple backups.  This is the default.
\par 
\par           numbered  or  t
\par              Make numbered backups.  The numbered backup file name for F is F.~N~ where N is the version number.
\par 
\par           simple  or  never
\par              Make simple backups.  The -B or --prefix, -Y or --basename-prefix, and -z or --suffix options  specify  the
\par              simple  backup  file  name.  If none of these options are given, then a simple backup suffix is used; it is
\par              the value of the SIMPLE_BACKUP_SUFFIX environment variable if set, and is .orig otherwise.
\par 
\par           With numbered or simple backups, if the backup file name is too long, the backup suffix ~ is used instead;  if
\par           even appending ~ would make the name too long, then ~ replaces the last character of the file name.
\par 
\par        --verbose
\par           Output extra information about the work being done.
\par 
\par        -x num  or  --debug=num
\par           Set internal debugging flags of interest only to patch patchers.
\par 
\par        -Y pref  or  --basename-prefix=pref
\par           Use  the  simple method to determine backup file names (see the -V method or --version-control method option),
\par           and prefix pref to the basename of a file name when generating  its  backup  file  name.   For  example,  with
\par           -Y .del/ the simple backup file name for src/patch/util.c is src/patch/.del/util.c.
\par 
\par        -z suffix  or  --suffix=suffix
\par           Use  the  simple method to determine backup file names (see the -V method or --version-control method option),
\par           and use suffix as the  suffix.   For  example,  with  -z -  the  backup  file  name  for  src/patch/util.c  is
\par           src/patch/util.c-.
\par 
\par        -Z  or  --set-utc
\par           Set  the modification and access times of patched files from time stamps given in context diff headers, assum-
\par           ing that the context diff headers use Coordinated Universal Time (UTC, often known as GMT).  Also see  the  -T
\par           or --set-time option.
\par 
\par           The  -Z  or  --set-utc  and -T or --set-time options normally refrain from setting a file\rquote s time if the file\rquote s
\par           original time does not match the time given in the patch header, or if its contents do  not  match  the  patch
\par           exactly.  However, if the -f or --force option is given, the file time is set regardless.
\par 
\par           Due  to  the  limitations of diff output format, these options cannot update the times of files whose contents
\par           have not changed.  Also, if you use these options, you should remove (e.g. with  make clean)  all  files  that
\par           depend  on  the  patched  files,  so  that later invocations of make do not get confused by the patched files\rquote 
\par           times.
\par 
\par ENVIRONMENT
\par        PATCH_GET
\par           This specifies whether patch gets missing or read-only  files  from  RCS,  ClearCase,  Perforce,  or  SCCS  by
\par           default; see the -g or --get option.
\par 
\par        POSIXLY_CORRECT
\par           If set, patch conforms more strictly to the POSIX standard by default: see the --posix option.
\par 
\par        QUOTING_STYLE
\par           Default value of the --quoting-style option.
\par 
\par        SIMPLE_BACKUP_SUFFIX
\par           Extension to use for simple backup file names instead of .orig.
\par 
\par        TMPDIR, TMP, TEMP
\par           Directory  to  put temporary files in; patch uses the first environment variable in this list that is set.  If
\par           none are set, the default is system-dependent; it is normally /tmp on Unix hosts.
\par 
\par        VERSION_CONTROL or PATCH_VERSION_CONTROL
\par           Selects version control style; see the -v or --version-control option.
\par 
\par FILES
\par        $TMPDIR/p*
\par           temporary files
\par 
\par        /dev/tty
\par           controlling terminal; used to get answers to questions asked of the user
\par 
\par SEE ALSO
\par        diff(1), ed(1), merge(1).
\par 
\par        Marshall T. Rose and  Einar  A.  Stefferud,  Proposed  Standard  for  Message  Encapsulation,  Internet  RFC  934
\par        <URL:ftp://ftp.isi.edu/in-notes/rfc934.txt> (1985-01).
\par 
\par NOTES FOR PATCH SENDERS
\par        There are several things you should bear in mind if you are going to be sending out patches.
\par 
\par        Create your patch systematically.  A good method is the command diff -Naur old new where old and new identify the
\par        old and new directories.  The names old and new should not contain  any  slashes.   The  diff  command\rquote s  headers
\par        should have dates and times in Universal Time using traditional Unix format, so that patch recipients can use the
\par        -Z or --set-utc option.  Here is an example command, using Bourne shell syntax:
\par 
\par           LC_ALL=C TZ=UTC0 diff -Naur gcc-2.7 gcc-2.8
\par 
\par        Tell your recipients how to apply the patch by telling them which directory to cd to, and which patch options  to
\par        use.   The  option  string -Np1 is recommended.  Test your procedure by pretending to be a recipient and applying
\par        your patch to a copy of the original files.
\par 
\par        You can save people a lot of grief by keeping a patchlevel.h file which is patched to increment the  patch  level
\par        as the first diff in the patch file you send out.  If you put a Prereq: line in with the patch, it won\rquote t let them
\par        apply patches out of order without some warning.
\par 
\par        You can create a file by sending out a diff that compares /dev/null or an empty file dated the Epoch  (1970-01-01
\par        00:00:00  UTC)  to  the  file  you  want to create.  This only works if the file you want to create doesn\rquote t exist
\par        already in the target directory.  Conversely, you can remove a file by sending out a context diff  that  compares
\par        the  file  to be deleted with an empty file dated the Epoch.  The file will be removed unless patch is conforming
\par        to POSIX and the -E or --remove-empty-files option is not given.  An easy way to generate patches that create and
\par        remove files is to use GNU diff\rquote s -N or --new-file option.
\par 
\par        If the recipient is supposed to use the -pN option, do not send output that looks like this:
\par 
\par           diff -Naur v2.0.29/prog/README prog/README
\par           --- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
\par           +++ prog/README   Mon Mar 17 14:58:22 1997
\par 
\par        because  the two file names have different numbers of slashes, and different versions of patch interpret the file
\par        names differently.  To avoid confusion, send output that looks like this instead:
\par 
\par           diff -Naur v2.0.29/prog/README v2.0.30/prog/README
\par           --- v2.0.29/prog/README   Mon Mar 10 15:13:12 1997
\par           +++ v2.0.30/prog/README   Mon Mar 17 14:58:22 1997
\par 
\par        Avoid sending patches that compare backup file names like README.orig, since this might confuse patch into patch-
\par        ing  a backup file instead of the real file.  Instead, send patches that compare the same base file names in dif-
\par        ferent directories, e.g. old/README and new/README.
\par 
\par        Take care not to send out reversed patches, since it makes people wonder whether they already applied the  patch.
\par 
\par        Try not to have your patch modify derived files (e.g. the file configure where there is a line configure: config-
\par        ure.in in your makefile), since the recipient should be able to regenerate the derived files anyway.  If you must
\par        send  diffs  of  derived  files, generate the diffs using UTC, have the recipients apply the patch with the -Z or
\par        --set-utc option, and have them remove any unpatched files that depend on patched files (e.g. with make clean).
\par 
\par        While you may be able to get away with putting 582 diff listings into one file, it may be wiser to group  related
\par        patches into separate files in case something goes haywire.
\par 
\par DIAGNOSTICS
\par        Diagnostics generally indicate that patch couldn\rquote t parse your patch file.
\par 
\par        If  the  --verbose option is given, the message Hmm... indicates that there is unprocessed text in the patch file
\par        and that patch is attempting to intuit whether there is a patch in that text and, if so, what kind  of  patch  it
\par        is.
\par 
\par        patch\rquote s  exit  status is 0 if all hunks are applied successfully, 1 if some hunks cannot be applied or there were
\par        merge conflicts, and 2 if there is more serious trouble.  When applying a set of patches in a  loop  it  behooves
\par        you to check this exit status so you don\rquote t apply a later patch to a partially patched file.
\par 
\par CAVEATS
\par        Context  diffs  cannot  reliably represent the creation or deletion of empty files, empty directories, or special
\par        files such as symbolic links.  Nor can they represent changes to file metadata like  ownership,  permissions,  or
\par        whether one file is a hard link to another.  If changes like these are also required, separate instructions (e.g.
\par        a shell script) to accomplish them should accompany the patch.
\par 
\par        patch cannot tell if the line numbers are off in an ed script, and can detect bad line numbers in a  normal  diff
\par        only  when  it  finds  a  change or deletion.  A context diff using fuzz factor 3 may have the same problem.  You
\par        should probably do a context diff in these cases to see if the changes made sense.  Of course, compiling  without
\par        errors is a pretty good indication that the patch worked, but not always.
\par 
\par        patch  usually  produces the correct results, even when it has to do a lot of guessing.  However, the results are
\par        guaranteed to be correct only when the patch is applied to exactly the same version of the file  that  the  patch
\par        was generated from.
\par 
\par COMPATIBILITY ISSUES
\par        The  POSIX  standard  specifies  behavior that differs from patch\rquote s traditional behavior.  You should be aware of
\par        these differences if you must interoperate with patch versions 2.1 and earlier, which do not conform to POSIX.
\par 
\par         \uc2\u183 \'a1\'a4 In traditional patch, the -p option\rquote s operand was optional, and a bare -p  was  equivalent  to  -p0.   The  -p\uc1
\par           option  now  requires  an  operand, and -p 0 is now equivalent to -p0.  For maximum compatibility, use options
\par           like -p0 and -p1.
\par 
\par           Also, traditional patch simply counted slashes when stripping path prefixes; patch now counts pathname  compo-
\par           nents.   That is, a sequence of one or more adjacent slashes now counts as a single slash.  For maximum porta-
\par           bility, avoid sending patches containing // in file names.
\par 
\par         \uc2\u183 \'a1\'a4 In traditional patch, backups were enabled by default.  This behavior is now enabled with the -b  or  --backup\uc1
\par           option.
\par 
\par           Conversely,  in POSIX patch, backups are never made, even when there is a mismatch.  In GNU patch, this behav-
\par           ior is enabled with the --no-backup-if-mismatch option, or by conforming to POSIX with the --posix  option  or
\par           by setting the POSIXLY_CORRECT environment variable.
\par 
\par           The -b suffix option of traditional patch is equivalent to the -b -z suffix options of GNU patch.
\par 
\par         \uc2\u183 \'a1\'a4 Traditional patch used a complicated (and incompletely documented) method to intuit the name of the file to be\uc1
\par           patched from the patch header.  This method did not conform to POSIX, and had a few gotchas.  Now patch uses a
\par           different,  equally complicated (but better documented) method that is optionally POSIX-conforming; we hope it
\par           has fewer gotchas.  The two methods are compatible if the file names in the context diff header and the Index:
\par           line  are all identical after prefix-stripping.  Your patch is normally compatible if each header\rquote s file names
\par           all contain the same number of slashes.
\par 
\par         \uc2\u183 \'a1\'a4 When traditional patch asked the user a question, it sent the question to standard error  and  looked  for  an\uc1
\par           answer  from  the  first  file  in  the  following  list that was a terminal: standard error, standard output,
\par           /dev/tty, and standard input.  Now patch sends questions to standard output and gets  answers  from  /dev/tty.
\par           Defaults  for some answers have been changed so that patch never goes into an infinite loop when using default
\par           answers.
\par 
\par         \uc2\u183 \'a1\'a4 Traditional patch exited with a status value that counted the number of bad hunks, or with status 1  if  there\uc1
\par           was real trouble.  Now patch exits with status 1 if some hunks failed, or with 2 if there was real trouble.
\par 
\par         \uc2\u183 \'a1\'a4 Limit  yourself  to the following options when sending instructions meant to be executed by anyone running GNU\uc1
\par           patch, traditional patch, or a patch that conforms to POSIX.  Spaces are significant in  the  following  list,
\par           and operands are required.
\par 
\par              -c
\par              -d dir
\par              -D define
\par              -e
\par              -l
\par              -n
\par              -N
\par              -o outfile
\par              -pnum
\par              -R
\par              -r rejectfile
\par 
\par BUGS
\par        Please report bugs via email to <bug-patch@gnu.org>.
\par 
\par        If code has been duplicated (for instance with #ifdef OLDCODE ... #else ... #endif), patch is incapable of patch-
\par        ing both versions, and, if it works at all, will likely patch the wrong one, and tell you that  it  succeeded  to
\par        boot.
\par 
\par        If  you  apply  a  patch  you\rquote ve already applied, patch thinks it is a reversed patch, and offers to un-apply the
\par        patch.  This could be construed as a feature.
\par 
\par        Computing how to merge a hunk is significantly harder than using the standard  fuzzy  algorithm.   Bigger  hunks,
\par        more context, a bigger offset from the original location, and a worse match all slow the algorithm down.
\par 
\par COPYING
\par        Copyright (C) 1984, 1985, 1986, 1988 Larry Wall.
\par        Copyright (C) 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2009 Free Soft-
\par        ware Foundation, Inc.
\par 
\par        Permission is granted to make and distribute verbatim copies of this manual provided  the  copyright  notice  and
\par        this permission notice are preserved on all copies.
\par 
\par        Permission  is  granted to copy and distribute modified versions of this manual under the conditions for verbatim
\par        copying, provided that the entire resulting derived work is distributed under the terms of  a  permission  notice
\par        identical to this one.
\par 
\par        Permission  is  granted to copy and distribute translations of this manual into another language, under the above
\par        conditions for modified versions, except that this permission notice may be included in translations approved  by
\par        the copyright holders instead of in the original English.
\par 
\par AUTHORS
\par        Larry  Wall wrote the original version of patch.  Paul Eggert removed patch\rquote s arbitrary limits; added support for
\par        binary files, setting file times, and deleting files; and made it conform better to  POSIX.   Other  contributors
\par        include  Wayne  Davison,  who added unidiff support, and David MacKenzie, who added configuration and backup sup-
\par        port.  Andreas Gr\uc2\u252 \'a8\'b9nbacher added support for merging.\uc1
\par 
\par                                       GNU                             PATCH(1)
\par (END) \par}