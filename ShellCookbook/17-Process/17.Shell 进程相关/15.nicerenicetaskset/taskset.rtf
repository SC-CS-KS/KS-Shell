{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset0 Times New Roman;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red0\green0\blue0;\red79\green129\blue189;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid927771531
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\b\i\fs28}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1431259065}
{\list\listtemplateid425217698\listsimple1
{\listlevel\levelnfc0\leveljc0\li1380\fi-420\jclisttab\tx1380\levelstartat1{\leveltext\'02\'00);}{\levelnumbers\'01;}\f3\b\i\fs24\cf4}
\listid274289452}
}
{\*\listoverridetable
{\listoverride\listid1431259065\listoverridecount0\ls1}
{\listoverride\listid274289452\listoverridecount0\ls2}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 taskset
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\b\fs20 \uc2\u25226 \'b0\'d1\u36827 \'bd\'f8\u31243 \'b3\'cc\u36816 \'d4\'cb\u34892 \'d0\'d0\u21040 \'b5\'bd\u25351 \'d6\'b8\u23450 \'b6\'a8CPU\u65288 \'a3\'a8\u21363 \'bc\'b4\u20462 \'d0\'de\u25913 \'b8\'c4\u36827 \'bd\'f8\u31243 \'b3\'cc\u30340 \'b5\'c4"CPU\u20146 \'c7\'d7\u21644 \'ba\'cd\u24615 \'d0\'d4"\u65289 \'a3\'a9\u65306 \'a3\'bataskset\~\uc1
\par \plain \f1\fs20 \uc2\u20004 \'c1\'bd\u20010 \'b8\'f6\u21517 \'c3\'fb\u35789 \'b4\'ca\~\uc1
\par SMP (Symmetrical Multi-Processing)\uc2\u65306 \'a3\'ba\uc1\plain \f1\fs20\cf1 \uc2\u25351 \'d6\'b8\u22312 \'d4\'da\u19968 \'d2\'bb\u20010 \'b8\'f6\u35745 \'bc\'c6\u31639 \'cb\'e3\u26426 \'bb\'fa\u19978 \'c9\'cf\u27719 \'bb\'e3\u38598 \'bc\'af\u20102 \'c1\'cb\u19968 \'d2\'bb\u32452 \'d7\'e9\u22788 \'b4\'a6\u29702 \'c0\'ed\u22120 \'c6\'f7(\u22810 \'b6\'e0CPU)\u65292 \'a3\'ac\u21508 \'b8\'f7CPU\u20043 \'d6\'ae\u38388 \'bc\'e4\u20849 \'b9\'b2\u20139 \'cf\'ed\u20869 \'c4\'da\u23384 \'b4\'e6\u23376 \'d7\'d3\u31995 \'cf\'b5\u32479 \'cd\'b3\u20197 \'d2\'d4\u21450 \'bc\'b0\u24635 \'d7\'dc\u32447 \'cf\'df\u32467 \'bd\'e1\u26500 \'b9\'b9\u12290 \'a1\'a3\~\uc1
\par \plain \f1\b\fs20\cf1 CPU affinity\plain \f1\fs20 \uc2\u65306 \'a3\'ba\u20013 \'d6\'d0\u25991 \'ce\'c4\u21796 \'bb\'bd\u20316 \'d7\'f7\ldblquote CPU\u20146 \'c7\'d7\u21644 \'ba\'cd\u24615 \'d0\'d4\rdblquote \u65292 \'a3\'ac\u26159 \'ca\'c7\uc1\plain \f1\fs20\cf1 \uc2\u25351 \'d6\'b8\u22312 \'d4\'daCMP\u26550 \'bc\'dc\u26500 \'b9\'b9\u19979 \'cf\'c2\u65292 \'a3\'ac\u33021 \'c4\'dc\u22815 \'b9\'bb\u23558 \'bd\'ab\u19968 \'d2\'bb\u20010 \'b8\'f6\u25110 \'bb\'f2\u22810 \'b6\'e0\u20010 \'b8\'f6\u36827 \'bd\'f8\u31243 \'b3\'cc\u32465 \'b0\'f3\u23450 \'b6\'a8\u21040 \'b5\'bd\u19968 \'d2\'bb\u20010 \'b8\'f6\u25110 \'bb\'f2\u22810 \'b6\'e0\u20010 \'b8\'f6\u22788 \'b4\'a6\u29702 \'c0\'ed\u22120 \'c6\'f7\u19978 \'c9\'cf\u36816 \'d4\'cb\u34892 \'d0\'d0\u12290 \'a1\'a3\~\uc1
\par \plain \f1\fs20 \uc2\u35831 \'c7\'eb\u20808 \'cf\'c8\u30830 \'c8\'b7\u23450 \'b6\'a8\u20320 \'c4\'e3\u30340 \'b5\'c4cpu\u26680 \'ba\'cb\u24515 \'d0\'c4\u21450 \'bc\'b0\u21629 \'c3\'fc\u21517 \'c3\'fb\u65288 \'a3\'a8\u20363 \'c0\'fd\u22914 \'c8\'e7\u22235 \'cb\'c4\u20010 \'b8\'f6\u26680 \'ba\'cb\u24515 \'d0\'c4\u65306 \'a3\'ba0,1,2,3\u65289 \'a3\'a9\u65306 \'a3\'bacat /proc/cpuinfo\~\uc1
\par 
\par \plain \f1\fs20\cf1 taskset -cp 1 5200\~
\par \plain \f1\fs20 #\uc2\u25226 \'b0\'d1PID\u20026 \'ce\'aa5200\u30340 \'b5\'c4\u36827 \'bd\'f8\u31243 \'b3\'cc\u36816 \'d4\'cb\u34892 \'d0\'d0\u21040 \'b5\'bdCPU#1\u19978 \'c9\'cf\~\uc1
\par #\uc2\u20063 \'d2\'b2\u21487 \'bf\'c9\u20197 \'d2\'d4\u22312 \'d4\'da\u21551 \'c6\'f4\u21160 \'b6\'af\u36827 \'bd\'f8\u31243 \'b3\'cc\u26102 \'ca\'b1\u25351 \'d6\'b8\u23450 \'b6\'a8\u65306 \'a3\'ba\~\uc1
\par \plain \f1\fs20\cf1 taskset -c 1 /etc/init.d/mysql start\~
\par \plain \f1\fs20\cf2 ---------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20 TASKSET(1)                                                      Linux User's Manual                                                     TASKSET(1)
\par 
\par NAME
\par        taskset - retrieve or set a processes's CPU affinity
\par 
\par SYNOPSIS
\par        taskset [options] [mask | list ] [pid | command [arg]...]
\par 
\par DESCRIPTION
\par        taskset  is  used to set or retrieve the CPU affinity of a running process given its PID or to launch a new COMMAND with a given CPU affin-
\par        ity.  CPU affinity is a scheduler property that "bonds" a process to a given set of CPUs on the system.  The Linux scheduler will honor the
\par        given  CPU  affinity and the process will not run on any other CPUs.  Note that the Linux scheduler also supports natural CPU affinity: the
\par        scheduler attempts to keep processes on the same CPU as long as practical for performance  reasons.   Therefore,  forcing  a  specific  CPU
\par        affinity is useful only in certain applications.
\par 
\par        The  CPU  affinity  is represented as a bitmask, with the lowest order bit corresponding to the first logical CPU and the highest order bit
\par        corresponding to the last logical CPU.  Not all CPUs may exist on a given system but a mask may specify more  CPUs  than  are  present.   A
\par        retrieved  mask  will  reflect only the bits that correspond to CPUs physically on the system.  If an invalid mask is given (i.e., one that
\par        corresponds to no valid CPUs on the current system) an error is returned.  The masks are typically given in hexadecimal.  For example,
\par 
\par        0x00000001
\par               is processor #0
\par 
\par        0x00000003
\par               is processors #0 and #1
\par 
\par        0xFFFFFFFF
\par               is all processors (#0 through #31)
\par 
\par        When taskset returns, it is guaranteed that the given program has been scheduled to a legal CPU.
\par 
\par OPTIONS
\par        -p, --pid
\par               operate on an existing PID and not launch a new task
\par 
\par        -c, --cpu-list
\par               specifiy a numerical list of processors instead of a bitmask.  The list may contain multiple items, separated by comma, and  ranges.
\par               For example, 0,5,7,9-11.
\par 
\par        -h, --help
\par               display usage information and exit
\par 
\par        -V, --version
\par               output version information and exit
\par 
\par USAGE
\par        The default behavior is to run a new command with a given affinity mask:
\par               taskset [mask] -- [command] [arguments]
\par 
\par        You can also retrieve the CPU affinity of an existing task:
\par               taskset -p [pid]
\par 
\par        Or set it:
\par               taskset -p [mask] [pid]
\par 
\par PERMISSIONS
\par        A user must possess CAP_SYS_NICE to change the CPU affinity of a process.  Any user can retrieve the affinity mask.
\par 
\par AUTHOR
\par        Written by Robert M. Love.
\par 
\par REPORTING BUGS
\par        Report bugs to <rml@tech9.net>.
\par 
\par COPYRIGHT
\par        Copyright 2004 Robert M. Love
\par        This is free software; see the source for copying conditions.  There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICU-
\par        LAR PURPOSE.
\par 
\par SEE ALSO
\par        chrt(1), nice(1), renice(1), sched_setaffinity(2), sched_getaffinity(2)
\par 
\par        See sched_setscheduler(2) for a description of the Linux scheduling scheme.
\par 
\par schedutils                                                           Apr 2003                                                           TASKSET(1)\par}