{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid161229539\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid692462705}
{\list\listtemplateid750353978\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1250533668}
{\list\listtemplateid485439929\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid71026335}
}
{\*\listoverridetable
{\listoverride\listid692462705\listoverridecount0\ls1}
{\listoverride\listid1250533668\listoverridecount0\ls2}
{\listoverride\listid71026335\listoverridecount0\ls3}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf4 set
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 set: set [--abefhkmnptuvxBCHP] [-o option] [arg ...]
\par         -a  Mark variables which are modified or created for export.
\par         -b  Notify of job termination immediately.
\par   \plain \f1\fs20\cf1       -e  Exit immediately if a command exits with a non-zero status.
\par \plain \f1\fs20         -f  Disable file name generation (globbing).
\par         -h  Remember the location of commands as they are looked up.
\par         -k  All assignment arguments are placed in the environment for a
\par             command, not just those that precede the command name.
\par         -m  Job control is enabled.
\par         -n  Read commands but do not execute them.
\par \plain \f1\fs20\cf1         -o option-name
\par \plain \f1\fs20         \plain \f1\fs20\cf1     Set the variable corresponding to option-name:
\par \plain \f1\fs20                 allexport    same as -a
\par                 braceexpand  same as -B
\par                 emacs        use an emacs-style line editing interface
\par                 errexit      same as -e
\par                 errtrace     same as -E
\par                 functrace    same as -T
\par                 hashall      same as -h
\par                 histexpand   same as -H
\par                 history      enable command history
\par                 ignoreeof    the shell will not exit upon reading EOF
\par                 interactive-comments
\par                              allow comments to appear in interactive commands
\par                 keyword      same as -k
\par                 monitor      same as -m
\par \plain \f1\fs20\cf1                 noclobber    same as -C
\par \plain \f1\fs20                 noexec       same as -n
\par                 noglob       same as -f
\par                 nolog        currently accepted but ignored
\par                 notify       same as -b
\par                 nounset      same as -u
\par                 onecmd       same as -t
\par                 physical     same as -P
\par                 pipefail     the return value of a pipeline is the status of
\par                              the last command to exit with a non-zero status,
\par                              or zero if no command exited with a non-zero status
\par                 posix        change the behavior of bash where the default
\par                              operation differs from the 1003.2 standard to
\par                              match the standard
\par                 privileged   same as -p
\par                 verbose      same as -v
\par                 vi           use a vi-style line editing interface
\par                 xtrace       same as -x
\par         -p  Turned on whenever the real and effective user ids do not match.
\par             Disables processing of the $ENV file and importing of shell
\par             functions.  Turning this option off causes the effective uid and
\par             gid to be set to the real uid and gid.
\par         -t  Exit after reading and executing one command.
\par         -u  Treat unset variables as an error when substituting.
\par         -v  Print shell input lines as they are read.
\par         -x  Print commands and their arguments as they are executed.
\par         -B  the shell will perform brace expansion
\par \plain \f1\fs20\cf1         -C  If set, disallow(\uc2\u39539 \'b2\'b5\u22238 \'bb\'d8\u65292 \'a3\'ac\u19981 \'b2\'bb\u20801 \'d4\'ca\u35768 \'d0\'ed) existing regular files to be overwritten(\u35206 \'b8\'b2\u30422 \'b8\'c7) by redirection(\u37325 \'d6\'d8\u23450 \'b6\'a8\u21521 \'cf\'f2) of output.\uc1
\par \plain \f1\fs20         -E  If set, the ERR trap is inherited by shell functions.
\par         -H  Enable ! style history substitution.  This flag is on
\par             by default when the shell is interactive.
\par         -P  If set, do not follow symbolic links when executing commands
\par             such as cd which change the current directory.
\par         -T  If set, the DEBUG trap is inherited by shell functions.
\par         -   Assign any remaining arguments to the positional parameters.
\par             The -x and -v options are turned off.
\par     
\par     \plain \f1\fs20\cf3 Using + rather than - causes these flags to be turned off.\plain \f1\fs20\cf1  \plain \f1\fs20  The flags can also be used upon invocation of the shell.  
\par     The current set of flags may be found in $-.  
\par     The remaining n ARGs are positional parameters and are assigned, in order, to $1, $2, .. $n. 
\par \plain \f1\fs20\cf3          If no ARGs are given, all shell variables are printed.
\par \plain \f1\fs20\cf2 -----------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20 NAME
\par \plain \f1\fs20\cf1        set -\plain \f1\b\fs20\cf1  set or unset options\plain \f1\fs20\cf1  and \plain \f1\b\fs20\cf1 positional parameters
\par \plain \f1\fs20 SYNOPSIS
\par        set [-abCefmnuvx][-h][-o option][argument...]
\par        set [+abCefmnuvx][+h][+o option][argument...]
\par 
\par \plain \f1\fs20\cf1        set -- [argument...]
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1        set -o
\par        set +o
\par \plain \f1\fs20 
\par DESCRIPTION
\par \plain \f1\fs20\cf1        If  no  options  or arguments are specified, set shall write the names and values of all shell variables in the collation
\par        sequence of the current locale. Each name shall start on a separate line, using the format:
\par               "%s=%s\\n", <name>, <value>
\par \plain \f1\fs20 
\par        The value string shall be written with appropriate quoting; see the description of shell quoting in Quoting . The  output
\par        shall  be  suitable  for reinput to the shell, setting or resetting, as far as possible, the variables that are currently
\par        set; read-only variables cannot be reset.
\par 
\par        When options are specified, they shall set or unset attributes of the shell, as described below. When arguments are spec-
\par        ified, they cause positional parameters to be set or unset, as described below. Setting or unsetting attributes and posi-
\par        tional parameters are not necessarily related actions, but they can be combined in a single invocation of set.
\par 
\par        The set special built-in shall support the Base Definitions volume of IEEE Std 1003.1-2001, Section 12.2, Utility  Syntax
\par        Guidelines  except  that  options  can be specified with either a leading hyphen (meaning enable the option) or plus sign
\par        (meaning disable it) unless otherwise specified.
\par 
\par        Implementations shall support the options in the following list in both their hyphen and plus-sign forms.  These  options
\par        can also be specified as options to sh.
\par 
\par \plain \f1\fs20\cf1        -a     When  this  option is on, the export attribute shall be set for each variable to which an assignment is performed;
\par \plain \f1\fs20               see the Base Definitions volume of IEEE Std 1003.1-2001, Section 4.21, Variable Assignment. If the assignment pre-
\par               cedes  a  utility  name  in a command, the export attribute shall not persist in the current execution environment
\par               after the utility completes, with the exception that preceding one of the special built-in  utilities  causes  the
\par               export attribute to persist after the built-in has completed. If the assignment does not precede a utility name in
\par               the command, or if the assignment is a result of the operation of  the  getopts  or  read  utilities,  the  export
\par               attribute shall persist until the variable is unset.
\par 
\par \plain \f1\fs20\cf1        -b     This  option  shall  be  supported  if the implementation supports the User Portability Utilities option.\plain \f1\fs20  \plain \f1\fs20\cf1 It shall
\par               cause the shell to notify the user asynchronously of background job completions.\plain \f1\fs20  
\par               The following message is  written to standard error:
\par \plain \f1\fs20\cf1               "[%d]%c %s%s\\n", <job-number>, <current>, <status>, <job-name>
\par \plain \f1\fs20 
\par              where the fields shall be as follows:
\par               <current>
\par               The character '+' identifies the job that would be used as a default for the fg or bg utilities; this job can also
\par               be specified using the job_id "%+" or "%%" . The character '-' identifies the job that would become the default if
\par               the  current default job were to exit; this job can also be specified using the job_id "%-" . For other jobs, this
\par               field is a <space>. At most one job can be identified with '+' and at most one job can be identified with '-' . If
\par               there  is  any  suspended  job, then the current job shall be a suspended job. If there are at least two suspended
\par               jobs, then the previous job also shall be a suspended job.
\par 
\par               <job-number>
\par               A number that can be used to identify the process group to the wait, fg, bg, and kill utilities. Using these util-
\par               ities, the job can be identified by prefixing the job number with '%' .
\par 
\par               <status>
\par               Unspecified.
\par 
\par               <job-name>
\par               Unspecified.
\par 
\par 
\par               When  the  shell  notifies  the  user a job has been completed, it may remove the job's process ID from the list of those
\par               known in the current shell execution environment; see Asynchronous Lists . Asynchronous notification shall not be enabled
\par               by default.
\par 
\par \plain \f1\fs20\cf3        -C \plain \f1\fs20     (Uppercase  C.)  \plain \f1\fs20\cf1 Prevent  existing files from being overwritten by the shell's '>' redirection operator (see Redi-
\par               recting Output ); the ">|" redirection operator shall override this noclobber option for an individual file.
\par \plain \f1\fs20 
\par    \plain \f1\fs20\cf1     -e     When this option is on, if a simple command fails for any of the reasons listed in Consequences of Shell Errors or
\par               returns an exit status value >0\plain \f1\fs20 , and is not part of the compound list following a while, until, or if keyword, and
\par               is not a part of an AND or OR list, and is not a pipeline preceded by the ! reserved word, then \plain \f1\fs20\cf1  the  shell  shall
\par               immediately exit.
\par 
\par        -f     The shell shall disable pathname expansion.
\par \plain \f1\fs20 
\par   \plain \f1\fs20\cf1      -h     Locate  and  remember  utilities  invoked  by functions as those functions are defined (the utilities are normally
\par               located when the function is executed).
\par \plain \f1\fs20 
\par        -m     This option shall be supported if the implementation supports the User  Portability  Utilities  option.  All  jobs
\par               shall  be  run  in  their own process groups. Immediately before the shell issues a prompt after completion of the
\par               background job, a message reporting the exit status of the background job shall be written to standard error. If a
\par               foreground  job stops, the shell shall write a message to standard error to that effect, formatted as described by
\par               the jobs utility.  In addition, if a job changes status other than exiting (for example, if it stops for input  or
\par               output  or  is  stopped by a SIGSTOP signal), the shell shall write a similar message immediately prior to writing
\par               the next prompt. This option is enabled by default for interactive shells.
\par 
\par     \plain \f1\fs20\cf1    -n     The shell shall read commands but does not execute them;\plain \f1\fs20  this can be used to check for shell script syntax errors.
\par               An interactive shell may ignore this option.
\par 
\par \plain \f1\fs20\cf1        -o     Write the current settings of the options to standard output in an unspecified format.
\par 
\par        +o     Write the current option settings to standard output in a format that is suitable for reinput to the shell as com-
\par               mands that achieve the same options settings.
\par \plain \f1\fs20 
\par        -o  option
\par 
\par               This option is supported if the system supports the User  Portability  Utilities  option.  It  shall  set  various
\par               options,  many  of which shall be equivalent to the single option letters. The following values of option shall be
\par               supported:
\par 
\par      \plain \f1\fs20\cf1          allexport
\par \plain \f1\fs20               Equivalent to -a.
\par \plain \f1\fs20\cf1 
\par               errexit
\par \plain \f1\fs20               Equivalent to -e.
\par 
\par            \plain \f1\fs20\cf1    ignoreeof
\par \plain \f1\fs20               Prevent an interactive shell from exiting on end-of-file. This setting  prevents  accidental  logouts  when  <con-
\par               trol>-D is entered. A user shall explicitly exit to leave the interactive shell.
\par 
\par \plain \f1\fs20\cf1               monitor
\par \plain \f1\fs20               Equivalent to -m. This option is supported if the system supports the User Portability Utilities option.
\par 
\par \plain \f1\fs20\cf1               noclobber
\par \plain \f1\fs20               Equivalent to -C (uppercase C).
\par 
\par \plain \f1\fs20\cf1               noglob
\par \plain \f1\fs20               Equivalent to -f.
\par 
\par  \plain \f1\fs20\cf1              noexec
\par \plain \f1\fs20               Equivalent to -n.
\par 
\par   \plain \f1\fs20\cf1             nolog
\par \plain \f1\fs20               Prevent the entry of function definitions into the command history; see Command History List .
\par 
\par \plain \f1\fs20\cf1               notify
\par \plain \f1\fs20               Equivalent to -b.
\par 
\par \plain \f1\fs20\cf1               nounset
\par \plain \f1\fs20               Equivalent to -u.
\par 
\par            \plain \f1\fs20\cf1    verbose
\par \plain \f1\fs20               Equivalent to -v.
\par 
\par          \plain \f1\fs20\cf1      vi
\par \plain \f1\fs20               Allow  shell  command line editing using the built-in vi editor.  Enabling vi mode shall disable any other command
\par               line editing mode provided as an implementation extension.
\par 
\par               It need not be possible to set vi mode on for certain block-mode terminals.
\par 
\par         \plain \f1\fs20\cf1       xtrace
\par \plain \f1\fs20               Equivalent to -x.
\par 
\par 
\par    \plain \f1\fs20\cf1     -u     The shell shall write a message to standard error when it tries to expand a variable that is not set  and  immedi-
\par               ately exit. An interactive shell shall not exit.
\par \plain \f1\fs20 
\par     \plain \f1\fs20\cf1    -v     The shell shall write its input to standard error as it is read.
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1        -x     The  shell  shall write to standard error a trace for each command after it expands the command and before it exe-
\par               cutes it.\plain \f1\fs20  It is unspecified whether the command that turns tracing off is traced.
\par 
\par        The default for all these options shall be off (unset) unless stated otherwise in the description of the option or unless
\par        the shell was invoked with them on; see sh.
\par 
\par        The  remaining  arguments shall be assigned in order to the positional parameters. The special parameter '#' shall be set
\par        to reflect the number of positional parameters. All positional parameters shall  be  unset  before  any  new  values  are
\par        assigned.
\par 
\par       \plain \f1\fs20\cf1  The  special  argument  "--" immediately following the set command name can be used to delimit the arguments if the first
\par        argument begins with '+' or '-', or to prevent inadvertent listing of all shell variables when there  are  no  arguments.
\par        The command set -- without argument shall unset all positional parameters and \plain \f1\fs20\cf3 set the special parameter '#' to zero.
\par \plain \f1\fs20 
\par OPTIONS
\par        See the DESCRIPTION.
\par OPERANDS
\par        See the DESCRIPTION.
\par STDIN
\par        Not used.
\par INPUT FILES
\par        None.
\par ENVIRONMENT VARIABLES
\par        None.
\par ASYNCHRONOUS EVENTS
\par        Default.
\par STDOUT
\par        See the DESCRIPTION.
\par STDERR
\par        The standard error shall be used only for diagnostic messages.
\par OUTPUT FILES
\par        None.
\par EXTENDED DESCRIPTION
\par        None.
\par \plain \f1\fs20\cf1 EXIT STATUS
\par        Zero.
\par \plain \f1\fs20 CONSEQUENCES OF ERRORS
\par        Default.
\par        The following sections are informative.
\par APPLICATION USAGE
\par        None.
\par \plain \f1\b\fs20 EXAMPLES
\par \plain \f1\fs20        \plain \f1\fs20\cf1 Write out all variables and their values:
\par \plain \f1\fs20               set
\par 
\par      \plain \f1\fs20\cf1   Set $1, $2, and $3 and set "$#" to 3:
\par \plain \f1\fs20               set c a b
\par 
\par        \plain \f1\fs20\cf1 Turn on the -x and -v options:
\par \plain \f1\fs20               set -xv
\par 
\par      \plain \f1\fs20\cf1   Unset all positional parameters:
\par \plain \f1\fs20               set --
\par 
\par       \plain \f1\fs20\cf1  Set $1 to the value of x, even if it begins with '-' or '+' :
\par \plain \f1\fs20               set -- "$x"
\par 
\par       \plain \f1\fs20\cf1  Set the positional parameters to the expansion of x, even if x expands with a leading '-' or '+' :
\par \plain \f1\fs20               set -- $x
\par 
\par RATIONALE
\par        The  set  --  form  is listed specifically in the SYNOPSIS even though this usage is implied by the Utility Syntax Guide-
\par        lines. The explanation of this feature removes any ambiguity about whether the set -- form  might  be  misinterpreted  as
\par        being  equivalent to set without any options or arguments. The functionality of this form has been adopted from the Korn-
\par        Shell. In System V, set -- only unsets parameters if there is at least one argument; the only way to unset all parameters
\par        is  to  use  shift.  Using  the KornShell version should not affect System V scripts because there should be no reason to
\par        issue it without arguments deliberately; if it were issued as, for example:
\par               set -- "$@"
\par 
\par        and there were in fact no arguments resulting from "$@", unsetting the parameters would have no result.
\par 
\par        The set + form in early proposals was omitted as being an unnecessary duplication of set alone and not widespread histor-
\par        ical practice.
\par 
\par        The  noclobber  option  was changed to allow set -C as well as the set -o noclobber option. The single-letter version was
\par        added so that the historical "$-" paradigm would not be broken; see Special Parameters .
\par 
\par        The -h flag is related to command name hashing and is only required on XSI-conformant systems.
\par 
\par        The following set flags were omitted intentionally with the following rationale:
\par 
\par      \plain \f1\fs20\cf1   -k     The -k flag was originally added by the author of the Bourne shell to make it easier for users of pre-release ver-
\par               sions  of  the shell.\plain \f1\fs20  In early versions of the Bourne shell the construct set name= value had to be used to assign
\par               values to shell variables. The problem with -k is that the behavior affects parsing, virtually precluding  writing
\par               any  compilers.  To explain the behavior of -k, it is necessary to describe the parsing algorithm, which is imple-
\par               mentation-defined. For example:
\par               set -k; echo name=value
\par 
\par        and:
\par               set -k
\par               echo name=value
\par 
\par        behave differently. The interaction with functions is even more complex.  What is more, the  -k  flag  is  never  needed,
\par        since the command line could have been reordered.
\par 
\par        -t     The  -t flag is hard to specify and almost never used. The only known use could be done with here-documents. More-
\par               over, the behavior with ksh and sh differs. The reference page says that it exits after reading and executing  one
\par               command.  What  is one command? If the input is date; date, sh executes both date commands while ksh does only the
\par               first.
\par 
\par        Consideration was given to rewriting set to simplify its confusing syntax. A specific suggestion was that the unset util-
\par        ity should be used to unset options instead of using the non- getopt() -able + option syntax. However, the conclusion was
\par        reached that the historical practice of using + option was satisfactory and that there was no compelling reason to modify
\par        such widespread historical practice.
\par 
\par        The  -o  option was adopted from the KornShell to address user needs. In addition to its generally friendly interface, -o
\par        is needed to provide the vi command line editing mode, for which historical practice yields no single-letter option name.
\par        (Although it might have been possible to invent such a letter, it was recognized that other editing modes would be devel-
\par        oped and -o provides ample name space for describing such extensions.)
\par 
\par        Historical implementations are inconsistent in the format used for -o option status reporting. The +o format  without  an
\par        option-argument  was  added  to allow portable access to the options that can be saved and then later restored using, for
\par        instance, a dot script.
\par 
\par        Historically, sh did trace the command set +x, but ksh did not.
\par 
\par        The ignoreeof setting prevents accidental logouts when the end-of-file character (typically <control>-D)  is  entered.  A
\par        user shall explicitly exit to leave the interactive shell.
\par 
\par        The  set  -m  option was added to apply only to the UPE because it applies primarily to interactive use, not shell script
\par        applications.
\par 
\par        The ability to do asynchronous notification became available in the 1988 version of the KornShell. To have it occur,  the
\par        user had to issue the command:
\par               trap "jobs -n" CLD
\par 
\par        The  C shell provides two different levels of an asynchronous notification capability. The environment variable notify is
\par        analogous to what is done in set -b or set -o notify. When set, it notifies the user immediately of background  job  com-
\par        pletions. When unset, this capability is turned off.
\par 
\par        The other notification ability comes through the built-in utility notify. The syntax is:
\par               notify [%job ... ]
\par 
\par        By issuing notify with no operands, it causes the C shell to notify the user asynchronously when the state of the current
\par        job changes. If given operands, notify asynchronously informs the user of changes in the states of the specified jobs.
\par 
\par        To add asynchronous notification to the POSIX shell, neither the KornShell extensions to trap, nor  the  C  shell  notify
\par        environment variable seemed appropriate ( notify is not a proper POSIX environment variable name).
\par 
\par        The set -b option was selected as a compromise.
\par 
\par        The notify built-in was considered to have more functionality than was required for simple asynchronous notification.
\par 
\par FUTURE DIRECTIONS
\par        None.
\par 
\par SEE ALSO
\par        Special Built-In Utilities
\par 
\par COPYRIGHT
\par        Portions  of  this  text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003 Edition, Standard for
\par        Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6,  Copy-
\par        right (C) 2001-2003 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any
\par        discrepancy between this version and the original IEEE and The Open Group Standard, the original IEEE and The Open  Group
\par        Standard   is   the   referee   document.   The   original   Standard   can   be   obtained  online  at  http://www.open-
\par        group.org/unix/online.html .\par}