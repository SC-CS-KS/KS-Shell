{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid1299278133\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1999037965}
}
{\*\listoverridetable
{\listoverride\listid1999037965\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 command
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 COMMAND(1P)                POSIX Programmer\rquote s Manual               COMMAND(1P)
\par 
\par PROLOG
\par        This manual page is part of the POSIX Programmer\rquote s Manual.  The Linux implementation of this interface may differ
\par        (consult the corresponding Linux manual page for details of Linux behavior), or the interface may not  be  imple-
\par        mented on Linux.
\par 
\par NAME
\par \plain \f1\fs20\cf1        command - execute a simple command
\par \plain \f1\fs20 
\par SYNOPSIS
\par  \plain \f1\fs20\cf1       command [-p] command_name [argument ...]
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1        command [ -v | -V ] command_name
\par \plain \f1\fs20 
\par DESCRIPTION
\par        The command utility shall cause the shell to treat the arguments as a simple command, suppressing the shell func-
\par        tion lookup that is described in Command Search and Execution, item 1b.
\par 
\par        If the command_name is the same as the name of one of the special built-in utilities, the special  properties  in
\par        the  enumerated  list  at the beginning of Special Built-In Utilities shall not occur. In every other respect, if
\par        command_name is not the name of a function, the effect of command (with no options) shall be the same as omitting
\par        command.
\par 
\par        On  systems  supporting the User Portability Utilities option, the command utility also shall provide information
\par        concerning how a command name is interpreted by the shell; see -v and -V.
\par 
\par OPTIONS
\par        The command utility shall conform to the Base Definitions volume of IEEE Std 1003.1-2001, Section  12.2,  Utility
\par        Syntax Guidelines.
\par 
\par        The following options shall be supported:
\par 
\par \plain \f1\fs20\cf1        -p     Perform  the  command search using a default value for PATH that is guaranteed to find all of the standard
\par               utilities.
\par \plain \f1\fs20 
\par        -v     (On systems supporting the User Portability Utilities option.) Write a  string  to  standard  output  that
\par               indicates  the pathname or command that will be used by the shell, in the current shell execution environ-
\par               ment (see Shell Execution Environment ), to invoke command_name, but do not invoke command_name.
\par 
\par                * Utilities, regular built-in utilities, command_names including a slash character, and  any  implementa-
\par                  tion-defined  functions that are found using the PATH variable (as described in Command Search and Exe-
\par                  cution ), shall be written as absolute pathnames.
\par 
\par                * Shell functions, special built-in utilities, regular built-in utilities  not  associated  with  a  PATH
\par                  search, and shell reserved words shall be written as just their names.
\par 
\par                * An alias shall be written as a command line that represents its alias definition.
\par 
\par                * Otherwise, no output shall be written and the exit status shall reflect that the name was not found.
\par 
\par        -V     (On  systems  supporting  the  User  Portability Utilities option.) Write a string to standard output that
\par               indicates how the name given in the command_name operand will be interpreted by the shell, in the  current
\par               shell  execution  environment (see Shell Execution Environment ), but do not invoke command_name. Although
\par               the format of this string is unspecified, it shall indicate in which  of  the  following  categories  com-
\par               mand_name falls and shall include the information stated:
\par 
\par                * Utilities,  regular  built-in  utilities, and any implementation-defined functions that are found using
\par                  the PATH variable (as described in Command Search and Execution ), shall  be  identified  as  such  and
\par                  include the absolute pathname in the string.
\par 
\par                * Other shell functions shall be identified as functions.
\par 
\par                * Aliases shall be identified as aliases and their definitions included in the string.
\par 
\par                * Special built-in utilities shall be identified as special built-in utilities.
\par 
\par                * Regular  built-in  utilities  not associated with a PATH search shall be identified as regular built-in
\par                  utilities. (The term "regular" need not be used.)
\par 
\par                * Shell reserved words shall be identified as reserved words.
\par 
\par OPERANDS
\par        The following operands shall be supported:
\par 
\par        argument
\par               One of the strings treated as an argument to command_name.
\par 
\par        command_name
\par 
\par               The name of a utility or a special built-in utility.
\par 
\par STDIN
\par        Not used.
\par 
\par INPUT FILES
\par        None.
\par 
\par ENVIRONMENT VARIABLES
\par        The following environment variables shall affect the execution of command:
\par 
\par        LANG   Provide a default value for the internationalization variables that are unset or null. (See the Base Defi-
\par               nitions  volume of IEEE Std 1003.1-2001, Section 8.2, Internationalization Variables for the precedence of
\par               internationalization variables used to determine the values of locale categories.)
\par 
\par        LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.
\par 
\par        LC_CTYPE
\par               Determine the locale for the interpretation of sequences of bytes of text data as characters (for example,
\par               single-byte as opposed to multi-byte characters in arguments).
\par 
\par        LC_MESSAGES
\par               Determine  the locale that should be used to affect the format and contents of diagnostic messages written
\par               to standard error and informative messages written to standard output.
\par 
\par        NLSPATH
\par               Determine the location of message catalogs for the processing of LC_MESSAGES .
\par 
\par        PATH   Determine the search path used during the command search described in Command Search and Execution, except
\par               as described under the -p option.
\par 
\par ASYNCHRONOUS EVENTS
\par        Default.
\par 
\par STDOUT
\par        When the -v option is specified, standard output shall be formatted as:
\par 
\par               "%s\\n", <pathname or command>
\par 
\par        When the -V option is specified, standard output shall be formatted as:
\par 
\par               "%s\\n", <unspecified>
\par 
\par STDERR
\par        The standard error shall be used only for diagnostic messages.
\par 
\par OUTPUT FILES
\par        None.
\par 
\par EXTENDED DESCRIPTION
\par        None.
\par 
\par EXIT STATUS
\par        When the -v or -V options are specified, the following exit values shall be returned:
\par 
\par         0     Successful completion.
\par 
\par        >0     The command_name could not be found or an error occurred.
\par 
\par        Otherwise, the following exit values shall be returned:
\par 
\par        126    The utility specified by command_name was found but could not be invoked.
\par 
\par        127    An error occurred in the command utility or the utility specified by command_name could not be found.
\par 
\par        Otherwise,  the exit status of command shall be that of the simple command specified by the arguments to command.
\par 
\par CONSEQUENCES OF ERRORS
\par        Default.
\par 
\par        The following sections are informative.
\par 
\par APPLICATION USAGE
\par        The order for command search allows functions to override regular built-ins and path searches.  This  utility  is
\par        necessary  to  allow  functions  that have the same name as a utility to call the utility (instead of a recursive
\par        call to the function).
\par 
\par        The system default path is available using getconf; however, since getconf may need  to  have  the  PATH  set  up
\par        before it can be called itself, the following can be used:
\par 
\par               command -p getconf _CS_PATH
\par 
\par        There  are some advantages to suppressing the special characteristics of special built-ins on occasion. For exam-
\par        ple:
\par 
\par               command exec > unwritable-file
\par 
\par        does not cause a non-interactive script to abort, so that the output status can be checked by the script.
\par 
\par        The command, env, nohup, time, and xargs utilities have been specified to use exit code 127 if an error occurs so
\par        that  applications can distinguish "failure to find a utility" from "invoked utility exited with an error indica-
\par        tion". The value 127 was chosen because it is not commonly used for other meanings; most utilities use small val-
\par        ues  for  "normal error conditions" and the values above 128 can be confused with termination due to receipt of a
\par        signal.  The value 126 was chosen in a similar manner to indicate that  the  utility  could  be  found,  but  not
\par        invoked.  Some  scripts  produce meaningful error messages differentiating the 126 and 127 cases. The distinction
\par        between exit codes 126 and 127 is based on KornShell practice that uses 127 when all attempts to exec the utility
\par        fail with [ENOENT], and uses 126 when any attempt to exec the utility fails for any other reason.
\par 
\par        Since  the  -v  and  -V options of command produce output in relation to the current shell execution environment,
\par        command is generally provided as a shell regular built-in. If it is called in a subshell or separate utility exe-
\par        cution environment, such as one of the following:
\par 
\par               (PATH=foo command -v)
\par                nohup command -v
\par 
\par        it  does  not  necessarily produce correct results. For example, when called with nohup or an exec function, in a
\par        separate utility execution environment, most implementations are not able to identify aliases, functions, or spe-
\par        cial built-ins.
\par 
\par        Two  types  of  regular built-ins could be encountered on a system and these are described separately by command.
\par        The description of command search in Command Search and Execution allows for a standard utility to be implemented
\par        as a regular built-in as long as it is found in the appropriate place in a PATH search.  So, for example, command
\par        -v true might yield /bin/true or some similar pathname.  Other  implementation-defined  utilities  that  are  not
\par        defined by this volume of IEEE Std 1003.1-2001 might exist only as built-ins and have no pathname associated with
\par        them. These produce output identified as (regular) built-ins. Applications encountering these  are  not  able  to
\par        count on execing them, using them with nohup, overriding them with a different PATH, and so on.
\par 
\par EXAMPLES
\par         1. Make a version of cd that always prints out the new working directory exactly once:
\par 
\par            cd() \{
\par                command cd "$@" >/dev/null
\par                pwd
\par            \}
\par 
\par         2. Start off a "secure shell script" in which the script avoids being spoofed by its parent:
\par 
\par            IFS=\rquote 
\par            #    The preceding value should be <space><tab><newline>.
\par            #    Set IFS to its default value.
\par 
\par            \\unalias -a
\par            #    Unset all possible aliases.
\par            #    Note that unalias is escaped to prevent an alias
\par            #    being used for unalias.
\par 
\par            unset -f command
\par            #    Ensure command is not a user function.
\par 
\par            PATH="$(command -p getconf _CS_PATH):$PATH"
\par            #    Put on a reliable PATH prefix.
\par 
\par            #    ...
\par 
\par        At this point, given correct permissions on the directories called by PATH,  the script has the ability to ensure
\par        that any utility it calls is the intended one. It is being very cautious because it assumes  that  implementation
\par        extensions  may  be  present  that would allow user functions to exist when it is invoked; this capability is not
\par        specified by this volume of IEEE Std 1003.1-2001, but it is not prohibited as an extension.  For example, the ENV
\par        variable  precedes the invocation of the script with a user start-up script. Such a script could define functions
\par        to spoof the application.
\par 
\par RATIONALE
\par        Since command is a regular built-in utility it is always found prior to the PATH search.
\par 
\par        There is nothing in the description of command that implies the command line is parsed any differently from  that
\par        of any other simple command. For example:
\par 
\par               command a | b ; c
\par 
\par        is  not parsed in any special way that causes \rquote |\rquote  or \rquote ;\rquote  to be treated other than a pipe operator or semicolon or
\par        that prevents function lookup on b or c.
\par 
\par        The command utility is somewhat similar to the Eighth Edition shell builtin command, but since command also  goes
\par        to the file system to search for utilities, the name builtin would not be intuitive.
\par 
\par        The  command  utility is most likely to be provided as a regular built-in. It is not listed as a special built-in
\par        for the following reasons:
\par 
\par         * The removal of exportable functions made the special precedence of a special built-in unnecessary.
\par 
\par         * A special built-in has special properties (see Special Built-In Utilities ) that were inappropriate for invok-
\par           ing other utilities. For example, two commands such as:
\par 
\par           date > unwritable-file
\par 
\par           command date > unwritable-file
\par 
\par        would have entirely different results; in a non-interactive script, the former would continue to execute the next
\par        command, the latter would abort. Introducing this semantic difference along with suppressing functions  was  seen
\par        to be non-intuitive.
\par 
\par        The -p option is present because it is useful to be able to ensure a safe path search that finds all the standard
\par        utilities. This search might not be identical to the one that occurs  through  one  of  the  exec  functions  (as
\par        defined in the System Interfaces volume of IEEE Std 1003.1-2001) when PATH is unset. At the very least, this fea-
\par        ture is required to allow the script to access the correct version of getconf so that the value  of  the  default
\par        path can be accurately retrieved.
\par 
\par        The  command  -v  and -V options were added to satisfy requirements from users that are currently accomplished by
\par        three different historical utilities: type in the System V shell, whence in the KornShell, and  which  in  the  C
\par        shell.  Since  there is no historical agreement on how and what to accomplish here, the POSIX command utility was
\par        enhanced and the historical utilities were left unmodified. The C shell which merely conducts a path search.  The
\par        KornShell  whence  is  more elaborate-in addition to the categories required by POSIX, it also reports on tracked
\par        aliases, exported aliases, and undefined functions.
\par 
\par        The output format of -V was left mostly unspecified because human  users  are  its  only  audience.  Applications
\par        should not be written to care about this information; they can use the output of -v to differentiate between var-
\par        ious types of commands, but the additional information that may be emitted by the more verbose -V is  not  needed
\par        and should not be arbitrarily constrained in its verbosity or localization for application parsing reasons.
\par 
\par FUTURE DIRECTIONS
\par        None.
\par 
\par SEE ALSO
\par        Command  Search  and  Execution,  Shell  Execution  Environment, Special Built-In Utilities, sh, type, the System
\par        Interfaces volume of IEEE Std 1003.1-2001, exec
\par 
\par COPYRIGHT
\par        Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003  Edition,  Stan-
\par        dard  for  Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifica-
\par        tions Issue 6, Copyright (C) 2001-2003 by the Institute of Electrical and Electronics Engineers, Inc and The Open
\par        Group.  In  the  event of any discrepancy between this version and the original IEEE and The Open Group Standard,
\par        the original IEEE and The Open Group Standard is the referee document. The  original  Standard  can  be  obtained
\par        online at http://www.opengroup.org/unix/online.html .
\par 
\par IEEE/The Open Group                  2003                          COMMAND(1P)\par}