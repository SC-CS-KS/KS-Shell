{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red0\green128\blue128;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid301314971\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid54833161}
}
{\*\listoverridetable
{\listoverride\listid54833161\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 G01.getopts
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20\cf2 getopts\uc2\u31616 \'bc\'f2\u21270 \'bb\'af\u20102 \'c1\'cb\u36873 \'d1\'a1\u39033 \'cf\'ee\u30340 \'b5\'c4\u22788 \'b4\'a6\u29702 \'c0\'ed\u65292 \'a3\'ac\u23427 \'cb\'fc\u33021 \'c4\'dc\u35782 \'ca\'b6\u21035 \'b1\'f0POSIX\u20013 \'d6\'d0\u22810 \'b6\'e0\u20010 \'b8\'f6\u36873 \'d1\'a1\u39033 \'cf\'ee\u23383 \'d7\'d6\u27597 \'c4\'b8\u32452 \'d7\'e9\u32455 \'d6\'af\u21040 \'b5\'bd\u19968 \'d2\'bb\u36215 \'c6\'f0\u30340 \'b5\'c4\u24773 \'c7\'e9\u20917 \'bf\'f6\u65292 \'a3\'ac\u20063 \'d2\'b2\u21487 \'bf\'c9\u20197 \'d2\'d4\u29992 \'d3\'c3\u26469 \'c0\'b4\u36941 \'b1\'e9\u21382 \'c0\'fa\u25972 \'d5\'fb\u20010 \'b8\'f6\u21629 \'c3\'fc\u20196 \'c1\'ee\u34892 \'d0\'d0\u21442 \'b2\'ce\u25968 \'ca\'fd\u65292 \'a3\'ac\u19968 \'d2\'bb\u27425 \'b4\'ce\u19968 \'d2\'bb\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u12290 \'a1\'a3\uc1
\par 
\par getopts\uc2\u31532 \'b5\'da\u19968 \'d2\'bb\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u26159 \'ca\'c7\u21015 \'c1\'d0\u20986 \'b3\'f6\u21512 \'ba\'cf\u27861 \'b7\'a8\u36873 \'d1\'a1\u39033 \'cf\'ee\u23383 \'d7\'d6\u27597 \'c4\'b8\u30340 \'b5\'c4\u19968 \'d2\'bb\u20010 \'b8\'f6\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\u12290 \'a1\'a3\u22914 \'c8\'e7\u26524 \'b9\'fb\u36873 \'d1\'a1\u39033 \'cf\'ee\u23383 \'d7\'d6\u27597 \'c4\'b8\u21518 \'ba\'f3\u38754 \'c3\'e6\u36319 \'b8\'fa\u19968 \'d2\'bb\u20010 \'b8\'f6\u20882 \'c3\'b0\u21495 \'ba\'c5\u65292 \'a3\'ac\u21017 \'d4\'f2\u34920 \'b1\'ed\u31034 \'ca\'be\u35813 \'b8\'c3\u36873 \'d1\'a1\u39033 \'cf\'ee\u38656 \'d0\'e8\u35201 \'d2\'aa\u19968 \'d2\'bb\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u65292 \'a3\'ac\u27492 \'b4\'cb\u21442 \'b2\'ce\u25968 \'ca\'fd\u26159 \'ca\'c7\u24517 \'b1\'d8\u39035 \'d0\'eb\u25552 \'cc\'e1\u20379 \'b9\'a9\u30340 \'b5\'c4\u12290 \'a1\'a3\uc1
\par \uc2\u19968 \'d2\'bb\u26086 \'b5\'a9\u36935 \'d3\'f6\u21040 \'b5\'bd\u36825 \'d5\'e2\u26679 \'d1\'f9\u30340 \'b5\'c4\u24773 \'c7\'e9\u20917 \'bf\'f6\u65292 \'a3\'ac\u20250 \'bb\'e1\u25918 \'b7\'c5\u32622 \'d6\'c3\u21442 \'b2\'ce\u25968 \'ca\'fd\u20540 \'d6\'b5\u21040 \'b5\'bdOPTARG\u20013 \'d6\'d0\u12290 \'a1\'a3\uc1
\par \uc2\u21478 \'c1\'ed\u19968 \'d2\'bb\u20010 \'b8\'f6\u21464 \'b1\'e4\u37327 \'c1\'bfOPTIND\u21253 \'b0\'fc\u21547 \'ba\'ac\u19979 \'cf\'c2\u19968 \'d2\'bb\u20010 \'b8\'f6\u35201 \'d2\'aa\u22788 \'b4\'a6\u29702 \'c0\'ed\u30340 \'b5\'c4\u21442 \'b2\'ce\u25968 \'ca\'fd\u30340 \'b5\'c4\u30340 \'b5\'c4\u32034 \'cb\'f7\u24341 \'d2\'fd\u12290 \'a1\'a3Shell\u20250 \'bb\'e1\u21021 \'b3\'f5\u22987 \'ca\'bc\u21270 \'bb\'af\u35813 \'b8\'c3\u21464 \'b1\'e4\u37327 \'c1\'bf\u20026 \'ce\'aa1\u12290 \'a1\'a3\uc1
\par 
\par getopts\uc2\u31532 \'b5\'da\u20108 \'b6\'fe\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u26159 \'ca\'c7\u21464 \'b1\'e4\u37327 \'c1\'bf\u30340 \'b5\'c4\u21517 \'c3\'fb\u31216 \'b3\'c6\u65292 \'a3\'ac\u22312 \'d4\'da\u27599 \'c3\'bf\u27425 \'b4\'cegetops\u35843 \'b5\'f7\u29992 \'d3\'c3\u26102 \'ca\'b1\u65292 \'a3\'ac\u35813 \'b8\'c3\u21464 \'b1\'e4\u37327 \'c1\'bf\u20250 \'bb\'e1\u34987 \'b1\'bb\u26356 \'b8\'fc\u26032 \'d0\'c2\u65292 \'a3\'ac\u23427 \'cb\'fc\u30340 \'b5\'c4\u20540 \'d6\'b5\u26159 \'ca\'c7\u25214 \'d5\'d2\u21040 \'b5\'bd\u30340 \'b5\'c4\u36873 \'d1\'a1\u39033 \'cf\'ee\u23383 \'d7\'d6\u27597 \'c4\'b8\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf1 \uc2\u24403 \'b5\'b1getopts\u25214 \'d5\'d2\u19981 \'b2\'bb\u21040 \'b5\'bd\u21512 \'ba\'cf\u27861 \'b7\'a8\u30340 \'b5\'c4\u36873 \'d1\'a1\u39033 \'cf\'ee\u26102 \'ca\'b1\u65292 \'a3\'ac\u23427 \'cb\'fc\u20250 \'bb\'e1\u23558 \'bd\'ab\u27492 \'b4\'cb\u21464 \'b1\'e4\u37327 \'c1\'bf\u35774 \'c9\'e8\u32622 \'d6\'c3\u20026 \'ce\'aa\u19968 \'d2\'bb\u20010 \'b8\'f6\u38382 \'ce\'ca\u21495 \'ba\'c5\u23383 \'d7\'d6\u31526 \'b7\'fb\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf3 ----------------------------------------------------------------------------------------------------
\par \plain \f1\b\fs20\cf2 \uc2\u35821 \'d3\'ef\u27861 \'b7\'a8\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf1 getopts option_spc variavle [arguments ... ]
\par 
\par \plain \f1\b\fs20\cf-1 \uc2\u29992 \'d3\'c3\u36884 \'cd\'be\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf-1 \uc2\u31616 \'bc\'f2\u21270 \'bb\'af\u21442 \'b2\'ce\u25968 \'ca\'fd\u22788 \'b4\'a6\u29702 \'c0\'ed\u65292 \'a3\'ac\u24182 \'b2\'a2\u19988 \'c7\'d2\u21487 \'bf\'c9\u20197 \'d2\'d4\u35753 \'c8\'c3shell\u36731 \'c7\'e1\u26494 \'cb\'c9\u22320 \'b5\'d8\u21305 \'c6\'a5\u37197 \'c5\'e4\u20110 \'d3\'daPOSIX\u30340 \'b5\'c4\u21442 \'b2\'ce\u25968 \'ca\'fd\u22788 \'b4\'a6\u29702 \'c0\'ed\u24815 \'b9\'df\u20363 \'c0\'fd\u12290 \'a1\'a3\uc1
\par 
\par \plain \f1\b\fs20\cf-1 \uc2\u34892 \'d0\'d0\u20026 \'ce\'aa\u27169 \'c4\'a3\u24335 \'ca\'bd\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf-1 \uc2\u24403 \'b5\'b1\u23427 \'cb\'fc\u34987 \'b1\'bb\u37325 \'d6\'d8\u22797 \'b8\'b4\u35843 \'b5\'f7\u29992 \'d3\'c3\u26102 \'ca\'b1\u65288 \'a3\'a8\u22914 \'c8\'e7\u22312 \'d4\'dawhile\u24490 \'d1\'ad\u29615 \'bb\'b7\u20013 \'d6\'d0\u65289 \'a3\'a9\u65292 \'a3\'ac\u20250 \'bb\'e1\u19968 \'d2\'bb\u27425 \'b4\'ce\u36890 \'cd\'a8\u36807 \'b9\'fd\u32473 \'b8\'f8\u23450 \'b6\'a8\u30340 \'b5\'c4\u21629 \'c3\'fc\u20196 \'c1\'ee\u34892 \'d0\'d0\u21442 \'b2\'ce\u25968 \'ca\'fd\u65292 \'a3\'ac\u25110 \'bb\'f2\u32773 \'d5\'df\u26410 \'ce\'b4\u25552 \'cc\'e1\u20379 \'b9\'a9\u21017 \'d4\'f2\u26159 \'ca\'c7"$@"\u65292 \'a3\'ac\u22312 \'d4\'da--\u25110 \'bb\'f2\u31532 \'b5\'da\u19968 \'d2\'bb\u20010 \'b8\'f6\u38750 \'b7\'c7\u36873 \'d1\'a1\u39033 \'cf\'ee\u21442 \'b2\'ce\u25968 \'ca\'fd\u22788 \'b4\'a6\u65292 \'a3\'ac\u25110 \'bb\'f2\u26159 \'ca\'c7\u30896 \'c5\'f6\u21040 \'b5\'bd\u38169 \'b4\'ed\u35823 \'ce\'f3\u26102 \'ca\'b1\u65292 \'a3\'ac\u20250 \'bb\'e1\u20197 \'d2\'d4\u38750 \'b7\'c70\u29366 \'d7\'b4\u24577 \'cc\'ac\u36864 \'cd\'cb\u20986 \'b3\'f6\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf1 option_spc \uc2\u29992 \'d3\'c3\u26469 \'c0\'b4\u25551 \'c3\'e8\u36848 \'ca\'f6\u36873 \'d1\'a1\u39033 \'cf\'ee\u21450 \'bc\'b0\u20854 \'c6\'e4\u21442 \'b2\'ce\u25968 \'ca\'fd\u12290 \'a1\'a3\uc1
\par 
\par \uc2\u23545 \'b6\'d4\u20110 \'d3\'da\u27599 \'c3\'bf\u20010 \'b8\'f6\u21512 \'ba\'cf\u27861 \'b7\'a8\u30340 \'b5\'c4\u36873 \'d1\'a1\u39033 \'cf\'ee\u65292 \'a3\'ac\u35774 \'c9\'e8\u32622 \'d6\'c3variable\u20026 \'ce\'aa\u36873 \'d1\'a1\u39033 \'cf\'ee\u23383 \'d7\'d6\u27597 \'c4\'b8\u12290 \'a1\'a3\u22914 \'c8\'e7\u26524 \'b9\'fb\u36873 \'d1\'a1\u39033 \'cf\'ee\u26377 \'d3\'d0\u19968 \'d2\'bb\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u65292 \'a3\'ac\u21017 \'d4\'f2\u21442 \'b2\'ce\u25968 \'ca\'fd\u20250 \'bb\'e1\u32622 \'d6\'c3\u20110 \'d3\'da\u21464 \'b1\'e4\u37327 \'c1\'bfOPTARG\u20013 \'d6\'d0\u12290 \'a1\'a3\uc1
\par \uc2\u22312 \'d4\'da\u22788 \'b4\'a6\u29702 \'c0\'ed\u30340 \'b5\'c4\u32467 \'bd\'e1\u23614 \'ce\'b2\u22788 \'b4\'a6\u65292 \'a3\'acOPTIND\u20250 \'bb\'e1\u35774 \'c9\'e8\u32622 \'d6\'c3\u20026 \'ce\'aa\u31532 \'b5\'da\u19968 \'d2\'bb\u20010 \'b8\'f6\u38750 \'b7\'c7\u36873 \'d1\'a1\u39033 \'cf\'ee\u21442 \'b2\'ce\u25968 \'ca\'fd\u30340 \'b5\'c4\u32534 \'b1\'e0\u21495 \'ba\'c5\u12290 \'a1\'a3\uc1
\par \plain \f1\b\fs20\cf-1 
\par \uc2\u27880 \'d7\'a2\u24847 \'d2\'e2\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf-1 ksh93\uc2\u29256 \'b0\'e6\u26412 \'b1\'be\u30340 \'b5\'c4getops\u20250 \'bb\'e1\u36981 \'d7\'f1\u24490 \'d1\'adPOSIX\u65292 \'a3\'ac\u20294 \'b5\'ab\u36824 \'bb\'b9\u25552 \'cc\'e1\u20379 \'b9\'a9\u20102 \'c1\'cb\u39069 \'b6\'ee\u22806 \'cd\'e2\u30340 \'b5\'c4\u21151 \'b9\'a6\u33021 \'c4\'dc\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf1 OPTIND\uc2\u21464 \'b1\'e4\u37327 \'c1\'bf\u26102 \'ca\'b1\u29238 \'b8\'b8shell\u19982 \'d3\'eb\u20854 \'c6\'e4\u24341 \'d2\'fd\u29992 \'d3\'c3\u30340 \'b5\'c4\u20219 \'c8\'ce\u20309 \'ba\'ce\u20989 \'ba\'af\u25968 \'ca\'fd\u20849 \'b9\'b2\u20139 \'cf\'ed\u30340 \'b5\'c4\u12290 \'a1\'a3\u35201 \'d2\'aa\u20351 \'ca\'b9\u29992 \'d3\'c3getopts\u26469 \'c0\'b4\u35299 \'bd\'e2\u26512 \'ce\'f6\u33258 \'d7\'d4\u24049 \'bc\'ba\u30340 \'b5\'c4\u20989 \'ba\'af\u25968 \'ca\'fd\u65292 \'a3\'ac\u38656 \'d0\'e8\u35201 \'d2\'aa\u25226 \'b0\'d1\u35813 \'b8\'c3\u21442 \'b2\'ce\u25968 \'ca\'fd\u37325 \'d6\'d8\u32622 \'d6\'c3\u20026 \'ce\'aa1\u12290 \'a1\'a3\uc1
\par \uc2\u19981 \'b2\'bb\u24314 \'bd\'a8\u35758 \'d2\'e9\u22312 \'d4\'da\u29238 \'b8\'b8\u33050 \'bd\'c5\u26412 \'b1\'be\u30340 \'b5\'c4\u36873 \'d1\'a1\u39033 \'cf\'ee\u22788 \'b4\'a6\u29702 \'c0\'ed\u20013 \'d6\'d0\u35843 \'b5\'f7\u29992 \'d3\'c3\u36825 \'d5\'e2\u26679 \'d1\'f9\u30340 \'b5\'c4\u20989 \'ba\'af\u25968 \'ca\'fd\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf-1 \uc2\u65288 \'a3\'a8\u22522 \'bb\'f9\u20110 \'d3\'da\u27492 \'b4\'cb\u65292 \'a3\'acKSH93 \u20026 \'ce\'aa\u27599 \'c3\'bf\u20010 \'b8\'f6\u20989 \'ba\'af\u25968 \'ca\'fd\u35774 \'c9\'e8\u32622 \'d6\'c3\u20102 \'c1\'cb\u31169 \'cb\'bd\u26377 \'d3\'d0\u30340 \'b5\'c4OPTIND\u65289 \'a3\'a9\uc1
\par \plain \f1\fs20\cf3 ----------------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf2 PROLOG
\par        This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con-
\par        sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
\par        Linux.
\par 
\par NAME
\par        getopts - parse utility options
\par 
\par SYNOPSIS
\par        getopts optstring name [arg...]
\par 
\par DESCRIPTION
\par        The  getopts  utility shall retrieve options and option-arguments from a list of parameters. It shall support the Utility
\par        Syntax Guidelines 3 to 10, inclusive, described in the Base Definitions volume  of  IEEE Std 1003.1-2001,  Section  12.2,
\par        Utility Syntax Guidelines.
\par 
\par        Each  time it is invoked, the getopts utility shall place the value of the next option in the shell variable specified by
\par        the name operand and the index of the next argument to be processed in the shell variable OPTIND.  Whenever the shell  is
\par        invoked, OPTIND shall be initialized to 1.
\par 
\par        When  the  option  requires  an  option-argument, the getopts utility shall place it in the shell variable OPTARG.  If no
\par        option was found, or if the option that was found does not have an option-argument, OPTARG shall be unset.
\par 
\par        If an option character not contained in the optstring operand is found where an option character is expected,  the  shell
\par        variable  specified  by name shall be set to the question-mark ( '?' ) character. In this case, if the first character in
\par        optstring is a colon ( ':' ), the shell variable OPTARG shall be set to the option character found, but no  output  shall
\par        be written to standard error; otherwise, the shell variable OPTARG shall be unset and a diagnostic message shall be writ-
\par        ten to standard error. This condition shall be considered to be an error detected in the way arguments were presented  to
\par        the invoking application, but shall not be an error in getopts processing.
\par 
\par        If an option-argument is missing:
\par 
\par         * If the first character of optstring is a colon, the shell variable specified by name shall be set to the colon charac-
\par           ter and the shell variable OPTARG shall be set to the option character found.
\par 
\par 
\par         * Otherwise, the shell variable specified by name shall be set to the question-mark character, the shell variable OPTARG
\par           shall  be unset, and a diagnostic message shall be written to standard error. This condition shall be considered to be
\par           an error detected in the way arguments were presented to the invoking application,  but  shall  not  be  an  error  in
\par           getopts processing; a diagnostic message shall be written as stated, but the exit status shall be zero.
\par 
\par 
\par        When  the  end of options is encountered, the getopts utility shall exit with a return value greater than zero; the shell
\par        variable OPTIND shall be set to the index of the first non-option-argument, where the first "--" argument  is  considered
\par        to  be  an  option-argument if there are no other non-option-arguments appearing before it, or the value "$#" +1 if there
\par        are no non-option-arguments; the name variable shall be set to the question-mark character. Any of  the  following  shall
\par        identify the end of options: the special option "--", finding an argument that does not begin with a '-', or encountering
\par        an error.
\par 
\par        The shell variables OPTIND and OPTARG shall be local to the caller of getopts and shall not be exported by default.
\par 
\par        The shell variable specified by the name operand, OPTIND , and OPTARG shall affect the current shell  execution  environ-
\par        ment; see Shell Execution Environment .
\par 
\par        If the application sets OPTIND to the value 1, a new set of parameters can be used: either the current positional parame-
\par        ters or new arg values. Any other attempt to invoke getopts multiple times in a single shell execution  environment  with
\par        parameters (positional parameters or arg operands) that are not the same in all invocations, or with an OPTIND value mod-
\par        ified to be a value other than 1, produces unspecified results.
\par 
\par OPTIONS
\par        None.
\par 
\par OPERANDS
\par        The following operands shall be supported:
\par 
\par        optstring
\par               A string containing the option characters recognized by the utility invoking getopts. If a character  is  followed
\par               by  a  colon,  the  option shall be expected to have an argument, which should be supplied as a separate argument.
\par               Applications should specify an option character and its option-argument as separate arguments, but  getopts  shall
\par               interpret  the  characters following an option character requiring arguments as an argument whether or not this is
\par               done. An explicit null option-argument need not be recognized if it is not supplied as a  separate  argument  when
\par               getopts   is   invoked.   (See   also   the   getopt()  function  defined  in  the  System  Interfaces  volume  of
\par               IEEE Std 1003.1-2001.)  The characters question-mark and colon shall not be used as option characters by an appli-
\par               cation.  The use of other option characters that are not alphanumeric produces unspecified results. If the option-
\par               argument is not supplied as a separate argument from the option character, the value in OPTARG shall  be  stripped
\par               of the option character and the '-' . The first character in optstring determines how getopts behaves if an option
\par               character is not known or an option-argument is missing.
\par 
\par        name   The name of a shell variable that shall be set by the getopts utility to the option character that was found.
\par 
\par 
\par        The getopts utility by default shall parse positional parameters passed to the invoking  shell  procedure.  If  args  are
\par        given, they shall be parsed instead of the positional parameters.
\par 
\par STDIN
\par        Not used.
\par 
\par INPUT FILES
\par        None.
\par 
\par ENVIRONMENT VARIABLES
\par        The following environment variables shall affect the execution of getopts:
\par 
\par        LANG   Provide  a  default value for the internationalization variables that are unset or null. (See the Base Definitions
\par               volume of IEEE Std 1003.1-2001, Section 8.2, Internationalization Variables for the precedence  of  international-
\par               ization variables used to determine the values of locale categories.)
\par 
\par        LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.
\par 
\par        LC_CTYPE
\par               Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-
\par               byte as opposed to multi-byte characters in arguments and input files).
\par 
\par        LC_MESSAGES
\par               Determine the locale that should be used to affect the format and contents of diagnostic messages written to stan-
\par               dard error.
\par 
\par        NLSPATH
\par               Determine the location of message catalogs for the processing of LC_MESSAGES .
\par 
\par        OPTIND This variable shall be used by the getopts utility as the index of the next argument to be processed.
\par 
\par 
\par ASYNCHRONOUS EVENTS
\par        Default.
\par 
\par STDOUT
\par        Not used.
\par 
\par STDERR
\par        Whenever  an error is detected and the first character in the optstring operand is not a colon ( ':' ), a diagnostic mes-
\par        sage shall be written to standard error with the following information in an unspecified format:
\par 
\par         * The invoking program name shall be identified in the message. The invoking program name shall  be  the  value  of  the
\par           shell special parameter 0 (see Special Parameters ) at the time the getopts utility is invoked. A name equivalent to:
\par 
\par 
\par           basename "$0"
\par 
\par        may be used.
\par 
\par 
\par         * If  an  option is found that was not specified in optstring, this error is identified and the invalid option character
\par           shall be identified in the message.
\par 
\par 
\par         * If an option requiring an option-argument is found, but an option-argument is not found, this error shall  be  identi-
\par           fied and the invalid option character shall be identified in the message.
\par 
\par 
\par OUTPUT FILES
\par        None.
\par 
\par EXTENDED DESCRIPTION
\par        None.
\par 
\par EXIT STATUS
\par        The following exit values shall be returned:
\par 
\par         0     An option, specified or unspecified by optstring, was found.
\par 
\par        >0     The end of options was encountered or an error occurred.
\par 
\par 
\par CONSEQUENCES OF ERRORS
\par        Default.
\par 
\par        The following sections are informative.
\par 
\par APPLICATION USAGE
\par        Since  getopts  affects the current shell execution environment, it is generally provided as a shell regular built-in. If
\par        it is called in a subshell or separate utility execution environment, such as one of the following:
\par 
\par 
\par               (getopts abc value "$@")
\par               nohup getopts ...
\par               find . -exec getopts ... \\;
\par 
\par        it does not affect the shell variables in the caller's environment.
\par 
\par        Note that shell functions share OPTIND with the calling shell even though the positional parameters are changed.  If  the
\par        calling shell and any of its functions uses getopts to parse arguments, the results are unspecified.
\par 
\par EXAMPLES
\par        The following example script parses and displays its arguments:
\par 
\par 
\par               aflag=
\par               bflag=
\par               while getopts ab: name
\par               do
\par                   case $name in
\par                   a)    aflag=1;;
\par                   b)    bflag=1
\par                         bval="$OPTARG";;
\par                   ?)    printf "Usage: %s: [-a] [-b value] args\\n" $0
\par                         exit 2;;
\par                   esac
\par               done
\par               if [ ! -z "$aflag" ]; then
\par                   printf "Option -a specified\\n"
\par               fi
\par               if [ ! -z "$bflag" ]; then
\par                   printf 'Option -b "%s" specified\\n' "$bval"
\par               fi
\par               shift $(($OPTIND - 1))
\par               printf "Remaining arguments are: %s\\n" "$*"
\par 
\par RATIONALE
\par        The getopts utility was chosen in preference to the System V getopt utility because getopts handles option-arguments con-
\par        taining <blank>s.
\par 
\par        The OPTARG variable is not mentioned in the ENVIRONMENT VARIABLES section because it does not  affect  the  execution  of
\par        getopts; it is one of the few "output-only" variables used by the standard utilities.
\par 
\par        The colon is not allowed as an option character because that is not historical behavior, and it violates the Utility Syn-
\par        tax Guidelines. The colon is now specified to behave as in the KornShell version of the getopts utility; when used as the
\par        first  character  in  the  optstring  operand, it disables diagnostics concerning missing option-arguments and unexpected
\par        option characters. This replaces the use of the OPTERR variable that was specified in an early proposal.
\par 
\par        The formats of the diagnostic messages produced by the getopts utility and the getopt() function are not fully  specified
\par        because implementations with superior (``friendlier") formats objected to the formats used by some historical implementa-
\par        tions. The standard developers considered it important that the information in  the  messages  used  be  uniform  between
\par        getopts  and  getopt().  Exact  duplication  of the messages might not be possible, particularly if a utility is built on
\par        another system that has a different getopt() function, but the messages must have specific information included  so  that
\par        the program name, invalid option character, and type of error can be distinguished by a user.
\par 
\par        Only a rare application program intercepts a getopts standard error message and wants to parse it. Therefore, implementa-
\par        tions are free to choose the most usable messages they can devise. The following formats  are  used  by  many  historical
\par        implementations:
\par 
\par 
\par               "%s: illegal option -- %c\\n", <program name>, <option character>
\par 
\par 
\par               "%s: option requires an argument -- %c\\n", <program name>, \\
\par                   <option character>
\par 
\par        Historical shells with built-in versions of getopt() or getopts have used different formats, frequently not even indicat-
\par        ing the option character found in error.
\par 
\par FUTURE DIRECTIONS
\par        None.
\par 
\par SEE ALSO
\par        Special Parameters, the System Interfaces volume of IEEE Std 1003.1-2001, getopt()
\par 
\par COPYRIGHT
\par        Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1, 2003  Edition,  Standard  for
\par        Information  Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6, Copy-
\par        right (C) 2001-2003 by the Institute of Electrical and Electronics Engineers, Inc and The Open Group. In the event of any
\par        discrepancy  between this version and the original IEEE and The Open Group Standard, the original IEEE and The Open Group
\par        Standard  is  the  referee   document.   The   original   Standard   can   be   obtained   online   at   http://www.open-
\par        group.org/unix/online.html .
\par 
\par 
\par 
\par IEEE/The Open Group                                           2003                                                   GETOPTS(1P)\par}