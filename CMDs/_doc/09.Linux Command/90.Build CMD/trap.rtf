{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset0 Times New Roman;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red0\green0\blue0;\red79\green129\blue189;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid912203745
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\b\i\fs28}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid727459690}
{\list\listtemplateid1819520788\listsimple1
{\listlevel\levelnfc0\leveljc0\li1380\fi-420\jclisttab\tx1380\levelstartat1{\leveltext\'02\'00);}{\levelnumbers\'01;}\f3\b\i\fs24\cf4}
\listid1697726312}
}
{\*\listoverridetable
{\listoverride\listid727459690\listoverridecount0\ls1}
{\listoverride\listid1697726312\listoverridecount0\ls2}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 trap
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20\cf1 trap [-lp] [arg signal_spec ...]
\par \plain \f1\fs20\cf2 
\par \plain \f1\fs20\cf1 The command ARG is to be read and executed when the shell receives signal(s) SIGNAL_SPEC.  
\par \plain \f1\fs20\cf2 -------------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20 If ARG is \plain \f1\fs20\cf1 absent\plain \f1\fs20  (and a single SIGNAL_SPEC is supplied) or `-', each \plain \f1\fs20\cf1 specified signal is reset to its original value.  
\par \plain \f1\fs20 If ARG is the \plain \f1\fs20\cf1 null string\plain \f1\fs20  each SIGNAL_SPEC is ignored by the shell and by the commands it invokes.  
\par If a SIGNAL_SPEC is\plain \f1\fs20\cf1  EXIT (0)\plain \f1\fs20  the command ARG is executed on exit from the shell.  
\par If a SIGNAL_SPEC is \plain \f1\fs20\cf1 DEBUG\plain \f1\fs20 , ARG is executed after every simple command.  
\par 
\par If the`-p' option is supplied then the trap commands associated with each SIGNAL_SPEC are displayed.  
\par \plain \f1\fs20\cf1 If no arguments are supplied or if only `-p' is given, trap prints the list of commands associated with each signal.  
\par \plain \f1\fs20 
\par Each SIGNAL_SPEC is either a signal name in <signal.h> or a signal number. 
\par Signal names are\plain \f1\fs20\cf1  case insensitive\plain \f1\fs20  and \plain \f1\fs20\cf1 the SIG prefix is optional\plain \f1\fs20 .  
\par 
\par \plain \f1\fs20\cf1 `trap -l' prints a list of signal names and their corresponding numbers.\plain \f1\fs20   
\par \plain \f1\fs20\cf1 \uc2\u31561 \'b5\'c8\u20215 \'bc\'db\u20110 \'d3\'da kill -l\uc1
\par \plain \f1\fs20 
\par Note that a signal can be sent to the shell with "kill -signal $$".
\par \plain \f1\fs20\cf2 -------------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf-1 PROLOG
\par        This  manual  page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (con-
\par        sult the corresponding Linux manual page for details of Linux behavior), or the  interface  may  not  be  implemented  on
\par        Linux.
\par 
\par NAME
\par        trap - trap signals
\par 
\par SYNOPSIS
\par        trap [action condition ...]
\par 
\par DESCRIPTION
\par        If  action  is  '-', the shell shall reset each condition to the default value. 
\par        If  action is null ( "" ), the shell shallignore each specified condition if it arises.
\par        Otherwise, the argument action shall be read and executed by the shell when one of the corresponding conditions arises. 
\par        The action of trap shall override a previous action (either default action orone explicitly set). 
\par        The value of "$?" after the trap action completes shall be the value it had before trap was invoked.
\par 
\par        The  condition  can be EXIT, 0 (equivalent to EXIT), or a signal specified using a symbolic name, without the SIG prefix,
\par        as listed in the  tables  of  signal  names  in  the  <signal.h>  header  defined  in  the  Base  Definitions  volume  of
\par        IEEE Std 1003.1-2001,  Chapter  13, Headers; for example, HUP, INT, QUIT, TERM. Implementations may permit names with the
\par        SIG prefix or ignore case in signal names as an extension. Setting a trap  for  SIGKILL  or  SIGSTOP  produces  undefined
\par        results.
\par 
\par        The  environment  in  which the shell executes a trap on EXIT shall be identical to the environment immediately after the
\par        last command executed before the trap on EXIT was taken.
\par 
\par        Each time trap is invoked, the action argument shall be processed in a manner equivalent to:
\par 
\par 
\par               eval action
\par 
\par        Signals that were ignored on entry to a non-interactive shell cannot be trapped or  reset,  although  no  error  need  be
\par        reported  when  attempting to do so. An interactive shell may reset or catch signals ignored on entry. Traps shall remain
\par        in place for a given shell until explicitly changed with another trap command.
\par 
\par        When a subshell is entered, traps that are not being ignored are set to the default actions. This does not imply that the
\par        trap command cannot be used within the subshell to set new traps.
\par 
\par        The  trap command with no arguments shall write to standard output a list of commands associated with each condition. The
\par        format shall be:
\par 
\par 
\par               "trap -- %s %s ...\\n", <action>, <condition> ...
\par 
\par        The shell shall format the output, including the proper use of quoting, so that it is suitable for reinput to  the  shell
\par        as commands that achieve the same trapping results. For example:
\par 
\par 
\par               save_traps=$(trap)
\par               ...
\par               eval "$save_traps"
\par 
\par        XSI-conformant systems also allow numeric signal numbers for the conditions corresponding to the following signal names:
\par 
\par                                                       Signal Number   Signal Name
\par                                                       1               SIGHUP
\par                                                       2               SIGINT
\par                                                       3               SIGQUIT
\par                                                       6               SIGABRT
\par                                                       9               SIGKILL
\par                                                       14              SIGALRM
\par 
\par                                                       15              SIGTERM
\par 
\par        The  trap  special  built-in  shall conform to the Base Definitions volume of IEEE Std 1003.1-2001, Section 12.2, Utility
\par        Syntax Guidelines.
\par 
\par OPTIONS
\par        None.
\par 
\par OPERANDS
\par        See the DESCRIPTION.
\par 
\par STDIN
\par        Not used.
\par 
\par INPUT FILES
\par        None.
\par 
\par ENVIRONMENT VARIABLES
\par        None.
\par 
\par ASYNCHRONOUS EVENTS
\par        Default.
\par 
\par STDOUT
\par        See the DESCRIPTION.
\par 
\par STDERR
\par        The standard error shall be used only for diagnostic messages.
\par 
\par OUTPUT FILES
\par        None.
\par 
\par EXTENDED DESCRIPTION
\par        None.
\par 
\par EXIT STATUS
\par        If the trap name  or number  is invalid, a non-zero exit status shall be returned; otherwise,  zero  shall  be  returned.
\par        For both interactive and non-interactive shells, invalid signal names  or numbers  shall not be considered a syntax error
\par        and do not cause the shell to abort.
\par 
\par CONSEQUENCES OF ERRORS
\par        Default.
\par 
\par        The following sections are informative.
\par 
\par APPLICATION USAGE
\par        None.
\par 
\par EXAMPLES
\par        Write out a list of all traps and actions:
\par 
\par 
\par               trap
\par 
\par        Set a trap so the logout utility in the directory referred to by the HOME environment variable executes  when  the  shell
\par        terminates:
\par 
\par 
\par               trap '$HOME/logout' EXIT
\par 
\par        or:
\par 
\par 
\par               trap '$HOME/logout' 0
\par 
\par        Unset traps on INT, QUIT, TERM, and EXIT:
\par 
\par 
\par               trap - INT QUIT TERM EXIT
\par 
\par RATIONALE(\uc2\u22522 \'bb\'f9\u26412 \'b1\'be\u21407 \'d4\'ad\u29702 \'c0\'ed)\uc1
\par        Implementations  may  permit  lowercase signal names as an extension.  Implementations may also accept the names with the
\par        SIG prefix; no known historical shell does so. The trap and kill utilities in this volume of IEEE Std 1003.1-2001 are now
\par        consistent  in  their omission of the SIG prefix for signal names. Some kill implementations do not allow the prefix, and
\par        kill -l lists the signals without prefixes.
\par 
\par        Trapping SIGKILL or SIGSTOP is syntactically accepted by some historical implementations, but it has no effect.  Portable
\par        POSIX applications cannot attempt to trap these signals.
\par 
\par        The  output  format  is  not  historical  practice. Since the output of historical trap commands is not portable (because
\par        numeric signal values are not portable) and had to change to become so, an opportunity was taken to format the output  in
\par        a way that a shell script could use to save and then later reuse a trap if it wanted.
\par 
\par        The  KornShell uses an ERR trap that is triggered whenever set -e would cause an exit. This is allowable as an extension,
\par        but was not mandated, as other shells have not used it.
\par 
\par        The text about the environment for the EXIT trap invalidates the behavior of  some  historical  versions  of  interactive
\par        shells  which, for example, close the standard input before executing a trap on 0. For example, in some historical inter-
\par        active shell sessions the following trap on 0 would always print "--" :
\par 
\par 
\par               trap 'read foo; echo "-$foo-"' 0\par}