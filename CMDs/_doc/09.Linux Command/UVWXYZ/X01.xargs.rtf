{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid2133274093\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid317120424}
{\list\listtemplateid790463053\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid556761475}
{\list\listtemplateid1356175251\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid385386470}
{\list\listtemplateid270910339\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid27828113}
{\list\listtemplateid119694810\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1661249348}
}
{\*\listoverridetable
{\listoverride\listid317120424\listoverridecount0\ls1}
{\listoverride\listid556761475\listoverridecount0\ls2}
{\listoverride\listid385386470\listoverridecount0\ls3}
{\listoverride\listid27828113\listoverridecount0\ls4}
{\listoverride\listid1661249348\listoverridecount0\ls5}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf4 X01.xargs
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 xargs [ -p ] [ -t ] [ -e [ EOFString ] ] [ -E EOFString ] [ -i [
\par \~\uc2\u12288 \'a1\'a1\u12288 \'a1\'a1ReplaceString ] ] [ -I ReplaceString ] [ -l [ Number ] ] [ -L Number ] [ -n\uc1
\par \~\uc2\u12288 \'a1\'a1\u12288 \'a1\'a1Number [ -x ] ] [ -s Size ] [ Command [ Argument ... ] ]\uc1
\par \~\uc2\u12288 \'a1\'a1\uc1\plain \f1\fs20\cf3 \uc2\u12288 \'a1\'a1\u27880 \'d7\'a2\u65306 \'a3\'ba \u19981 \'b2\'bb\u35201 \'d2\'aa\u22312 \'d4\'da\u23567 \'d0\'a1\u20889 \'d0\'b4\u30340 \'b5\'c4\u31526 \'b7\'fb\u21495 \'ba\'c5\u21644 \'ba\'cd\u21442 \'b2\'ce\u25968 \'ca\'fd\u20043 \'d6\'ae\u38388 \'bc\'e4\u21152 \'bc\'d3\u31354 \'bf\'d5\u26684 \'b8\'f1\u12290 \'a1\'a3\uc1
\par \plain \f1\b\fs20\cf2 -------------------------------------------------------------------------------------------
\par \plain \f1\b\fs20\cf3 xargs 
\par \plain \f1\fs20\cf1 \uc2\u21487 \'bf\'c9\u20197 \'d2\'d4\u35835 \'b6\'c1\u20837 \'c8\'eb stdin \u30340 \'b5\'c4\u36164 \'d7\'ca\u26009 \'c1\'cf\u65292 \'a3\'ac\u24182 \'b2\'a2\u19988 \'c7\'d2\u20197 \'d2\'d4\u31354 \'bf\'d5\u30333 \'b0\'d7\u23383 \'d7\'d6\u31526 \'b7\'fb\u25110 \'bb\'f2\u25442 \'bb\'bb\u34892 \'d0\'d0\u31526 \'b7\'fb\u20316 \'d7\'f7\u20998 \'b7\'d6\u38548 \'b8\'f4\u65292 \'a3\'ac\u23558 \'bd\'ab stdin \u30340 \'b5\'c4\u36164 \'d7\'ca\u26009 \'c1\'cf\u20998 \'b7\'d6\u38548 \'b8\'f4\u25104 \'b3\'c9\u20026 \'ce\'aa arguments \u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf-1 \uc2\u22240 \'d2\'f2\u20026 \'ce\'aa\u26159 \'ca\'c7\u20197 \'d2\'d4\u31354 \'bf\'d5\u30333 \'b0\'d7\u23383 \'d7\'d6\u31526 \'b7\'fb\u20316 \'d7\'f7\u20026 \'ce\'aa\u20998 \'b7\'d6\u38548 \'b8\'f4\u65292 \'a3\'ac\u25152 \'cb\'f9\u20197 \'d2\'d4\u65292 \'a3\'ac\u22914 \'c8\'e7\u26524 \'b9\'fb\u26377 \'d3\'d0\u19968 \'d2\'bb\u20123 \'d0\'a9\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u25110 \'bb\'f2\u32773 \'d5\'df\u26159 \'ca\'c7\u20854 \'c6\'e4\u20182 \'cb\'fb\u24847 \'d2\'e2\u20041 \'d2\'e5\u30340 \'b5\'c4\u21517 \'c3\'fb\u35789 \'b4\'ca\u20869 \'c4\'da\u21547 \'ba\'ac\u26377 \'d3\'d0\u31354 \'bf\'d5\u30333 \'b0\'d7\u23383 \'d7\'d6\u31526 \'b7\'fb\u30340 \'b5\'c4\u26102 \'ca\'b1\u20505 \'ba\'f2\u65292 \'a3\'ac xargs \u21487 \'bf\'c9\u33021 \'c4\'dc\u20250 \'bb\'e1\u35823 \'ce\'f3\u21028 \'c5\'d0\u12290 \'a1\'a3\uc1
\par \plain \f1\b\fs20\cf2 -------------------------------------------------------------------------------------------
\par \plain \f1\b\fs20 \uc2\u21442 \'b2\'ce\u25968 \'ca\'fd\u8758 \'a1\'c3\uc1
\par \plain \f1\fs20\cf1 \~-0 \uc2\u8758 \'a1\'c3\u22914 \'c8\'e7\u26524 \'b9\'fb\u36755 \'ca\'e4\u20837 \'c8\'eb\u30340 \'b5\'c4 stdin \u21547 \'ba\'ac\u26377 \'d3\'d0\u29305 \'cc\'d8\u27530 \'ca\'e2\u23383 \'d7\'d6\u31526 \'b7\'fb\u65292 \'a3\'ac\u20363 \'c0\'fd\u22914 \'c8\'e7 `, \\, \u31354 \'bf\'d5\u30333 \'b0\'d7\u38190 \'bc\'fc\u31561 \'b5\'c8\u31561 \'b5\'c8\u23383 \'d7\'d6\u20803 \'d4\'aa\u26102 \'ca\'b1\u65292 \'a3\'ac\u36825 \'d5\'e2\u20010 \'b8\'f6 -0 \u21442 \'b2\'ce\u25968 \'ca\'fd\u21487 \'bf\'c9\u20197 \'d2\'d4\u23558 \'bd\'ab\u20182 \'cb\'fb\u36824 \'bb\'b9\u21407 \'d4\'ad\u25104 \'b3\'c9\u19968 \'d2\'bb\u33324 \'b0\'e3\u23383 \'d7\'d6\u20803 \'d4\'aa\u12290 \'a1\'a3\u36825 \'d5\'e2\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u21487 \'bf\'c9\u20197 \'d2\'d4\u29992 \'d3\'c3\u20110 \'d3\'da\u29305 \'cc\'d8\u27530 \'ca\'e2\u29366 \'d7\'b4\u24577 \'cc\'ac\u21908 \'e0\'b8\u65281 \'a3\'a1\uc1
\par \plain \f1\fs20\cf3 \~-e \uc2\u8758 \'a1\'c3\u36825 \'d5\'e2\u20010 \'b8\'f6\u26159 \'ca\'c7 EOF (end of file) \u30340 \'b5\'c4\u24847 \'d2\'e2\u24605 \'cb\'bc\u12290 \'a1\'a3\u21518 \'ba\'f3\u38754 \'c3\'e6\u21487 \'bf\'c9\u20197 \'d2\'d4\u25509 \'bd\'d3\u19968 \'d2\'bb\u20010 \'b8\'f6\u23383 \'d7\'d6\u20018 \'b4\'ae\u65292 \'a3\'ac\u24403 \'b5\'b1 xargs \u20998 \'b7\'d6\u26512 \'ce\'f6\u21040 \'b5\'bd\u36825 \'d5\'e2\u20010 \'b8\'f6\u23383 \'d7\'d6\u20018 \'b4\'ae\u26102 \'ca\'b1\u65292 \'a3\'ac\u23601 \'be\'cd\u20250 \'bb\'e1\u20572 \'cd\'a3\u27490 \'d6\'b9\u32487 \'bc\'cc\u32493 \'d0\'f8\u24037 \'b9\'a4\u20316 \'d7\'f7\u65281 \'a3\'a1\uc1
\par \plain \f1\fs20 \~-p \uc2\u8758 \'a1\'c3\u22312 \'d4\'da\u25191 \'d6\'b4\u34892 \'d0\'d0\u27599 \'c3\'bf\u20010 \'b8\'f6\u25351 \'d6\'b8\u20196 \'c1\'ee\u30340 \'b5\'c4 argument \u26102 \'ca\'b1\u65292 \'a3\'ac\u37117 \'b6\'bc\u20250 \'bb\'e1\u35810 \'d1\'af\u38382 \'ce\'ca\u20351 \'ca\'b9\u29992 \'d3\'c3\u32773 \'d5\'df\u30340 \'b5\'c4\u24847 \'d2\'e2\u24605 \'cb\'bc\u65307 \'a3\'bb\uc1
\par \plain \f1\fs20\cf3 \~-n \uc2\u8758 \'a1\'c3\u21518 \'ba\'f3\u38754 \'c3\'e6\u25509 \'bd\'d3\u27425 \'b4\'ce\u25968 \'ca\'fd\u65292 \'a3\'ac\u27599 \'c3\'bf\u27425 \'b4\'ce command \u25351 \'d6\'b8\u20196 \'c1\'ee\u25191 \'d6\'b4\u34892 \'d0\'d0\u26102 \'ca\'b1\u65292 \'a3\'ac\u35201 \'d2\'aa\u20351 \'ca\'b9\u29992 \'d3\'c3\u20960 \'bc\'b8\u20010 \'b8\'f6\u21442 \'b2\'ce\u25968 \'ca\'fd\u30340 \'b5\'c4\u24847 \'d2\'e2\u24605 \'cb\'bc\u12290 \'a1\'a3\u30475 \'bf\'b4\u33539 \'b7\'b6\u20363 \'c0\'fd\u19977 \'c8\'fd\u12290 \'a1\'a3\uc1
\par \plain \f1\b\fs20\cf2 -------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf3 \uc2\u27880 \'d7\'a2\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf1 01.\uc2\u24403 \'b5\'b1 xargs \u21518 \'ba\'f3\u38754 \'c3\'e6\u27809 \'c3\'bb\u26377 \'d3\'d0\u25509 \'bd\'d3\u20219 \'c8\'ce\u20309 \'ba\'ce\u30340 \'b5\'c4\u25351 \'d6\'b8\u20196 \'c1\'ee\u26102 \'ca\'b1\u65292 \'a3\'ac\u39044 \'d4\'a4\u35774 \'c9\'e8\u26159 \'ca\'c7\u20197 \'d2\'d4 echo \u26469 \'c0\'b4\u36827 \'bd\'f8\u34892 \'d0\'d0\u36755 \'ca\'e4\u20986 \'b3\'f6\u21908 \'e0\'b8\u65281 \'a3\'a1\uc1
\par 02.\uc2\u32570 \'c8\'b1\u30465 \'ca\'a1\u24773 \'c7\'e9\u20917 \'bf\'f6\u19979 \'cf\'c2\u65292 \'a3\'ac\u25991 \'ce\'c4\u20214 \'bc\'fe\u32467 \'bd\'e1\u26463 \'ca\'f8\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\u26159 \'ca\'c7\u19979 \'cf\'c2\u21010 \'bb\'ae\u32447 \'cf\'df\u65292 \'a3\'ac\u22914 \'c8\'e7\u26524 \'b9\'fb\u35813 \'b8\'c3\u23383 \'d7\'d6\u31526 \'b7\'fb\u20316 \'d7\'f7\u20026 \'ce\'aa\u21333 \'b5\'a5\u20010 \'b8\'f6\u36755 \'ca\'e4\u20837 \'c8\'eb\u21442 \'b2\'ce\u25968 \'ca\'fd\u26469 \'c0\'b4\u21457 \'b7\'a2\u36865 \'cb\'cd\u65292 \'a3\'ac\u21017 \'d4\'f2\u23427 \'cb\'fc\u21518 \'ba\'f3\u38754 \'c3\'e6\u30340 \'b5\'c4\u20869 \'c4\'da\u23481 \'c8\'dd\u20250 \'bb\'e1\u34987 \'b1\'bb\u24573 \'ba\'f6\u30053 \'c2\'d4\u12290 \'a1\'a3\uc1
\par \uc2\u20026 \'ce\'aa\u20102 \'c1\'cb\u38450 \'b7\'c0\u27490 \'d6\'b9\u36825 \'d5\'e2\u31181 \'d6\'d6\u24773 \'c7\'e9\u20917 \'bf\'f6\u30340 \'b5\'c4\u21457 \'b7\'a2\u29983 \'c9\'fa\u65292 \'a3\'ac\u21487 \'bf\'c9\u20197 \'d2\'d4\u20351 \'ca\'b9\u29992 \'d3\'c3-e\u36873 \'d1\'a1\u39033 \'cf\'ee\u65292 \'a3\'ac\u23427 \'cb\'fc\u22312 \'d4\'da\u19981 \'b2\'bb\u24102 \'b4\'f8\u21442 \'b2\'ce\u25968 \'ca\'fd\u30340 \'b5\'c4\u24773 \'c7\'e9\u20917 \'bf\'f6\u19979 \'cf\'c2\u20250 \'bb\'e1\u31105 \'bd\'fb\u29992 \'d3\'c3\u32467 \'bd\'e1\u26463 \'ca\'f8\u23383 \'d7\'d6\u31526 \'b7\'fb\u12290 \'a1\'a3\uc1
\par \plain \f1\b\fs20\cf2 -------------------------------------------------------------------------------------------
\par \plain \f1\fs20 NAME
\par \plain \f1\fs20\cf1        \plain \f1\fs20\cf3 xargs - build and execute command lines from standard input
\par \plain \f1\fs20 
\par SYNOPSIS
\par        xargs  [-0prtx] [-E eof-str] [-e[eof-str]] [--eof[=eof-str]] [--null] [-d delimiter] [--delimiter delimiter] [-I replace-
\par        str] [-i[replace-str]] [--replace[=replace-str]] [-l[max-lines]] [-L max-lines] [--max-lines[=max-lines]]  [-n  max-args]
\par        [--max-args=max-args]  [-s  max-chars]  [--max-chars=max-chars]  [-P  max-procs]  [--max-procs=max-procs] [--interactive]
\par        [--verbose] [--exit]  [--no-run-if-empty]  [--arg-file=file]  [--show-limits]  [--version]  [--help]  [command  [initial-
\par        arguments]]
\par 
\par DESCRIPTION
\par        This  manual  page  documents  the  GNU version of xargs. \plain \f1\fs20\cf3  xargs reads items from the standard input, delimited by blanks
\par        (which can be protected with double or single quotes or a backslash) or newlines,\plain \f1\fs20  \plain \f1\fs20\cf1 and executes the  command  (default  is
\par        /bin/echo)  one  or more times with any initial-arguments followed by items read from standard input.\plain \f1\fs20  \plain \f1\fs20\cf1  Blank lines on the
\par        standard input are ignored.
\par \plain \f1\fs20 
\par     \plain \f1\fs20\cf1    Because Unix filenames can contain blanks and newlines, \plain \f1\fs20 this default behaviour is often \plain \f1\fs20\cf1 problematic\plain \f1\fs20 ; \plain \f1\fs20\cf3 filenames containing
\par        blanks  and/or newlines are incorrectly processed by xargs.\plain \f1\fs20   In these situations it is better to use the -0 option, which
\par        prevents such problems.   When using this option you will need to ensure that the program which produces  the  input  for
\par        xargs  also  uses a null character as a separator.  If that program is GNU find for example, the -print0 option does this
\par        for you.
\par 
\par        \plain \f1\fs20\cf1 If any invocation of the command exits with a status of 255, xargs will stop immediately without reading any further  in-
\par        put.  An error message is issued on stderr when this happens.
\par \plain \f1\fs20 
\par OPTIONS
\par        --arg-file=file
\par        -a file
\par               Read items from file instead of standard input.  If you use this option, stdin remains unchanged when commands are
\par               run.  Otherwise, stdin is redirected from /dev/null.
\par 
\par        --null
\par        -0     Input items are terminated by a null character instead of by whitespace, and the quotes and backslash are not spe-
\par               cial (every character is taken literally).  Disables the end of file string, which is treated like any other argu-
\par               ment.  Useful when input items might contain white space, quote marks, or backslashes.  The GNU find  -print0  op-
\par               tion produces input suitable for this mode.
\par 
\par        --delimiter=delim
\par        -d delim
\par               Input  items  are terminated by the specified character.  Quotes and backslash are not special; every character in
\par               the input is taken literally.  Disables the end-of-file string, which is treated like any  other  argument.   This
\par               can  be used when the input consists of simply newline-separated items, although it is almost always better to de-
\par               sign your program to use --null where this is possible.  The specified delimiter may be a single character,  a  C-
\par               style character escape such as \\n, or an octal or hexadecimal escape code.  Octal and hexadecimal escape codes are
\par               understood as for the printf command.   Multibyte characters are not supported.
\par 
\par        -E eof-str
\par               Set the end of file string to eof-str.  If the end of file string occurs as a line of input, the rest of the input
\par               is ignored.  If neither -E nor -e is used, no end of file string is used.
\par 
\par        --eof[=eof-str]
\par        -e[eof-str]
\par               This  option  is  a synonym for the -E option.  Use -E instead, because it is POSIX compliant while this option is
\par               not.  If eof-str is omitted, there is no end of file string.  If neither -E nor -e is used, no end of file  string
\par               is used.
\par 
\par        --help Print a summary of the options to xargs and exit.
\par 
\par \plain \f1\fs20\cf1        -I replace-str
\par \plain \f1\fs20              \plain \f1\fs20\cf1  Replace  occurrences  of replace-str in the initial-arguments with names read from standard input.\plain \f1\fs20   Also, unquoted
\par               blanks do not terminate input items; instead the separator is the newline character.  Implies -x and -L 1.
\par 
\par        --replace[=replace-str]
\par        -i[replace-str]
\par               This option is a synonym for -Ireplace-str if replace-str is specified, and for -I\{\} otherwise.   This  option  is
\par               deprecated; use -I instead.
\par 
\par        -L max-lines
\par               Use  at most max-lines nonblank input lines per command line.  Trailing blanks cause an input line to be logically
\par               continued on the next input line.  Implies -x.
\par 
\par        --max-lines[=max-lines]
\par        -l[max-lines]
\par               Synonym for the -L option.  Unlike -L, the max-lines argument is optional.  If max-lines is not specified, it  de-
\par               faults to one.  The -l option is deprecated since the POSIX standard specifies -L instead.
\par 
\par        --max-args=max-args
\par        -n max-args
\par               Use  at most max-args arguments per command line.  Fewer than max-args arguments will be used if the size (see the
\par               -s option) is exceeded, unless the -x option is given, in which case xargs will exit.
\par 
\par        --interactive
\par        -p     Prompt the user about whether to run each command line and read a line from the terminal.  Only  run  the  command
\par               line if the response starts with `y' or `Y'.  Implies -t.
\par 
\par        --no-run-if-empty
\par        -r     If  the  standard input does not contain any nonblanks, do not run the command.  Normally, the command is run once
\par               even if there is no input.  This option is a GNU extension.
\par 
\par        --max-chars=max-chars
\par \plain \f1\fs20\cf1        -s max-chars
\par \plain \f1\fs20               Use at most max-chars characters per command line, including the command and initial-arguments and the terminating
\par               nulls  at  the  ends of the argument strings.  The largest allowed value is system-dependent, and is calculated as
\par               the argument length limit for exec, less the size of your environment, less 2048 bytes of headroom.  If this value
\par               is  more  than  128KiB, 128Kib is used as the default value; otherwise, the default value is the maximum.  1KiB is
\par               1024 bytes.
\par 
\par        --verbose
\par        -t     Print the command line on the standard error output before executing it.
\par 
\par        --version
\par               Print the version number of xargs and exit.
\par 
\par        --show-limits
\par               Display the limits on the command-line length which are imposed by the operating system, xargs' choice  of  buffer
\par               size  and  the -s option.  Pipe the input from /dev/null (and perhaps specify --no-run-if-empty) if you don't want
\par               xargs to do anything.
\par 
\par        --exit
\par        -x     Exit if the size (see the -s option) is exceeded.
\par 
\par        --max-procs=max-procs
\par        -P max-procs
\par               Run up to max-procs processes at a time; the default is 1.  If max-procs is 0, xargs will run as many processes as
\par               possible at a time.  Use the -n option with -P; otherwise chances are that only one exec will be done.
\par 
\par \plain \f1\b\fs20 EXAMPLES
\par \plain \f1\fs20\cf1        find /tmp -name core -type f -print | xargs /bin/rm -f
\par \plain \f1\fs20        Find  files named core in or below the directory /tmp and delete them.  Note that this will work incorrectly if there are
\par        any filenames containing newlines or spaces.
\par \plain \f1\fs20\cf1 
\par        find /tmp -name core -type f \plain \f1\fs20\cf3 -print0\plain \f1\fs20\cf1  | xargs \plain \f1\fs20\cf3 -0\plain \f1\fs20\cf1  /bin/rm -f
\par \plain \f1\fs20        Find files named core in or below the directory /tmp and delete them, processing filenames in such a way that file or di-
\par        rectory names containing spaces or newlines are correctly handled.
\par 
\par     \plain \f1\fs20\cf3    find /tmp -depth -name core -type f -delete
\par \plain \f1\fs20        Find  files  named core in or below the directory /tmp and delete them, but more efficiently than in the previous example
\par        (because we avoid the need to use fork(2) and exec(2) to launch rm and we don't need the extra xargs process).
\par 
\par        cut -d: -f1 < /etc/passwd | sort | xargs echo
\par  \plain \f1\fs20\cf1       Generates(\uc2\u20135 \'b2\'fa\u29983 \'c9\'fa)\uc1\plain \f1\fs20  a \plain \f1\fs20\cf1 compact(\uc2\u32039 \'bd\'f4\u20945 \'b4\'d5\u30340 \'b5\'c4\u65292 \'a3\'ac\u32039 \'bd\'f4\u23494 \'c3\'dc\u30340 \'b5\'c4\u65307 \'a3\'bb\u31616 \'bc\'f2\u27905 \'bd\'e0\u30340 \'b5\'c4)\uc1\plain \f1\fs20  listing of all the users on the system.
\par 
\par   \plain \f1\fs20\cf-1      xargs sh -c 'emacs "$@" < /dev/tty' emacs
\par \plain \f1\fs20        Launches the minimum number of copies of Emacs needed, one after the other, to edit the files listed on  xargs'  standard
\par        input.  This example achieves the same effect as BSD's -o option, but in a more flexible and portable way.
\par 
\par EXIT STATUS
\par        xargs exits with the following status:
\par        0 if it succeeds
\par   \plain \f1\fs20\cf1      123 if any invocation of the command exited with status 1-125
\par        124 if the command exited with status 255
\par \plain \f1\fs20        \plain \f1\fs20\cf1 125 if the command is killed by a signal
\par \plain \f1\fs20  \plain \f1\fs20\cf1       126 if the command cannot be run
\par        127 if the command is not found
\par        1 if some other error occurred.
\par 
\par \plain \f1\fs20   \plain \f1\fs20\cf1      Exit codes greater than 128 are used by the shell to indicate that a program died due to a fatal signal.
\par \plain \f1\fs20 
\par STANDARDS CONFORMANCE
\par        As  of  GNU xargs version 4.2.9, the default behaviour of xargs is not to have a logical end-of-file marker.  POSIX (IEEE
\par        Std 1003.1, 2004 Edition) allows this.
\par 
\par        The -l and -i options appear in the 1997 version of the POSIX standard, but do not appear in  the  2004  version  of  the
\par        standard.  Therefore you should use -L and -I instead, respectively.
\par 
\par        The  POSIX  stadard  allows  implementations  to have a limit on the size of arguments to the exec functions.  This limit
\par        could be as low as 4096 bytes including the size of the environment.  For scripts to be portable, they must not rely on a
\par        larger  value.   However,  I know of no implementation whose actual limit is that small.  The --show-limits option can be
\par        used to discover the actual limits in force on the current system.
\par 
\par SEE ALSO
\par        find(1), locate(1), locatedb(5), updatedb(1), fork(2), execvp(3), Finding Files (on-line in Info, or printed)
\par 
\par BUGS
\par        The -L option is incompatible with the -I option, but perhaps should not be.
\par 
\par        It is not possible for xargs to be used securely, since there will always be a time gap between  the  production  of  the
\par        list  of input files and their use in the commands that xargs issues.  If other users have access to the system, they can
\par        manipulate the filesystem during this time window to force the action of the commands xargs runs to apply to  files  that
\par        you didn't intend.  For a more detailed discussion of this and related problems, please refer to the ``Security Consider-
\par        ations'' chapter in the findutils Texinfo documentation.  The -execdir option of find can often be used as a more  secure
\par        alternative.
\par 
\par        When  you  use  the  -I option, each line read from the input is buffered internally.   This means that there is an upper
\par        limit on the length of input line that xargs will accept when used with the -I option.  To work around  this  limitation,
\par        you  can  use the -s option to increase the amount of buffer space that xargs uses, and you can also use an extra invoca-
\par        tion of xargs to ensure that very long lines do not occur.  For example:
\par 
\par        somecommand | xargs -s 50000 echo | xargs -I '\{\}' -s 100000 rm '\{\}'
\par 
\par        Here, the first invocation of xargs has no input line length limit because it doesn't use the -i option.  The second  in-
\par        vocation of xargs does have such a limit, but we have ensured that the it never encounters a line which is longer than it
\par        can handle.   This is not an ideal solution.  Instead, the -i option should not impose a line length limit, which is  why
\par        this  discussion appears in the BUGS section.  The problem doesn't occur with the output of find(1) because it emits just
\par        one filename per line.
\par 
\par        The best way to report a bug is to use the form at http://savannah.gnu.org/bugs/?group=findutils.  The reason for this is
\par        that  you will then be able to track progress in fixing the problem.   Other comments about xargs(1) and about the findu-
\par        tils package in general can be sent to the bug-findutils mailing list.  To join the list, send email to bug-findutils-re-
\par        quest@gnu.org.
\par \plain \f1\b\fs20\cf2 -------------------------------------------------------------------------------------------\par}