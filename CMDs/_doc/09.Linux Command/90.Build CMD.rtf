{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid608502132\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid2042435910}
}
{\*\listoverridetable
{\listoverride\listid2042435910\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 90.Build CMD
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par 
\par \plain \f1\fs20 BASH_BUILTINS(1)                                                                                                                  BASH_BUILTINS(1)
\par 
\par NAME
\par        bash,  :, ., [, alias, bg, bind, break, builtin, cd, command, compgen, complete, continue, declare, dirs, disown, echo, enable, eval, exec,
\par        exit, export, fc, fg, getopts, hash, help, history, jobs, kill, let, local, logout, popd, printf, pushd, pwd, read, readonly, return,  set,
\par        shift, shopt, source, suspend, test, times, trap, type, typeset, ulimit, umask, unalias, unset, wait - bash built-in commands, see bash(1)
\par 
\par BASH BUILTIN COMMANDS
\par        Unless otherwise noted, each builtin command documented in this section as accepting options preceded by - accepts -- to signify the end of
\par        the options.
\par        : [arguments]
\par               No effect; the command does nothing beyond expanding arguments and performing any specified  redirections.   A  zero  exit  code  is
\par               returned.
\par 
\par         .  filename [arguments]
\par        source filename [arguments]
\par               Read  and  execute  commands  from filename in the current shell environment and return the exit status of the last command executed
\par               from filename.  If filename does not contain a slash, file names in PATH are used to find the directory  containing  filename.   The
\par               file  searched  for in PATH need not be executable.  When bash is not in posix mode, the current directory is searched if no file is
\par               found in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH is not searched.  If any arguments are
\par               supplied,  they become the positional parameters when filename is executed.  Otherwise the positional parameters are unchanged.  The
\par               return status is the status of the last command exited within the script (0 if no commands are executed), and false if  filename  is
\par               not found or cannot be read.
\par 
\par        alias [-p] [name[=value] ...]
\par               Alias  with  no  arguments  or  with the -p option prints the list of aliases in the form alias name=value on standard output.  When
\par               arguments are supplied, an alias is defined for each name whose value is given.  A trailing space in  value causes the next word  to
\par               be  checked  for  alias substitution when the alias is expanded.  For each name in the argument list for which no value is supplied,
\par               the name and value of the alias is printed.  Alias returns true unless a name is given for which no alias has been defined.
\par 
\par        bg [jobspec]
\par               Resume the suspended job jobspec in the background, as if it had been started with &.  If jobspec is not present, the shell's notion
\par               of  the current job is used.  bg jobspec returns 0 unless run when job control is disabled or, when run with job control enabled, if
\par               jobspec was not found or started without job control.
\par 
\par        bind [-m keymap] [-lpsvPSV]
\par        bind [-m keymap] [-q function] [-u function] [-r keyseq]
\par        bind [-m keymap] -f filename
\par        bind [-m keymap] -x keyseq:shell-command
\par        bind [-m keymap] keyseq:function-name
\par        bind readline-command
\par               Display current readline key and function bindings, bind a key sequence to a readline function or macro, or set a readline variable.
\par               Each non-option argument is a command as it would appear in .inputrc, but each binding or command must be passed as a separate argu-
\par               ment; e.g., '"\\C-x\\C-r": re-read-init-file'.  Options, if supplied, have the following meanings:
\par               -m keymap
\par                      Use keymap as the keymap to be affected by the subsequent bindings.   Acceptable  keymap  names  are  emacs,  emacs-standard,
\par                      emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and  vi-insert.  vi is equivalent to vi-command; emacs is equivalent to
\par                      emacs-standard.
\par               -l     List the names of all readline functions.
\par               -p     Display readline function names and bindings in such a way that they can be re-read.
\par               -P     List current readline function names and bindings.
\par               -v     Display readline variable names and values in such a way that they can be re-read.
\par               -V     List current readline variable names and values.
\par               -s     Display readline key sequences bound to macros and the strings they output in such a way that they can be re-read.
\par               -S     Display readline key sequences bound to macros and the strings they output.
\par               -f filename
\par                      Read key bindings from filename.
\par               -q function
\par                      Query about which keys invoke the named function.
\par               -u function
\par                      Unbind all keys bound to the named function.
\par               -r keyseq
\par                      Remove any current binding for keyseq.
\par               -x keyseq:shell-command
\par                      Cause shell-command to be executed whenever keyseq is entered.
\par 
\par               The return value is 0 unless an unrecognized option is given or an error occurred.
\par 
\par        break [n]
\par               Exit from within a for, while, until, or select loop.  If n is specified, break n levels.  n must be >= 1.  If n is greater than  the
\par               number  of  enclosing  loops,  all  enclosing loops are exited.  The return value is 0 unless the shell is not executing a loop when
\par               break is executed.
\par 
\par        builtin shell-builtin [arguments]
\par               Execute the specified shell builtin, passing it arguments, and return its exit status.  This is  useful  when  defining  a  function
\par               whose  name  is the same as a shell builtin, retaining the functionality of the builtin within the function.  The cd builtin is com-
\par               monly redefined this way.  The return status is false if shell-builtin is not a shell builtin command.
\par 
\par        cd [-L|-P] [dir]
\par               Change the current directory to dir.  The variable HOME is the default dir.  The variable CDPATH defines the  search  path  for  the
\par               directory  containing  dir.  Alternative directory names in CDPATH are separated by a colon (:).  A null directory name in CDPATH is
\par               the same as the current directory, i.e., ''.''.  If dir begins with a slash (/), then CDPATH is not used. The -P option says to  use
\par               the  physical  directory  structure  instead of following symbolic links (see also the -P option to the set builtin command); the -L
\par               option forces symbolic links to be followed.  An argument of - is equivalent to $OLDPWD.  If a non-empty directory name from  CDPATH
\par               is  used,  or if - is the first argument, and the directory change is successful, the absolute pathname of the new working directory
\par               is written to the standard output.  The return value is true if the directory was successfully changed; false otherwise.
\par 
\par        caller [expr]
\par               Returns the context of any active subroutine call (a shell function or a script executed with the .  or  source  builtins.   Without
\par               expr,  caller displays the line number and source filename of the current subroutine call.  If a non-negative integer is supplied as
\par               expr, caller displays the line number, subroutine name, and source file corresponding to that position in the current execution call
\par               stack.  This extra information may be used, for example, to print a stack trace.  The current frame is frame 0.  The return value is
\par               0 unless the shell is not executing a subroutine call or expr does not correspond to a valid position in the call stack.
\par 
\par        command [-pVv] command [arg ...]
\par               Run command with args suppressing the normal shell function lookup. Only builtin commands or commands found in  the  PATH  are  exe-
\par               cuted.  If the -p option is given, the search for command is performed using a default value for PATH that is guaranteed to find all
\par               of the standard utilities.  If either the -V or -v option is supplied, a description of command is printed.  The -v option causes  a
\par               single  word  indicating  the  command  or  file  name used to invoke command to be displayed; the -V option produces a more verbose
\par               description.  If the -V or -v option is supplied, the exit status is 0 if command was found, and 1 if not.   If  neither  option  is
\par               supplied  and  an  error  occurred  or  command  cannot be found, the exit status is 127.  Otherwise, the exit status of the command
\par               builtin is the exit status of command.
\par 
\par        compgen [option] [word]
\par               Generate possible completion matches for word according to the options, which may be any option accepted  by  the  complete  builtin
\par               with  the  exception of -p and -r, and write the matches to the standard output.  When using the -F or -C options, the various shell
\par               variables set by the programmable completion facilities, while available, will not have useful values.
\par 
\par               The matches will be generated in the same way as if the programmable completion code had generated them directly from  a  completion
\par               specification with the same flags.  If word is specified, only those completions matching word will be displayed.
\par 
\par               The return value is true unless an invalid option is supplied, or no matches were generated.
\par 
\par        complete [-abcdefgjksuv] [-o comp-option] [-A action] [-G globpat] [-W wordlist] [-P prefix] [-S suffix]
\par               [-X filterpat] [-F function] [-C command] name [name ...]
\par        complete -pr [name ...]
\par               Specify  how arguments to each name should be completed.  If the -p option is supplied, or if no options are supplied, existing com-
\par               pletion specifications are printed in a way that allows them to be reused as input.  The -r option removes a  completion  specifica-
\par               tion for each name, or, if no names are supplied, all completion specifications.
\par 
\par               The process of applying these completion specifications when word completion is attempted is described above under Programmable Com-
\par               pletion.
\par 
\par               Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X options (and, if  necessary,  the  -P
\par               and -S options) should be quoted to protect them from expansion before the complete builtin is invoked.
\par               -o comp-option
\par                       The  comp-option  controls  several  aspects  of the compspec's behavior beyond the simple generation of completions.  comp-
\par                       option may be one of:
\par                       bashdefault
\par                               Perform the rest of the default bash completions if the compspec generates no matches.
\par                       default Use readline's default filename completion if the compspec generates no matches.
\par                       dirnames
\par                               Perform directory name completion if the compspec generates no matches.
\par                       filenames
\par                               Tell readline that the compspec generates filenames, so it can perform any filename-specific processing (like adding
\par                               a slash to directory names or suppressing trailing spaces).  Intended to be used with shell functions.
\par                       nospace Tell readline not to append a space (the default) to words completed at the end of the line.
\par               -A action
\par                       The action may be one of the following to generate a list of possible completions:
\par                       alias   Alias names.  May also be specified as -a.
\par                       arrayvar
\par                               Array variable names.
\par                       binding Readline key binding names.
\par                       builtin Names of shell builtin commands.  May also be specified as -b.
\par                       command Command names.  May also be specified as -c.
\par                       directory
\par                               Directory names.  May also be specified as -d.
\par                       disabled
\par                               Names of disabled shell builtins.
\par                       enabled Names of enabled shell builtins.
\par                       export  Names of exported shell variables.  May also be specified as -e.
\par                       file    File names.  May also be specified as -f.
\par                       function
\par                               Names of shell functions.
\par                       group   Group names.  May also be specified as -g.
\par                       helptopic
\par                               Help topics as accepted by the help builtin.
\par                       hostname
\par                               Hostnames, as taken from the file specified by the HOSTFILE shell variable.
\par                       job     Job names, if job control is active.  May also be specified as -j.
\par                       keyword Shell reserved words.  May also be specified as -k.
\par                       running Names of running jobs, if job control is active.
\par                       service Service names.  May also be specified as -s.
\par                       setopt  Valid arguments for the -o option to the set builtin.
\par                       shopt   Shell option names as accepted by the shopt builtin.
\par                       signal  Signal names.
\par                       stopped Names of stopped jobs, if job control is active.
\par                       user    User names.  May also be specified as -u.
\par                       variable
\par                               Names of all shell variables.  May also be specified as -v.
\par               -G globpat
\par                       The filename expansion pattern globpat is expanded to generate the possible completions.
\par               -W wordlist
\par                       The  wordlist  is split using the characters in the IFS special variable as delimiters, and each resultant word is expanded.
\par                       The possible completions are the members of the resultant list which match the word being completed.
\par               -C command
\par                       command is executed in a subshell environment, and its output is used as the possible completions.
\par               -F function
\par                       The shell function function is executed in the current shell environment.  When it finishes, the  possible  completions  are
\par                       retrieved from the value of the COMPREPLY array variable.
\par               -X filterpat
\par                       filterpat  is  a pattern as used for filename expansion.  It is applied to the list of possible completions generated by the
\par                       preceding options and arguments, and each completion matching filterpat is removed from the list.  A leading ! in  filterpat
\par                       negates the pattern; in this case, any completion not matching filterpat is removed.
\par               -P prefix
\par                       prefix is added at the beginning of each possible completion after all other options have been applied.
\par               -S suffix
\par                       suffix is appended to each possible completion after all other options have been applied.
\par 
\par               The return value is true unless an invalid option is supplied, an option other than -p or -r is supplied without a name argument, an
\par               attempt is made to remove a completion specification for a name for which no specification exists, or an error occurs adding a  com-
\par               pletion specification.
\par 
\par        continue [n]
\par               Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified, resume at the nth enclosing loop.
\par               n must be >= 1.  If n is greater than the number of enclosing loops, the last enclosing loop (the  ''top-level''  loop)  is  resumed.
\par               The return value is 0 unless the shell is not executing a loop when continue is executed.
\par 
\par        declare [-afFirtx] [-p] [name[=value] ...]
\par        typeset [-afFirtx] [-p] [name[=value] ...]
\par               Declare variables and/or give them attributes.  If no names are given then display the values of variables.  The -p option will dis-
\par               play the attributes and values of each name.  When -p is used, additional options are ignored.  The -F option inhibits  the  display
\par               of  function  definitions;  only the function name and attributes are printed.  If the extdebug shell option is enabled using shopt,
\par               the source file name and line number where the function is defined are displayed as well.  The -F option implies -f.  The  following
\par               options can be used to restrict output to variables with the specified attribute or to give variables attributes:
\par               -a     Each name is an array variable (see Arrays above).
\par               -f     Use function names only.
\par               -i     The  variable  is treated as an integer; arithmetic evaluation (see ARITHMETIC EVALUATION ) is performed when the variable is
\par                      assigned a value.
\par               -r     Make names readonly.  These names cannot then be assigned values by subsequent assignment statements or unset.
\par               -t     Give each name the trace attribute.  Traced functions inherit the DEBUG trap from the calling shell.  The trace attribute has
\par                      no special meaning for variables.
\par               -x     Mark names for export to subsequent commands via the environment.
\par 
\par               Using  '+'  instead of '-' turns off the attribute instead, with the exception that +a may not be used to destroy an array variable.
\par               When used in a function, makes each name local, as with the local command.  If a variable name is followed by =value, the  value  of
\par               the  variable  is set to value.  The return value is 0 unless an invalid option is encountered, an attempt is made to define a func-
\par               tion using ''-f foo=bar'', an attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to  an
\par               array variable without using the compound assignment syntax (see Arrays above), one of the names is not a valid shell variable name,
\par               an attempt is made to turn off readonly status for a readonly variable, an attempt is made to turn off array  status  for  an  array
\par               variable, or an attempt is made to display a non-existent function with -f.
\par 
\par        dirs [-clpv] [+n] [-n]
\par               Without  options,  displays  the  list  of currently remembered directories.  The default display is on a single line with directory
\par               names separated by spaces.  Directories are added to the list with the pushd command; the popd  command  removes  entries  from  the
\par               list.
\par               +n     Displays the nth entry counting from the left of the list shown by dirs when invoked without options, starting with zero.
\par               -n     Displays the nth entry counting from the right of the list shown by dirs when invoked without options, starting with zero.
\par               -c     Clears the directory stack by deleting all of the entries.
\par               -l     Produces a longer listing; the default listing format uses a tilde to denote the home directory.
\par               -p     Print the directory stack with one entry per line.
\par               -v     Print the directory stack with one entry per line, prefixing each entry with its index in the stack.
\par 
\par               The return value is 0 unless an invalid option is supplied or n indexes beyond the end of the directory stack.
\par 
\par        disown [-ar] [-h] [jobspec ...]
\par               Without options, each jobspec is removed from the table of active jobs.  If the -h option is given, each jobspec is not removed from
\par               the table, but is marked so that SIGHUP is not sent to the job if the shell receives a SIGHUP.  If no jobspec is present,  and  nei-
\par               ther  the  -a  nor  the -r option is supplied, the current job is used.  If no jobspec is supplied, the -a option means to remove or
\par               mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.  The return value is 0 unless a jobspec
\par               does not specify a valid job.
\par 
\par        echo [-neE] [arg ...]
\par               Output  the args, separated by spaces, followed by a newline.  The return status is always 0.  If -n is specified, the trailing new-
\par               line is suppressed.  If the -e option is given, interpretation of the following backslash-escaped characters  is  enabled.   The  -E
\par               option  disables the interpretation of these escape characters, even on systems where they are interpreted by default.  The xpg_echo
\par               shell option may be used to dynamically determine whether or not echo expands these escape characters by  default.   echo  does  not
\par               interpret -- to mean the end of options.  echo interprets the following escape sequences:
\par               \\a     alert (bell)
\par               \\b     backspace
\par               \\c     suppress trailing newline
\par               \\e     an escape character
\par               \\f     form feed
\par               \\n     new line
\par               \\r     carriage return
\par               \\t     horizontal tab
\par               \\v     vertical tab
\par               \\\\     backslash
\par               \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)
\par               \\nnn   the eight-bit character whose value is the octal value nnn (one to three octal digits)
\par               \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
\par 
\par        enable [-adnps] [-f filename] [name ...]
\par               Enable  and disable builtin shell commands.  Disabling a builtin allows a disk command which has the same name as a shell builtin to
\par               be executed without specifying a full pathname, even though the shell normally searches for builtins before disk commands.  If -n is
\par               used,  each  name  is disabled; otherwise, names are enabled.  For example, to use the test binary found via the PATH instead of the
\par               shell builtin version, run ''enable -n test''.  The -f option means to load the new builtin command name from  shared  object  file-
\par               name, on systems that support dynamic loading.  The -d option will delete a builtin previously loaded with -f.  If no name arguments
\par               are given, or if the -p option is supplied, a list of shell builtins is printed.  With no other option arguments, the list  consists
\par               of all enabled shell builtins.  If -n is supplied, only disabled builtins are printed.  If -a is supplied, the list printed includes
\par               all builtins, with an indication of whether or not each is enabled.  If -s is supplied, the output is restricted to the  POSIX  spe-
\par               cial  builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading a new builtin from a shared
\par               object.
\par 
\par        eval [arg ...]
\par               The args are read and concatenated together into a single command.  This command is then read and executed by  the  shell,  and  its
\par               exit status is returned as the value of eval.  If there are no args, or only null arguments, eval returns 0.
\par 
\par        exec [-cl] [-a name] [command [arguments]]
\par               If  command is specified, it replaces the shell.  No new process is created.  The arguments become the arguments to command.  If the
\par               -l option is supplied, the shell places a dash at the beginning of the zeroth arg passed to command.  This is  what  login(1)  does.
\par               The -c option causes command to be executed with an empty environment.  If -a is supplied, the shell passes name as the zeroth argu-
\par               ment to the executed command.  If command cannot be executed for some reason, a non-interactive shell exits, unless the shell option
\par               execfail  is  enabled,  in  which case it returns failure.  An interactive shell returns failure if the file cannot be executed.  If
\par               command is not specified, any redirections take effect in the current shell, and the return status is 0.  If there is a  redirection
\par               error, the return status is 1.
\par 
\par        exit [n]
\par               Cause  the shell to exit with a status of n.  If n is omitted, the exit status is that of the last command executed.  A trap on EXIT
\par               is executed before the shell terminates.
\par 
\par        export [-fn] [name[=word]] ...
\par        export -p
\par               The supplied names are marked for automatic export to the environment of subsequently executed commands.  If the -f option is given,
\par               the names refer to functions.  If no names are given, or if the -p option is supplied, a list of all names that are exported in this
\par               shell is printed.  The -n option causes the export property to be removed from each name.  If a variable name is followed by  =word,
\par               the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid option is encountered, one of the
\par               names is not a valid shell variable name, or -f is supplied with a name that is not a function.
\par 
\par        fc [-e ename] [-nlr] [first] [last]
\par        fc -s [pat=rep] [cmd]
\par               Fix Command.  In the first form, a range of commands from first to last is selected from the history list.  First and  last  may  be
\par               specified  as a string (to locate the last command beginning with that string) or as a number (an index into the history list, where
\par               a negative number is used as an offset from the current command number).  If last is not specified it is set to the current  command
\par               for  listing (so that ''fc -l -10'' prints the last 10 commands) and to first otherwise.  If first is not specified it is set to the
\par               previous command for editing and -16 for listing.
\par 
\par               The -n option suppresses the command numbers when listing.  The -r option reverses the order of the commands.  If the -l  option  is
\par               given,  the commands are listed on standard output.  Otherwise, the editor given by ename is invoked on a file containing those com-
\par               mands.  If ename is not given, the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  neither
\par               variable is set, is used.  When editing is complete, the edited commands are echoed and executed.
\par 
\par               In  the  second  form,  command  is  re-executed  after each instance of pat is replaced by rep.  A useful alias to use with this is
\par               ''r="fc -s"'', so that typing ''r cc'' runs the last command beginning with ''cc'' and typing ''r'' re-executes the last command.
\par 
\par               If the first form is used, the return value is 0 unless an invalid option is encountered or first or last specify history lines  out
\par               of  range.   If  the -e option is supplied, the return value is the value of the last command executed or failure if an error occurs
\par               with the temporary file of commands.  If the second form is used, the return status is that of the command re-executed,  unless  cmd
\par               does not specify a valid history line, in which case fc returns failure.
\par 
\par        fg [jobspec]
\par               Resume  jobspec in the foreground, and make it the current job.  If jobspec is not present, the shell's notion of the current job is
\par               used.  The return value is that of the command placed into the foreground, or failure if run when job control is disabled  or,  when
\par               run  with  job control enabled, if jobspec does not specify a valid job or jobspec specifies a job that was started without job con-
\par               trol.
\par 
\par        getopts optstring name [args]
\par               getopts is used by shell procedures to parse positional parameters.  optstring contains the option characters to be recognized; if a
\par               character is followed by a colon, the option is expected to have an argument, which should be separated from it by white space.  The
\par               colon and question mark characters may not be used as option characters.  Each time it is invoked, getopts places the next option in
\par               the  shell  variable name, initializing name if it does not exist, and the index of the next argument to be processed into the vari-
\par               able OPTIND.  OPTIND is initialized to 1 each time the shell or a shell script is invoked.  When an  option  requires  an  argument,
\par               getopts  places  that  argument  into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually reset
\par               between multiple calls to getopts within the same shell invocation if a new set of parameters is to be used.
\par 
\par               When the end of options is encountered, getopts exits with a return value greater than zero.  OPTIND is set  to  the  index  of  the
\par               first non-option argument, and name is set to ?.
\par 
\par               getopts normally parses the positional parameters, but if more arguments are given in args, getopts parses those instead.
\par 
\par               getopts  can  report errors in two ways.  If the first character of optstring is a colon, silent error reporting is used.  In normal
\par               operation diagnostic messages are printed when invalid options or missing option arguments are encountered.  If the variable  OPTERR
\par               is set to 0, no error messages will be displayed, even if the first character of optstring is not a colon.
\par 
\par               If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error message and unsets OPTARG.  If getopts
\par               is silent, the option character found is placed in OPTARG and no diagnostic message is printed.
\par 
\par               If a required argument is not found, and getopts is not silent, a question mark (?) is placed in name, OPTARG is unset, and a  diag-
\par               nostic  message  is  printed.   If  getopts  is silent, then a colon (:) is placed in name and OPTARG is set to the option character
\par               found.
\par 
\par               getopts returns true if an option, specified or unspecified, is found.  It returns false if the end of options is encountered or  an
\par               error occurs.
\par 
\par        hash [-lr] [-p filename] [-dt] [name]
\par               For  each  name,  the  full  file name of the command is determined by searching the directories in $PATH and remembered.  If the -p
\par               option is supplied, no path search is performed, and filename is used as the full file name of the command.  The  -r  option  causes
\par               the  shell  to  forget all remembered locations.  The -d option causes the shell to forget the remembered location of each name.  If
\par               the -t option is supplied, the full pathname to which each name corresponds is printed.  If multiple  name  arguments  are  supplied
\par               with  -t,  the name is printed before the hashed full pathname.  The -l option causes output to be displayed in a format that may be
\par               reused as input.  If no arguments are given, or if only -l is supplied, information  about  remembered  commands  is  printed.   The
\par               return status is true unless a name is not found or an invalid option is supplied.
\par 
\par        help [-s] [pattern]
\par               Display helpful information about builtin commands.  If pattern is specified, help gives detailed help on all commands matching pat-
\par               tern; otherwise help for all the builtins and shell control structures is printed.  The -s option  restricts  the  information  dis-
\par               played to a short usage synopsis.  The return status is 0 unless no command matches pattern.
\par 
\par        history [n]
\par        history -c
\par        history -d offset
\par        history -anrw [filename]
\par        history -p arg [arg ...]
\par        history -s arg [arg ...]
\par               With  no  options,  display the command history list with line numbers.  Lines listed with a * have been modified.  An argument of n
\par               lists only the last n lines.  If the shell variable HISTTIMEFORMAT is set and not null, it is used as  a  format  string  for  strf-
\par               time(3) to display the time stamp associated with each displayed history entry.  No intervening blank is printed between the format-
\par               ted time stamp and the history line.  If filename is supplied, it is used as the name of the history file;  if  not,  the  value  of
\par               HISTFILE is used.  Options, if supplied, have the following meanings:
\par               -c     Clear the history list by deleting all the entries.
\par               -d offset
\par                      Delete the history entry at position offset.
\par               -a     Append the ''new'' history lines (history lines entered since the beginning of the current bash session) to the history file.
\par               -n     Read the history lines not already read from the history file into the current history list.  These are lines appended to the
\par                      history file since the beginning of the current bash session.
\par               -r     Read the contents of the history file and use them as the current history.
\par               -w     Write the current history to the history file, overwriting the history file's contents.
\par               -p     Perform history substitution on the following args and display the result on the standard output.  Does not store the results
\par                      in the history list.  Each arg must be quoted to disable normal history expansion.
\par               -s     Store the args in the history list as a single entry.  The last command in the history list is removed before  the  args  are
\par                      added.
\par 
\par               If  the  HISTTIMEFORMAT  is  set, the time stamp information associated with each history entry is written to the history file.  The
\par               return value is 0 unless an invalid option is encountered, an error occurs while reading or writing the  history  file,  an  invalid
\par               offset is supplied as an argument to -d, or the history expansion supplied as an argument to -p fails.
\par 
\par        jobs [-lnprs] [ jobspec ... ]
\par        jobs -x command [ args ... ]
\par               The first form lists the active jobs.  The options have the following meanings:
\par               -l     List process IDs in addition to the normal information.
\par               -p     List only the process ID of the job's process group leader.
\par               -n     Display information only about jobs that have changed status since the user was last notified of their status.
\par               -r     Restrict output to running jobs.
\par               -s     Restrict output to stopped jobs.
\par 
\par               If jobspec is given, output is restricted to information about that job.  The return status is 0 unless an invalid option is encoun-
\par               tered or an invalid jobspec is supplied.
\par 
\par               If the -x option is supplied, jobs replaces any jobspec found in command or args with the corresponding process group ID,  and  exe-
\par               cutes command passing it args, returning its exit status.
\par 
\par        kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...
\par        kill -l [sigspec | exit_status]
\par               Send  the  signal  named by sigspec or signum to the processes named by pid or jobspec.  sigspec is either a case-insensitive signal
\par               name such as SIGKILL (with or without the SIG prefix) or a signal number; signum is a signal number.  If  sigspec  is  not  present,
\par               then  SIGTERM  is  assumed.  An argument of -l lists the signal names.  If any arguments are supplied when -l is given, the names of
\par               the signals corresponding to the arguments are listed, and the return status is 0.  The exit_status argument to -l is a number spec-
\par               ifying  either a signal number or the exit status of a process terminated by a signal.  kill returns true if at least one signal was
\par               successfully sent, or false if an error occurs or an invalid option is encountered.
\par 
\par        let arg [arg ...]
\par               Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION).  If the last arg evaluates to 0, let returns 1;  0
\par               is returned otherwise.
\par 
\par        local [option] [name[=value] ...]
\par               For  each  argument,  a  local variable named name is created, and assigned value.  The option can be any of the options accepted by
\par               declare.  When local is used within a function, it causes the variable name to have a visible scope restricted to that function  and
\par               its  children.   With  no operands, local writes a list of local variables to the standard output.  It is an error to use local when
\par               not within a function.  The return status is 0 unless local is used outside a function, an invalid name is supplied, or  name  is  a
\par               readonly variable.
\par 
\par        logout Exit a login shell.
\par 
\par        popd [-n] [+n] [-n]
\par               Removes entries from the directory stack.  With no arguments, removes the top directory from the stack, and performs a cd to the new
\par               top directory.  Arguments, if supplied, have the following meanings:
\par               +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.  For example: ''popd +0'' removes
\par                      the first directory, ''popd +1'' the second.
\par               -n     Removes  the  nth  entry  counting  from  the  right of the list shown by dirs, starting with zero.  For example: ''popd -0''
\par                      removes the last directory, ''popd -1'' the next to last.
\par               -n     Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.
\par 
\par               If the popd command is successful, a dirs is performed as well, and the return status is 0.  popd returns false if an invalid option
\par               is encountered, the directory stack is empty, a non-existent directory stack entry is specified, or the directory change fails.
\par 
\par        printf format [arguments]
\par               Write  the  formatted arguments to the standard output under the control of the format.  The format is a character string which con-
\par               tains three types of objects: plain characters, which are simply copied to standard output, character escape  sequences,  which  are
\par               converted  and  copied to the standard output, and format specifications, each of which causes printing of the next successive argu-
\par               ment.  In addition to the standard printf(1) formats, %b causes printf to expand backslash escape  sequences  in  the  corresponding
\par               argument  (except  that \\c terminates output, backslashes in \\', \\", and \\? are not removed, and octal escapes beginning with \\0 may
\par               contain up to four digits), and %q causes printf to output the corresponding argument in a format that can be reused as shell input.
\par 
\par               The  format  is  reused  as necessary to consume all of the arguments.  If the format requires more arguments than are supplied, the
\par               extra format specifications behave as if a zero value or null string, as appropriate, had been supplied.  The return value  is  zero
\par               on success, non-zero on failure.
\par 
\par        pushd [-n] [dir]
\par        pushd [-n] [+n] [-n]
\par               Adds a directory to the top of the directory stack, or rotates the stack, making the new top of the stack the current working direc-
\par               tory.  With no arguments, exchanges the top two directories and returns 0, unless the directory stack is empty.  Arguments, if  sup-
\par               plied, have the following meanings:
\par               +n     Rotates  the stack so that the nth directory (counting from the left of the list shown by dirs, starting with zero) is at the
\par                      top.
\par               -n     Rotates the stack so that the nth directory (counting from the right of the list shown by dirs, starting with zero) is at the
\par                      top.
\par               -n     Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.
\par               dir    Adds dir to the directory stack at the top, making it the new current working directory.
\par 
\par               If  the  pushd  command is successful, a dirs is performed as well.  If the first form is used, pushd returns 0 unless the cd to dir
\par               fails.  With the second form, pushd returns 0 unless the directory stack is empty, a non-existent directory stack element is  speci-
\par               fied, or the directory change to the specified new current directory fails.
\par 
\par        pwd [-LP]
\par               Print  the  absolute pathname of the current working directory.  The pathname printed contains no symbolic links if the -P option is
\par               supplied or the -o physical option to the set builtin command is enabled.  If the -L option is used, the pathname printed  may  con-
\par               tain  symbolic  links.   The return status is 0 unless an error occurs while reading the name of the current directory or an invalid
\par               option is supplied.
\par 
\par        read [-ers] [-u fd] [-t timeout] [-a aname] [-p prompt] [-n nchars] [-d delim] [name ...]
\par               One line is read from the standard input, or from the file descriptor fd supplied as an argument to the -u  option,  and  the  first
\par               word is assigned to the first name, the second word to the second name, and so on, with leftover words and their intervening separa-
\par               tors assigned to the last name.  If there are fewer words read from the input stream than names, the remaining  names  are  assigned
\par               empty  values.   The characters in IFS are used to split the line into words.  The backslash character (\\) may be used to remove any
\par               special meaning for the next character read and for line continuation.  Options, if supplied, have the following meanings:
\par               -a aname
\par                      The words are assigned to sequential indices of the array variable aname, starting at 0.  aname is unset before any new  val-
\par                      ues are assigned.  Other name arguments are ignored.
\par               -d delim
\par                      The first character of delim is used to terminate the input line, rather than newline.
\par               -e     If the standard input is coming from a terminal, readline (see READLINE above) is used to obtain the line.
\par               -n nchars
\par                      read returns after reading nchars characters rather than waiting for a complete line of input.
\par               -p prompt
\par                      Display  prompt  on standard error, without a trailing newline, before attempting to read any input.  The prompt is displayed
\par                      only if input is coming from a terminal.
\par               -r     Backslash does not act as an escape character.  The backslash is considered to be part of the line.  In particular,  a  back-
\par                      slash-newline pair may not be used as a line continuation.
\par               -s     Silent mode.  If input is coming from a terminal, characters are not echoed.
\par               -t timeout
\par                      Cause read to time out and return failure if a complete line of input is not read within timeout seconds.  This option has no
\par                      effect if read is not reading input from the terminal or a pipe.
\par               -u fd  Read input from file descriptor fd.
\par 
\par               If no names are supplied, the line read is assigned to the variable REPLY.  The return code is zero, unless end-of-file  is  encoun-
\par               tered, read times out, or an invalid file descriptor is supplied as the argument to -u.
\par 
\par        readonly [-apf] [name[=word] ...]
\par               The  given  names  are  marked readonly; the values of these names may not be changed by subsequent assignment.  If the -f option is
\par               supplied, the functions corresponding to the names are so marked.  The -a option restricts the variables  to  arrays.   If  no  name
\par               arguments  are  given,  or if the -p option is supplied, a list of all readonly names is printed.  The -p option causes output to be
\par               displayed in a format that may be reused as input.  If a variable name is followed by =word, the value of the  variable  is  set  to
\par               word.  The return status is 0 unless an invalid option is encountered, one of the names is not a valid shell variable name, or -f is
\par               supplied with a name that is not a function.
\par 
\par        return [n]
\par               Causes a function to exit with the return value specified by n.  If n is omitted, the return status is that of the last command exe-
\par               cuted  in the function body.  If used outside a function, but during execution of a script by the .  (source) command, it causes the
\par               shell to stop executing that script and return either n or the exit status of the last command executed within  the  script  as  the
\par               exit  status  of the script.  If used outside a function and not during execution of a script by ., the return status is false.  Any
\par               command associated with the RETURN trap is executed before execution resumes after the function or script.
\par 
\par        set [--abefhkmnptuvxBCHP] [-o option] [arg ...]
\par               Without options, the name and value of each shell variable are displayed in a format that can be reused as  input.   The  output  is
\par               sorted  according  to  the current locale.  When options are specified, they set or unset shell attributes.  Any arguments remaining
\par               after the options are processed are treated as values for the positional parameters and are assigned, in order, to $1, $2, ...   $n.
\par               Options, if specified, have the following meanings:
\par               -a      Automatically  mark  variables  and functions which are modified or created for export to the environment of subsequent com-
\par                       mands.
\par               -b      Report the status of terminated background jobs immediately, rather than before the next primary prompt.  This is  effective
\par                       only when job control is enabled.
\par               -e      Exit immediately if a simple command (see SHELL GRAMMAR above) exits with a non-zero status.  The shell does not exit if the
\par                       command that fails is part of the command list immediately following a while or until keyword, part of the  test  in  an  if
\par                       statement,  part  of  a  && or || list, or if the command's return value is being inverted via !.  A trap on ERR, if set, is
\par                       executed before the shell exits.
\par               -f      Disable pathname expansion.
\par               -h      Remember the location of commands as they are looked up for execution.  This is enabled by default.
\par               -k      All arguments in the form of assignment statements are placed in the environment for a command, not just those that  precede
\par                       the command name.
\par               -m      Monitor  mode.  Job control is enabled.  This option is on by default for interactive shells on systems that support it (see
\par                       JOB CONTROL above).  Background processes run in a separate process group and a line containing their exit status is printed
\par                       upon their completion.
\par               -n      Read  commands  but  do  not  execute them.  This may be used to check a shell script for syntax errors.  This is ignored by
\par                       interactive shells.
\par               -o option-name
\par                       The option-name can be one of the following:
\par                       allexport
\par                               Same as -a.
\par                       braceexpand
\par                               Same as -B.
\par                       emacs   Use an emacs-style command line editing interface.  This is enabled by default when the shell is interactive, unless
\par                               the shell is started with the --noediting option.
\par                       errtrace
\par                               Same as -E.
\par                       functrace
\par                               Same as -T.
\par                       errexit Same as -e.
\par                       hashall Same as -h.
\par                       histexpand
\par                               Same as -H.
\par                       history Enable command history, as described above under HISTORY.  This option is on by default in interactive shells.
\par                       ignoreeof
\par                               The effect is as if the shell command ''IGNOREEOF=10'' had been executed (see Shell Variables above).
\par                       keyword Same as -k.
\par                       monitor Same as -m.
\par                       noclobber
\par                               Same as -C.
\par                       noexec  Same as -n.
\par                       noglob  Same as -f.  nolog Currently ignored.
\par                       notify  Same as -b.
\par                       nounset Same as -u.
\par                       onecmd  Same as -t.
\par                       physical
\par                               Same as -P.
\par                       pipefail
\par                               If  set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status,
\par                               or zero if all commands in the pipeline exit successfully.  This option is disabled by default.
\par                       posix   Change the behavior of bash where the default operation differs from the POSIX 1003.2 standard to match the standard
\par                               ('posix mode).
\par                       privileged
\par                               Same as -p.
\par                       verbose Same as -v.
\par                       vi      Use a vi-style command line editing interface.
\par                       xtrace  Same as -x.
\par                       If  -o  is  supplied  with  no  option-name,  the  values  of  the  current  options are printed.  If +o is supplied with no
\par                       option-name, a series of set commands to recreate the current option settings is displayed on the standard output.
\par               -p      Turn on privileged mode.  In this mode, the $ENV and $BASH_ENV files are not processed, shell functions  are  not  inherited
\par                       from  the  environment,  and  the SHELLOPTS variable, if it appears in the environment, is ignored.  If the shell is started
\par                       with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied,  these  actions
\par                       are taken and the effective user id is set to the real user id.  If the -p option is supplied at startup, the effective user
\par                       id is not reset.  Turning this option off causes the effective user and group ids to be set to the real user and group  ids.
\par               -t      Exit after reading and executing one command.
\par               -u      Treat  unset variables as an error when performing parameter expansion.  If expansion is attempted on an unset variable, the
\par                       shell prints an error message, and, if not interactive, exits with a non-zero status.
\par               -v      Print shell input lines as they are read.
\par               -x      After expanding each simple command, for command, case command, select command,  or  arithmetic  for  command,  display  the
\par                       expanded value of PS4, followed by the command and its expanded arguments or associated word list.
\par               -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.
\par               -C      If  set, bash does not overwrite an existing file with the >, >&, and <> redirection operators.  This may be overridden when
\par                       creating output files by using the redirection operator >| instead of >.
\par               -E      If set, any trap on ERR is inherited by shell functions, command substitutions, and commands executed in a subshell environ-
\par                       ment.  The ERR trap is normally not inherited in such cases.
\par               -H      Enable !  style history substitution.  This option is on by default when the shell is interactive.
\par               -P      If  set,  the shell does not follow symbolic links when executing commands such as cd that change the current working direc-
\par                       tory.  It uses the physical directory structure instead.  By default, bash follows the logical  chain  of  directories  when
\par                       performing commands which change the current directory.
\par               -T      If  set, any trap on DEBUG is inherited by shell functions, command substitutions, and commands executed in a subshell envi-
\par                       ronment.  The DEBUG trap is normally not inherited in such cases.
\par               --      If no arguments follow this option, then the positional parameters are unset.  Otherwise, the positional parameters are  set
\par                       to the args, even if some of them begin with a -.
\par               -       Signal  the end of options, cause all remaining args to be assigned to the positional parameters.  The -x and -v options are
\par                       turned off.  If there are no args, the positional parameters remain unchanged.
\par 
\par               The options are off by default unless otherwise noted.  Using + rather than - causes these options to be turned  off.   The  options
\par               can also be specified as arguments to an invocation of the shell.  The current set of options may be found in $-.  The return status
\par               is always true unless an invalid option is encountered.
\par 
\par        shift [n]
\par               The positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the numbers $# down to $#-n+1 are unset.  n
\par               must  be a non-negative number less than or equal to $#.  If n is 0, no parameters are changed.  If n is not given, it is assumed to
\par               be 1.  If n is greater than $#, the positional parameters are not changed.  The return status is greater than zero if n  is  greater
\par               than $# or less than zero; otherwise 0.
\par 
\par        shopt [-pqsu] [-o] [optname ...]
\par               Toggle  the values of variables controlling optional shell behavior.  With no options, or with the -p option, a list of all settable
\par               options is displayed, with an indication of whether or not each is set.  The -p option causes output to be displayed in a form  that
\par               may be reused as input.  Other options have the following meanings:
\par               -s     Enable (set) each optname.
\par               -u     Disable (unset) each optname.
\par               -q     Suppresses  normal output (quiet mode); the return status indicates whether the optname is set or unset.  If multiple optname
\par                      arguments are given with -q, the return status is zero if all optnames are enabled; non-zero otherwise.
\par               -o     Restricts the values of optname to be those defined for the -o option to the set builtin.
\par 
\par               If either -s or -u is used with no optname arguments, the display is limited to those options which are set or unset,  respectively.
\par               Unless otherwise noted, the shopt options are disabled (unset) by default.
\par 
\par               The  return status when listing options is zero if all optnames are enabled, non-zero otherwise.  When setting or unsetting options,
\par               the return status is zero unless an optname is not a valid shell option.
\par 
\par               The list of shopt options is:
\par 
\par               cdable_vars
\par                       If set, an argument to the cd builtin command that is not a directory is assumed to be the name of a variable whose value is
\par                       the directory to change to.
\par               cdspell If set, minor errors in the spelling of a directory component in a cd command will be corrected.  The errors checked for are
\par                       transposed characters, a missing character, and one character too many.  If a correction is found, the corrected  file  name
\par                       is printed, and the command proceeds.  This option is only used by interactive shells.
\par               checkhash
\par                       If  set,  bash  checks  that  a  command found in the hash table exists before trying to execute it.  If a hashed command no
\par                       longer exists, a normal path search is performed.
\par               checkwinsize
\par                       If set, bash checks the window size after each command and, if necessary, updates the values of LINES and COLUMNS.
\par               cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history entry.  This allows  easy  re-editing
\par                       of multi-line commands.
\par               dotglob If set, bash includes filenames beginning with a '.' in the results of pathname expansion.
\par               execfail
\par                       If  set,  a  non-interactive  shell will not exit if it cannot execute the file specified as an argument to the exec builtin
\par                       command.  An interactive shell does not exit if exec fails.
\par               expand_aliases
\par                       If set, aliases are expanded as described above under ALIASES.  This option is enabled by default for interactive shells.
\par               extdebug
\par                       If set, behavior intended for use by debuggers is enabled:
\par                       1.     The -F option to the declare builtin displays the source file name and line number  corresponding  to  each  function
\par                              name supplied as an argument.
\par                       2.     If the command run by the DEBUG trap returns a non-zero value, the next command is skipped and not executed.
\par                       3.     If  the command run by the DEBUG trap returns a value of 2, and the shell is executing in a subroutine (a shell func-
\par                              tion or a shell script executed by the . or source builtins), a call to return is simulated.
\par               extglob If set, the extended pattern matching features described above under Pathname Expansion are enabled.
\par               extquote
\par                       If set, $'string' and $"string" quoting is performed within $\{parameter\} expansions enclosed in double quotes.  This  option
\par                       is enabled by default.
\par               failglob
\par                       If set, patterns which fail to match filenames during pathname expansion result in an expansion error.
\par               force_fignore
\par                       If  set, the suffixes specified by the FIGNORE shell variable cause words to be ignored when performing word completion even
\par                       if the ignored words are the only possible completions.  See SHELL VARIABLES above  for  a  description  of  FIGNORE.   This
\par                       option is enabled by default.
\par               gnu_errfmt
\par                       If set, shell error messages are written in the standard GNU error message format.
\par               histappend
\par                       If  set,  the  history list is appended to the file named by the value of the HISTFILE variable when the shell exits, rather
\par                       than overwriting the file.
\par               histreedit
\par                       If set, and readline is being used, a user is given the opportunity to re-edit a failed history substitution.
\par               histverify
\par                       If set, and readline is being used, the results of history substitution are not immediately  passed  to  the  shell  parser.
\par                       Instead, the resulting line is loaded into the readline editing buffer, allowing further modification.
\par               hostcomplete
\par                       If  set,  and  readline  is being used, bash will attempt to perform hostname completion when a word containing a @ is being
\par                       completed (see Completing under READLINE above).  This is enabled by default.
\par               huponexit
\par                       If set, bash will send SIGHUP to all jobs when an interactive login shell exits.
\par               interactive_comments
\par                       If set, allow a word beginning with # to cause that word and all remaining characters on that  line  to  be  ignored  in  an
\par                       interactive shell (see COMMENTS above).  This option is enabled by default.
\par               lithist If  set,  and the cmdhist option is enabled, multi-line commands are saved to the history with embedded newlines rather than
\par                       using semicolon separators where possible.
\par               login_shell
\par                       The shell sets this option if it is started as a login shell (see INVOCATION above).  The value may not be changed.
\par               mailwarn
\par                       If set, and a file that bash is checking for mail has been accessed since the last time it was checked,  the  message  ''The
\par                       mail in mailfile has been read'' is displayed.
\par               no_empty_cmd_completion
\par                       If  set,  and  readline  is being used, bash will not attempt to search the PATH for possible completions when completion is
\par                       attempted on an empty line.
\par               nocaseglob
\par                       If set, bash matches filenames in a case-insensitive fashion when performing  pathname  expansion  (see  Pathname  Expansion
\par                       above).
\par               nullglob
\par                       If  set,  bash  allows  patterns which match no files (see Pathname Expansion above) to expand to a null string, rather than
\par                       themselves.
\par               progcomp
\par                       If set, the programmable completion facilities (see Programmable Completion above) are enabled.  This option is  enabled  by
\par                       default.
\par               promptvars
\par                       If  set,  prompt  strings  undergo  parameter expansion, command substitution, arithmetic expansion, and quote removal after
\par                       being expanded as described in PROMPTING above.  This option is enabled by default.
\par               restricted_shell
\par                       The shell sets this option if it is started in restricted mode (see RESTRICTED SHELL below).  The value may not be  changed.
\par                       This  is  not  reset  when  the startup files are executed, allowing the startup files to discover whether or not a shell is
\par                       restricted.
\par               shift_verbose
\par                       If set, the shift builtin prints an error message when the shift count exceeds the number of positional parameters.
\par               sourcepath
\par                       If set, the source (.) builtin uses the value of PATH to find the directory containing the file  supplied  as  an  argument.
\par                       This option is enabled by default.
\par               xpg_echo
\par                       If set, the echo builtin expands backslash-escape sequences by default.
\par        suspend [-f]
\par               Suspend  the  execution  of  this  shell  until it receives a SIGCONT signal.  The -f option says not to complain if this is a login
\par               shell; just suspend anyway.  The return status is 0 unless the shell is a login shell and -f is not supplied, or if job  control  is
\par               not enabled.
\par        test expr
\par        [ expr ]
\par               Return a status of 0 or 1 depending on the evaluation of the conditional expression expr.  Each operator and operand must be a sepa-
\par               rate argument.  Expressions are composed of the primaries described above under CONDITIONAL EXPRESSIONS.
\par 
\par               Expressions may be combined using the following operators, listed in decreasing order of precedence.
\par               ! expr True if expr is false.
\par               ( expr )
\par                      Returns the value of expr.  This may be used to override the normal precedence of operators.
\par               expr1 -a expr2
\par                      True if both expr1 and expr2 are true.
\par               expr1 -o expr2
\par                      True if either expr1 or expr2 is true.
\par 
\par               test and [ evaluate conditional expressions using a set of rules based on the number of arguments.
\par 
\par               0 arguments
\par                      The expression is false.
\par               1 argument
\par                      The expression is true if and only if the argument is not null.
\par               2 arguments
\par                      If the first argument is !, the expression is true if and only if the second argument is null.  If the first argument is  one
\par                      of  the  unary  conditional operators listed above under CONDITIONAL EXPRESSIONS, the expression is true if the unary test is
\par                      true.  If the first argument is not a valid unary conditional operator, the expression is false.
\par               3 arguments
\par                      If the second argument is one of the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the  result  of
\par                      the expression is the result of the binary test using the first and third arguments as operands.  If the first argument is !,
\par                      the value is the negation of the two-argument test using the second and third arguments.  If the first argument is exactly  (
\par                      and  the  third argument is exactly ), the result is the one-argument test of the second argument.  Otherwise, the expression
\par                      is false.  The -a and -o operators are considered binary operators in this case.
\par               4 arguments
\par                      If the first argument is !, the result is the negation of the three-argument expression composed of the remaining  arguments.
\par                      Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above.
\par               5 or more arguments
\par                      The expression is parsed and evaluated according to precedence using the rules listed above.
\par 
\par        times  Print the accumulated user and system times for the shell and for processes run from the shell.  The return status is 0.
\par 
\par        trap [-lp] [[arg] sigspec ...]
\par               The  command  arg  is  to  be  read and executed when the shell receives signal(s) sigspec.  If arg is absent (and there is a single
\par               sigspec) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell).  If arg  is
\par               the  null string the signal specified by each sigspec is ignored by the shell and by the commands it invokes.  If arg is not present
\par               and -p has been supplied, then the trap commands associated with each sigspec are displayed.  If no arguments  are  supplied  or  if
\par               only  -p  is given, trap prints the list of commands associated with each signal.  The -l option causes the shell to print a list of
\par               signal names and their corresponding numbers.  Each sigspec is either a signal name defined in <signal.h>, or a signal number.  Sig-
\par               nal  names  are  case insensitive and the SIG prefix is optional.  If a sigspec is EXIT (0) the command arg is executed on exit from
\par               the shell.  If a sigspec is DEBUG, the command arg is executed before every simple command, for command, case command,  select  com-
\par               mand,  every  arithmetic for command, and before the first command executes in a shell function (see SHELL GRAMMAR above).  Refer to
\par               the description of the extglob option to the shopt builtin for details of its effect on the DEBUG trap.  If a sigspec  is  ERR,  the
\par               command  arg is executed whenever a simple command has a non-zero exit status, subject to the following conditions.  The ERR trap is
\par               not executed if the failed command is part of the command list immediately following a while or until keyword, part of the  test  in
\par               an  if  statement, part of a && or || list, or if the command's return value is being inverted via !.  These are the same conditions
\par               obeyed by the errexit option.  If a sigspec is RETURN, the command arg is executed each time a shell function or a  script  executed
\par               with the . or source builtins finishes executing.  Signals ignored upon entry to the shell cannot be trapped or reset.  Trapped sig-
\par               nals are reset to their original values in a child process when it is created.  The  return  status  is  false  if  any  sigspec  is
\par               invalid; otherwise trap returns true.
\par 
\par        type [-aftpP] name [name ...]
\par               With  no  options,  indicate  how each name would be interpreted if used as a command name.  If the -t option is used, type prints a
\par               string which is one of alias, keyword, function, builtin, or file if name is an alias, shell reserved word,  function,  builtin,  or
\par               disk  file,  respectively.   If  the name is not found, then nothing is printed, and an exit status of false is returned.  If the -p
\par               option is used, type either returns the name of the disk file that would be executed if name were specified as a  command  name,  or
\par               nothing if ''type -t name'' would not return file.  The -P option forces a PATH search for each name, even if ''type -t name'' would
\par               not return file.  If a command is hashed, -p and -P print the hashed value, not necessarily the file that appears first in PATH.  If
\par               the -a option is used, type prints all of the places that contain an executable named name.  This includes aliases and functions, if
\par               and only if the -p option is not also used.  The table of hashed commands is not consulted when using -a.  The -f option  suppresses
\par               shell function lookup, as with the command builtin.  type returns true if any of the arguments are found, false if none are found.
\par 
\par        ulimit [-SHacdflmnpstuv [limit]]
\par               Provides  control over the resources available to the shell and to processes started by it, on systems that allow such control.  The
\par               -H and -S options specify that the hard or soft limit is set for the given resource.  A hard limit cannot be increased  once  it  is
\par               set;  a  soft  limit  may be increased up to the value of the hard limit.  If neither -H nor -S is specified, both the soft and hard
\par               limits are set.  The value of limit can be a number in the unit specified for the resource or one of the special values hard,  soft,
\par               or  unlimited, which stand for the current hard limit, the current soft limit, and no limit, respectively.  If limit is omitted, the
\par               current value of the soft limit of the resource is printed, unless the -H option is given.  When more than one  resource  is  speci-
\par               fied, the limit name and unit are printed before the value.  Other options are interpreted as follows:
\par               -a     All current limits are reported
\par               -c     The maximum size of core files created
\par               -d     The maximum size of a process's data segment
\par               -f     The maximum size of files created by the shell
\par               -l     The maximum size that may be locked into memory
\par               -m     The maximum resident set size
\par               -n     The maximum number of open file descriptors (most systems do not allow this value to be set)
\par               -p     The pipe size in 512-byte blocks (this may not be set)
\par               -s     The maximum stack size
\par               -t     The maximum amount of cpu time in seconds
\par               -u     The maximum number of processes available to a single user
\par               -v     The maximum amount of virtual memory available to the shell
\par 
\par               If limit is given, it is the new value of the specified resource (the -a option is display only).  If no option is given, then -f is
\par               assumed.  Values are in 1024-byte increments, except for -t, which is in seconds, -p, which is in units of 512-byte blocks,  and  -n
\par               and  -u,  which  are  unscaled  values.  The return status is 0 unless an invalid option or argument is supplied, or an error occurs
\par               while setting a new limit.
\par 
\par        umask [-p] [-S] [mode]
\par               The user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an  octal  number;  otherwise  it  is
\par               interpreted  as  a  symbolic  mode  mask similar to that accepted by chmod(1).  If mode is omitted, the current value of the mask is
\par               printed.  The -S option causes the mask to be printed in symbolic form; the default output is an octal number.  If the -p option  is
\par               supplied, and mode is omitted, the output is in a form that may be reused as input.  The return status is 0 if the mode was success-
\par               fully changed or if no mode argument was supplied, and false otherwise.
\par 
\par        unalias [-a] [name ...]
\par               Remove each name from the list of defined aliases.  If -a is supplied, all alias definitions are removed.  The return value is  true
\par               unless a supplied name is not a defined alias.
\par 
\par        unset [-fv] [name ...]
\par               For  each  name,  remove  the  corresponding variable or function.  If no options are supplied, or the -v option is given, each name
\par               refers to a shell variable.  Read-only variables may not be unset.  If -f is specifed, each name refers to a shell function, and the
\par               function  definition is removed.  Each unset variable or function is removed from the environment passed to subsequent commands.  If
\par               any of RANDOM, SECONDS, LINENO, HISTCMD, FUNCNAME, GROUPS, or DIRSTACK are unset, they lose their special properties, even  if  they
\par               are subsequently reset.  The exit status is true unless a name is readonly.
\par 
\par        wait [n]
\par               Wait  for  the  specified process and return its termination status.  n may be a process ID or a job specification; if a job spec is
\par               given, all processes in that job's pipeline are waited for.  If n is not given, all currently active child processes are waited for,
\par               and  the return status is zero.  If n specifies a non-existent process or job, the return status is 127.  Otherwise, the return sta-
\par               tus is the exit status of the last process or job waited for.
\par 
\par SEE ALSO
\par        bash(1), sh(1)
\par 
\par GNU Bash-3.0                                                        2004 Apr 20                                                   BASH_BUILTINS(1)\par}