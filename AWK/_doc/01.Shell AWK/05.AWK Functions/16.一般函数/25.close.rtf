{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red255\green0\blue0;\red0\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid529769933\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1573942533}
}
{\*\listoverridetable
{\listoverride\listid1573942533\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf4 25.close
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20\cf1 If the same file name or the same shell command is used with getlinemore than once during the execution of an awk program, the file is opened (or the command is executed) only the first time.\plain \f1\fs20  At that time, the first record of input is read from that file or command. The next time the same file or command is used in getline, another record is read from it, and so on.
\par This implies that if you want to start reading the same file again from the beginning, or if you want torerun a shell command (rather than reading more output from the command), you must take special steps. What you must do is use the close function, as follows:
\par \plain \f1\fs20\cf1 close(filename)
\par \plain \f1\fs20 or
\par \plain \f1\fs20\cf1 close(command)
\par \plain \f1\fs20 The argument filename or command can be any expression. Its value must exactly equal the string that was used to open the file or start the command--for example, if you open a pipe with this:
\par "sort -r names" | getline foo
\par then you must close it with this:
\par close("sort -r names")
\par Once this function call is executed, the next getlinefrom that file or command will reopen the file or rerun the command.
\par close returns a value of zero if the close succeeded. Otherwise, the value will be non-zero.
\par \plain \f1\fs20\cf2 ---------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf1 \uc2\u29992 \'d3\'c3\u21516 \'cd\'ac\u19968 \'d2\'bb\u20010 \'b8\'f6\u24102 \'b4\'f8\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\u20540 \'d6\'b5\u30340 \'b5\'c4 Expression \u21442 \'b2\'ce\u25968 \'ca\'fd\u26469 \'c0\'b4\u20851 \'b9\'d8\u38381 \'b1\'d5\u30001 \'d3\'c9 print \u25110 \'bb\'f2 printf \u35821 \'d3\'ef\u21477 \'be\'e4\u25171 \'b4\'f2\u24320 \'bf\'aa\u30340 \'b5\'c4\u25110 \'bb\'f2\u35843 \'b5\'f7\u29992 \'d3\'c3 getline \u20989 \'ba\'af\u25968 \'ca\'fd\u25171 \'b4\'f2\u24320 \'bf\'aa\u30340 \'b5\'c4\u25991 \'ce\'c4\u20214 \'bc\'fe\u25110 \'bb\'f2\u31649 \'b9\'dc\u36947 \'b5\'c0\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20 \uc2\u22914 \'c8\'e7\u26524 \'b9\'fb\u25991 \'ce\'c4\u20214 \'bc\'fe\u25110 \'bb\'f2\u31649 \'b9\'dc\u36947 \'b5\'c0\u25104 \'b3\'c9\u21151 \'b9\'a6\u20851 \'b9\'d8\u38381 \'b1\'d5\u65292 \'a3\'ac\u21017 \'d4\'f2\u36820 \'b7\'b5\u22238 \'bb\'d8 0\u65307 \'a3\'bb\u20854 \'c6\'e4\u23427 \'cb\'fc\u24773 \'c7\'e9\u20917 \'bf\'f6\u19979 \'cf\'c2\u36820 \'b7\'b5\u22238 \'bb\'d8\u38750 \'b7\'c7\u38646 \'c1\'e3\u20540 \'d6\'b5\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf3 \uc2\u22914 \'c8\'e7\u26524 \'b9\'fb\u25171 \'b4\'f2\u31639 \'cb\'e3\u20889 \'d0\'b4\u19968 \'d2\'bb\u20010 \'b8\'f6\u25991 \'ce\'c4\u20214 \'bc\'fe\u65292 \'a3\'ac\u24182 \'b2\'a2\u31245 \'c9\'d4\u21518 \'ba\'f3\u22312 \'d4\'da\u21516 \'cd\'ac\u19968 \'d2\'bb\u20010 \'b8\'f6\u31243 \'b3\'cc\u24207 \'d0\'f2\u20013 \'d6\'d0\u35835 \'b6\'c1\u21462 \'c8\'a1\u25991 \'ce\'c4\u20214 \'bc\'fe\u65292 \'a3\'ac\u21017 \'d4\'f2 close \u35821 \'d3\'ef\u21477 \'be\'e4\u26159 \'ca\'c7\u24517 \'b1\'d8\u38656 \'d0\'e8\u30340 \'b5\'c4\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf2 ---------------------------------------------------------------------------------------------------------------------------\par}