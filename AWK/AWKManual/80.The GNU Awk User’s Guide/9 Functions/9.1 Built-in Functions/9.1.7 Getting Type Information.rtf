{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil Times New Roman;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1304508285\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1364397429}
}
{\*\listoverridetable
{\listoverride\listid1364397429\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 9.1.7 Getting Type Information
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par 
\par \plain \f1\fs24 gawk\~provides a single function that lets you distinguish an array from a scalar variable. This is necessary for writing code that traverses every element of an array of arrays (see\~\plain \f1\ul\fs24\cf1 Arrays of Arrays\plain \f1\fs24 ).
\par {\*\bkmkstart index_isarray_0028_0029_function__0028gawk_0029}{\*\bkmkend index_isarray_0028_0029_function__0028gawk_0029}\plain \f1\b\fs24 isarray(x)
\par \plain \f1\fs24 Return a true value if\~x\~is an array. Otherwise, return false.
\par isarray()\~is meant for use in two circumstances. The first is when traversing a multidimensional array: you can test if an element is itself an array or not. The second is inside the body of a user-defined function (not discussed yet; see\~\plain \f1\ul\fs24\cf1 User-defined\plain \f1\fs24 ), to test if a parameter is an array or not.
\par \pard\li720\fi-360\jclisttab\tx720\ql\ri0\sb0\sa0\itap0 {\listtext\pard\plain\f3\fs24 \tab}\ls1\ilvl0 \plain \f1\b\fs24 NOTE:\plain \f1\fs24 \~Using\~isarray()\~at the global level to test variables makes no sense. Because you are the one writing the program, you are supposed to know if your variables are arrays or not. And in fact, due to the way\~gawk\~works, if you pass the name of a variable that has not been previously used to\~isarray(),\~gawk\~ends up turning it into a scalar.\par}