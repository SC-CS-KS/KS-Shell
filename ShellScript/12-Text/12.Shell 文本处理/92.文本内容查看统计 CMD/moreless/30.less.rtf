{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red0\green128\blue0;\red0\green128\blue128;\red255\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid1484314758\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid104453795}
}
{\*\listoverridetable
{\listoverride\listid104453795\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 30.less
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\b\fs20\cf2 less
\par \plain \f1\fs20\cf2 \uc2\u35828 \'cb\'b5\u26126 \'c3\'f7\u65306 \'a3\'ba\uc1
\par \uc2\u21407 \'d4\'ad\u20026 \'ce\'aa\u24357 \'c3\'d6\u34917 \'b2\'b9more\u19981 \'b2\'bb\u33021 \'c4\'dc\u21521 \'cf\'f2\u21069 \'c7\'b0\u32763 \'b7\'ad\u39029 \'d2\'b3\u26597 \'b2\'e9\u30475 \'bf\'b4\u35774 \'c9\'e8\u35745 \'bc\'c6\u12290 \'a1\'a3\uc1
\par \uc2\u21487 \'bf\'c9\u20197 \'d2\'d4\u20351 \'ca\'b9\u29992 \'d3\'c3 [pageup] [pagedown] \u31561 \'b5\'c8\u25353 \'b0\'b4\u38190 \'bc\'fc\u30340 \'b5\'c4\u21151 \'b9\'a6\u33021 \'c4\'dc\u26469 \'c0\'b4\u24448 \'cd\'f9\u21069 \'c7\'b0\u24448 \'cd\'f9\u21518 \'ba\'f3\u32763 \'b7\'ad\u30475 \'bf\'b4\u25991 \'ce\'c4\u20214 \'bc\'fe\u65292 \'a3\'ac\u25317 \'d3\'b5\u26377 \'d3\'d0\u26356 \'b8\'fc\u22810 \'b6\'e0\u30340 \'b5\'c4\u25628 \'cb\'d1\u32034 \'cb\'f7\u21151 \'b9\'a6\u33021 \'c4\'dc\u65292 \'a3\'acless \u22312 \'d4\'da\u26597 \'b2\'e9\u30475 \'bf\'b4\u20043 \'d6\'ae\u21069 \'c7\'b0\u19981 \'b2\'bb\u20250 \'bb\'e1\u21152 \'bc\'d3\u36733 \'d4\'d8\u25972 \'d5\'fb\u20010 \'b8\'f6\u25991 \'ce\'c4\u20214 \'bc\'fe\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf4 ------------------------------------------------------------------------\plain \f1\fs20\cf2  
\par \uc2\u23376 \'d7\'d3\u21629 \'c3\'fc\u20196 \'c1\'ee\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf1    /\uc2\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae         \u21521 \'cf\'f2\u19979 \'cf\'c2\u25628 \'cb\'d1\u32034 \'cb\'f7\ldblquote \u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\rdblquote \u30340 \'b5\'c4\u21151 \'b9\'a6\u33021 \'c4\'dc\uc1
\par    ?\uc2\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae         \u21521 \'cf\'f2\u19978 \'c9\'cf\u25628 \'cb\'d1\u32034 \'cb\'f7\ldblquote \u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\rdblquote \u30340 \'b5\'c4\u21151 \'b9\'a6\u33021 \'c4\'dc\uc1
\par \plain \f1\fs20\cf2    n               \uc2\u37325 \'d6\'d8\u22797 \'b8\'b4\u21069 \'c7\'b0\u19968 \'d2\'bb\u20010 \'b8\'f6\u25628 \'cb\'d1\u32034 \'cb\'f7\u65288 \'a3\'a8\u19982 \'d3\'eb / \u25110 \'bb\'f2 ? \u26377 \'d3\'d0\u20851 \'b9\'d8\u65289 \'a3\'a9\uc1
\par    N               \uc2\u21453 \'b7\'b4\u21521 \'cf\'f2\u37325 \'d6\'d8\u22797 \'b8\'b4\u21069 \'c7\'b0\u19968 \'d2\'bb\u20010 \'b8\'f6\u25628 \'cb\'d1\u32034 \'cb\'f7\u65288 \'a3\'a8\u19982 \'d3\'eb / \u25110 \'bb\'f2 ? \u26377 \'d3\'d0\u20851 \'b9\'d8\u65289 \'a3\'a9\uc1
\par    b               \uc2\u21521 \'cf\'f2\u21518 \'ba\'f3\u32763 \'b7\'ad\u19968 \'d2\'bb\u39029 \'d2\'b3\uc1
\par    d               \uc2\u21521 \'cf\'f2\u21518 \'ba\'f3\u32763 \'b7\'ad\u21322 \'b0\'eb\u39029 \'d2\'b3\uc1
\par    u               \uc2\u21521 \'cf\'f2\u21069 \'c7\'b0\u28378 \'b9\'f6\u21160 \'b6\'af\u21322 \'b0\'eb\u39029 \'d2\'b3\uc1
\par    h               \uc2\u26174 \'cf\'d4\u31034 \'ca\'be\u24110 \'b0\'ef\u21161 \'d6\'fa\u30028 \'bd\'e7\u38754 \'c3\'e6\uc1
\par    Q               \uc2\u36864 \'cd\'cb\u20986 \'b3\'f6less \u21629 \'c3\'fc\u20196 \'c1\'ee\uc1
\par    y               \uc2\u21521 \'cf\'f2\u21069 \'c7\'b0\u28378 \'b9\'f6\u21160 \'b6\'af\u19968 \'d2\'bb\u34892 \'d0\'d0\uc1
\par    \uc2\u31354 \'bf\'d5\u26684 \'b8\'f1\u38190 \'bc\'fc          \u28378 \'b9\'f6\u21160 \'b6\'af\u19968 \'d2\'bb\u39029 \'d2\'b3\uc1
\par    \uc2\u22238 \'bb\'d8\u36710 \'b3\'b5\u38190 \'bc\'fc          \u28378 \'b9\'f6\u21160 \'b6\'af\u19968 \'d2\'bb\u34892 \'d0\'d0\uc1
\par    [pagedown]      \uc2\u21521 \'cf\'f2\u19979 \'cf\'c2\u32763 \'b7\'ad\u21160 \'b6\'af\u19968 \'d2\'bb\u39029 \'d2\'b3\uc1
\par    [pageup]        \uc2\u21521 \'cf\'f2\u19978 \'c9\'cf\u32763 \'b7\'ad\u21160 \'b6\'af\u19968 \'d2\'bb\u39029 \'d2\'b3\uc1
\par \plain \f1\fs20\cf4 ------------------------------------------------------------------------
\par \plain \f1\fs20\cf1 \uc2\u21442 \'b2\'ce\u25968 \'ca\'fd\u65306 \'a3\'ba\uc1
\par    -b              <\uc2\u32531 \'bb\'ba\u20914 \'b3\'e5\u21306 \'c7\'f8\u22823 \'b4\'f3\u23567 \'d0\'a1> \u35774 \'c9\'e8\u32622 \'d6\'c3\u32531 \'bb\'ba\u20914 \'b3\'e5\u21306 \'c7\'f8\u30340 \'b5\'c4\u22823 \'b4\'f3\u23567 \'d0\'a1\uc1
\par    -e              \uc2\u24403 \'b5\'b1\u25991 \'ce\'c4\u20214 \'bc\'fe\u26174 \'cf\'d4\u31034 \'ca\'be\u32467 \'bd\'e1\u26463 \'ca\'f8\u21518 \'ba\'f3\u65292 \'a3\'ac\u33258 \'d7\'d4\u21160 \'b6\'af\u31163 \'c0\'eb\u24320 \'bf\'aa\uc1
\par    -f              \uc2\u24378 \'c7\'bf\u36843 \'c6\'c8\u25171 \'b4\'f2\u24320 \'bf\'aa\u29305 \'cc\'d8\u27530 \'ca\'e2\u25991 \'ce\'c4\u20214 \'bc\'fe\u65292 \'a3\'ac\u20363 \'c0\'fd\u22914 \'c8\'e7\u22806 \'cd\'e2\u22260 \'ce\'a7\u35774 \'c9\'e8\u22791 \'b1\'b8\u20195 \'b4\'fa\u21495 \'ba\'c5\u12289 \'a1\'a2\u30446 \'c4\'bf\u24405 \'c2\'bc\u21644 \'ba\'cd\u20108 \'b6\'fe\u36827 \'bd\'f8\u21046 \'d6\'c6\u25991 \'ce\'c4\u20214 \'bc\'fe\uc1
\par \plain \f1\fs20\cf2    -g       \plain \f1\fs20\cf1        \plain \f1\fs20\cf2 \uc2\u21482 \'d6\'bb\u26631 \'b1\'ea\u24535 \'d6\'be\u26368 \'d7\'ee\u21518 \'ba\'f3\u25628 \'cb\'d1\u32034 \'cb\'f7\u30340 \'b5\'c4\u20851 \'b9\'d8\u38190 \'bc\'fc\u35789 \'b4\'ca\uc1
\par \plain \f1\fs20\cf5    -i       \plain \f1\fs20\cf1        \plain \f1\fs20\cf5 \uc2\u24573 \'ba\'f6\u30053 \'c2\'d4\u25628 \'cb\'d1\u32034 \'cb\'f7\u26102 \'ca\'b1\u30340 \'b5\'c4\u22823 \'b4\'f3\u23567 \'d0\'a1\u20889 \'d0\'b4\uc1
\par \plain \f1\fs20\cf2    -m       \plain \f1\fs20\cf1        \plain \f1\fs20\cf2 \uc2\u26174 \'cf\'d4\u31034 \'ca\'be\u31867 \'c0\'e0\u20284 \'cb\'c6more\u21629 \'c3\'fc\u20196 \'c1\'ee\u30340 \'b5\'c4\u30334 \'b0\'d9\u20998 \'b7\'d6\u27604 \'b1\'c8\uc1
\par \plain \f1\fs20\cf5    -N       \plain \f1\fs20\cf1        \plain \f1\fs20\cf5 \uc2\u26174 \'cf\'d4\u31034 \'ca\'be\u27599 \'c3\'bf\u34892 \'d0\'d0\u30340 \'b5\'c4\u34892 \'d0\'d0\u21495 \'ba\'c5\uc1
\par \plain \f1\fs20\cf2    -o       \plain \f1\fs20\cf1        \plain \f1\fs20\cf2 <\uc2\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb> \u23558 \'bd\'abless \u36755 \'ca\'e4\u20986 \'b3\'f6\u30340 \'b5\'c4\u20869 \'c4\'da\u23481 \'c8\'dd\u22312 \'d4\'da\u25351 \'d6\'b8\u23450 \'b6\'a8\u25991 \'ce\'c4\u20214 \'bc\'fe\u20013 \'d6\'d0\u20445 \'b1\'a3\u23384 \'b4\'e6\u36215 \'c6\'f0\u26469 \'c0\'b4\uc1
\par    -Q       \plain \f1\fs20\cf1        \plain \f1\fs20\cf2 \uc2\u19981 \'b2\'bb\u20351 \'ca\'b9\u29992 \'d3\'c3\u35686 \'be\'af\u21578 \'b8\'e6\u38899 \'d2\'f4\uc1
\par \plain \f1\fs20\cf1    -s              \uc2\u26174 \'cf\'d4\u31034 \'ca\'be\u36830 \'c1\'ac\u32493 \'d0\'f8\u31354 \'bf\'d5\u34892 \'d0\'d0\u20026 \'ce\'aa\u19968 \'d2\'bb\u34892 \'d0\'d0\uc1
\par    -S              \uc2\u34892 \'d0\'d0\u36807 \'b9\'fd\u38271 \'b3\'a4\u26102 \'ca\'b1\u23558 \'bd\'ab\u36229 \'b3\'ac\u20986 \'b3\'f6\u37096 \'b2\'bf\u20998 \'b7\'d6\u33293 \'c9\'e1\u24323 \'c6\'fa\uc1
\par \plain \f1\fs20\cf2    -x <\uc2\u25968 \'ca\'fd\u23383 \'d7\'d6>       \uc1\plain \f1\fs20\cf1 \uc2\u23558 \'bd\'ab\ldblquote tab\rdblquote \u38190 \'bc\'fc\u26174 \'cf\'d4\u31034 \'ca\'be\u20026 \'ce\'aa\u35268 \'b9\'e6\u23450 \'b6\'a8\u30340 \'b5\'c4\u25968 \'ca\'fd\u23383 \'d7\'d6\u31354 \'bf\'d5\u26684 \'b8\'f1\uc1
\par \plain \f1\fs20\cf4 ------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf-1 LESS(1)                                                                LESS(1)
\par 
\par NAME
\par        less - opposite of more
\par 
\par SYNOPSIS
\par        less -?
\par        less --help
\par        less -V
\par        less --version
\par        less [-[+]aBcCdeEfFgGiIJKLmMnNqQrRsSuUVwWX~]
\par             [-b space] [-h lines] [-j line] [-k keyfile]
\par             [-\{oO\} logfile] [-p pattern] [-P prompt] [-t tag]
\par             [-T tagsfile] [-x tab,...] [-y lines] [-[z] lines]
\par             [-# shift] [+[+]cmd] [--] [filename]...
\par        (See the OPTIONS section for alternate option syntax with long option names.)
\par 
\par DESCRIPTION
\par        Less  is  a  program similar to more (1), but which allows backward movement in the file as well as forward move-
\par        ment.  Also, less does not have to read the entire input file before starting,  so  with  large  input  files  it
\par        starts  up  faster than text editors like vi (1).  Less uses termcap (or terminfo on some systems), so it can run
\par        on a variety of terminals.  There is even limited support for hardcopy terminals.  (On a hardcopy terminal, lines
\par        which should be printed at the top of the screen are prefixed with a caret.)
\par 
\par        Commands  are  based on both more and vi.  Commands may be preceded by a decimal number, called N in the descrip-
\par        tions below.  The number is used by some commands, as indicated.
\par 
\par COMMANDS
\par        In the following descriptions, ^X means control-X.  ESC stands for the ESCAPE key; for example  ESC-v  means  the
\par        two character sequence "ESCAPE", then "v".
\par 
\par        h or H Help: display a summary of these commands.  If you forget all the other commands, remember this one.
\par 
\par        SPACE or ^V or f or ^F
\par               Scroll forward N lines, default one window (see option -z below).  If N is more than the screen size, only
\par               the final screenful is displayed.  Warning: some systems use ^V as a special literalization character.
\par 
\par        z      Like SPACE, but if N is specified, it becomes the new window size.
\par 
\par        ESC-SPACE
\par               Like SPACE, but scrolls a full screenful, even if it reaches end-of-file in the process.
\par 
\par        RETURN or ^N or e or ^E or j or ^J
\par               Scroll forward N lines, default 1.  The entire N lines are displayed, even if N is more  than  the  screen
\par               size.
\par 
\par        d or ^D
\par               Scroll  forward  N  lines,  default  one  half  of the screen size.  If N is specified, it becomes the new
\par               default for subsequent d and u commands.
\par 
\par        b or ^B or ESC-v
\par               Scroll backward N lines, default one window (see option -z below).  If N is more  than  the  screen  size,
\par               only the final screenful is displayed.
\par 
\par        w      Like ESC-v, but if N is specified, it becomes the new window size.
\par 
\par        y or ^Y or ^P or k or ^K
\par               Scroll  backward  N lines, default 1.  The entire N lines are displayed, even if N is more than the screen
\par               size.  Warning: some systems use ^Y as a special job control character.
\par 
\par        u or ^U
\par               Scroll backward N lines, default one half of the screen size.  If N  is  specified,  it  becomes  the  new
\par               default for subsequent d and u commands.
\par 
\par        ESC-) or RIGHTARROW
\par               Scroll  horizontally right N characters, default half the screen width (see the -# option).  If a number N
\par               is specified, it becomes the default for future RIGHTARROW and LEFTARROW  commands.   While  the  text  is
\par               scrolled, it acts as though the -S option (chop lines) were in effect.
\par 
\par        ESC-( or LEFTARROW
\par               Scroll  horizontally  left N characters, default half the screen width (see the -# option).  If a number N
\par               is specified, it becomes the default for future RIGHTARROW and LEFTARROW commands.
\par 
\par        r or ^R or ^L
\par               Repaint the screen.
\par 
\par        R      Repaint the screen, discarding any buffered input.  Useful if the file  is  changing  while  it  is  being
\par               viewed.
\par 
\par        F      Scroll  forward,  and keep trying to read when the end of file is reached.  Normally this command would be
\par               used when already at the end of the file.  It is a way to monitor the tail of  a  file  which  is  growing
\par               while it is being viewed.  (The behavior is similar to the "tail -f" command.)
\par 
\par        g or < or ESC-<
\par               Go to line N in the file, default 1 (beginning of file).  (Warning: this may be slow if N is large.)
\par 
\par        G or > or ESC->
\par               Go  to line N in the file, default the end of the file.  (Warning: this may be slow if N is large, or if N
\par               is not specified and standard input, rather than a file, is being read.)
\par 
\par        p or % Go to a position N percent into the file.  N should be between 0 and 100, and may contain a decimal point.
\par 
\par        P      Go to the line containing byte offset N in the file.
\par 
\par        \{      If  a  left  curly  bracket  appears in the top line displayed on the screen, the \{ command will go to the
\par               matching right curly bracket.  The matching right curly bracket is positioned on the bottom  line  of  the
\par               screen.   If  there is more than one left curly bracket on the top line, a number N may be used to specify
\par               the N-th bracket on the line.
\par 
\par        \}      If a right curly bracket appears in the bottom line displayed on the screen, the \} command will go to  the
\par               matching left curly bracket.  The matching left curly bracket is positioned on the top line of the screen.
\par               If there is more than one right curly bracket on the top line, a number N may be used to specify the  N-th
\par               bracket on the line.
\par 
\par        (      Like \{, but applies to parentheses rather than curly brackets.
\par 
\par        )      Like \}, but applies to parentheses rather than curly brackets.
\par 
\par        [      Like \{, but applies to square brackets rather than curly brackets.
\par 
\par        ]      Like \}, but applies to square brackets rather than curly brackets.
\par 
\par        ESC-^F Followed  by  two characters, acts like \{, but uses the two characters as open and close brackets, respec-
\par               tively.  For example, "ESC ^F < >" could be used to go forward to the > which matches the  <  in  the  top
\par               displayed line.
\par 
\par        ESC-^B Followed  by  two characters, acts like \}, but uses the two characters as open and close brackets, respec-
\par               tively.  For example, "ESC ^B < >" could be used to go backward to the < which matches the > in the bottom
\par               displayed line.
\par 
\par        m      Followed by any lowercase letter, marks the current position with that letter.
\par 
\par        \rquote       (Single  quote.)   Followed  by  any lowercase letter, returns to the position which was previously marked
\par               with that letter.  Followed by another single quote, returns to the position at  which  the  last  "large"
\par               movement  command  was  executed.  Followed by a ^ or $, jumps to the beginning or end of the file respec-
\par               tively.  Marks are preserved when a new file is examined, so the \rquote  command can be used to  switch  between
\par               input files.
\par 
\par        ^X^X   Same as single quote.
\par 
\par        /pattern
\par               Search  forward  in the file for the N-th line containing the pattern.  N defaults to 1.  The pattern is a
\par               regular expression, as recognized by the regular expression library supplied by your system.   The  search
\par               starts at the second line displayed (but see the -a and -j options, which change this).
\par 
\par               Certain  characters are special if entered at the beginning of the pattern; they modify the type of search
\par               rather than become part of the pattern:
\par 
\par               ^N or !
\par                      Search for lines which do NOT match the pattern.
\par 
\par               ^E or *
\par                      Search multiple files.  That is, if the search reaches the END of the current file without  finding
\par                      a match, the search continues in the next file in the command line list.
\par 
\par               ^F or @
\par                      Begin  the  search at the first line of the FIRST file in the command line list, regardless of what
\par                      is currently displayed on the screen or the settings of the -a or -j options.
\par 
\par               ^K     Highlight any text which matches the pattern on the current screen, but don\rquote t  move  to  the  first
\par                      match (KEEP current position).
\par 
\par               ^R     Don\rquote t interpret regular expression metacharacters; that is, do a simple textual comparison.
\par 
\par        ?pattern
\par               Search backward in the file for the N-th line containing the pattern.  The search starts at the line imme-
\par               diately before the top line displayed.
\par 
\par               Certain characters are special as in the / command:
\par 
\par               ^N or !
\par                      Search for lines which do NOT match the pattern.
\par 
\par               ^E or *
\par                      Search multiple files.  That is, if the search reaches the beginning of the  current  file  without
\par                      finding a match, the search continues in the previous file in the command line list.
\par 
\par               ^F or @
\par                      Begin  the search at the last line of the last file in the command line list, regardless of what is
\par                      currently displayed on the screen or the settings of the -a or -j options.
\par 
\par               ^K     As in forward searches.
\par 
\par               ^R     As in forward searches.
\par 
\par        ESC-/pattern
\par               Same as "/*".
\par 
\par        ESC-?pattern
\par               Same as "?*".
\par 
\par        n      Repeat previous search, for N-th line containing the last pattern.  If the previous search was modified by
\par               ^N,  the search is made for the N-th line NOT containing the pattern.  If the previous search was modified
\par               by ^E, the search continues in the next (or previous) file if not satisfied in the current file.   If  the
\par               previous  search  was  modified  by ^R, the search is done without using regular expressions.  There is no
\par               effect if the previous search was modified by ^F or ^K.
\par 
\par        N      Repeat previous search, but in the reverse direction.
\par 
\par        ESC-n  Repeat previous search, but crossing file boundaries.  The effect is as if the previous search were  modi-
\par               fied by *.
\par 
\par        ESC-N  Repeat previous search, but in the reverse direction and crossing file boundaries.
\par 
\par        ESC-u  Undo search highlighting.  Turn off highlighting of strings matching the current search pattern.  If high-
\par               lighting is already off because of a previous ESC-u command, turn highlighting back on.  Any  search  com-
\par               mand  will  also turn highlighting back on.  (Highlighting can also be disabled by toggling the -G option;
\par               in that case search commands do not turn highlighting back on.)
\par 
\par        &pattern
\par               Display only lines which match the pattern; lines which do not match the pattern are  not  displayed.   If
\par               pattern is empty (if you type & immediately followed by ENTER), any filtering is turned off, and all lines
\par               are displayed.  While filtering is in effect, an ampersand is displayed at the beginning of the prompt, as
\par               a reminder that some lines in the file may be hidden.
\par 
\par               Certain characters are special as in the / command:
\par 
\par               ^N or !
\par                      Display only lines which do NOT match the pattern.
\par 
\par               ^R     Don\rquote t interpret regular expression metacharacters; that is, do a simple textual comparison.
\par 
\par        :e [filename]
\par               Examine  a  new  file.   If the filename is missing, the "current" file (see the :n and :p commands below)
\par               from the list of files in the command line is re-examined.  A percent sign (%) in the filename is replaced
\par               by  the  name  of  the  current file.  A pound sign (#) is replaced by the name of the previously examined
\par               file.  However, two consecutive percent signs are simply replaced with a single percent sign.  This allows
\par               you  to enter a filename that contains a percent sign in the name.  Similarly, two consecutive pound signs
\par               are replaced with a single pound sign.  The filename is inserted into the command line list  of  files  so
\par               that it can be seen by subsequent :n and :p commands.  If the filename consists of several files, they are
\par               all inserted into the list of files and the first one is examined.  If the filename contains one  or  more
\par               spaces, the entire filename should be enclosed in double quotes (also see the -" option).
\par 
\par        ^X^V or E
\par               Same as :e.  Warning: some systems use ^V as a special literalization character.  On such systems, you may
\par               not be able to use ^V.
\par 
\par        :n     Examine the next file (from the list of files given in the command line).  If a number N is specified, the
\par               N-th next file is examined.
\par 
\par        :p     Examine the previous file in the command line list.  If a number N is specified, the N-th previous file is
\par               examined.
\par 
\par        :x     Examine the first file in the command line list.  If a number N is specified, the N-th file in the list is
\par               examined.
\par 
\par        :d     Remove the current file from the list of files.
\par 
\par        t      Go  to  the next tag, if there were more than one matches for the current tag.  See the -t option for more
\par               details about tags.
\par 
\par        T      Go to the previous tag, if there were more than one matches for the current tag.
\par 
\par        = or ^G or :f
\par               Prints some information about the file being viewed, including its name and the line number and byte  off-
\par               set of the bottom line being displayed.  If possible, it also prints the length of the file, the number of
\par               lines in the file and the percent of the file above the last displayed line.
\par 
\par        -      Followed by one of the command line option letters (see OPTIONS below), this will change  the  setting  of
\par               that  option  and  print a message describing the new setting.  If a ^P (CONTROL-P) is entered immediately
\par               after the dash, the setting of the option is changed but no message is printed.  If the option letter  has
\par               a numeric value (such as -b or -h), or a string value (such as -P or -t), a new value may be entered after
\par               the option letter.  If no new value is entered, a message describing the current setting  is  printed  and
\par               nothing is changed.
\par 
\par        --     Like  the  - command, but takes a long option name (see OPTIONS below) rather than a single option letter.
\par               You must press RETURN after typing the option name.  A ^P immediately after  the  second  dash  suppresses
\par               printing of a message describing the new setting, as in the - command.
\par 
\par        -+     Followed  by  one of the command line option letters this will reset the option to its default setting and
\par               print a message describing the new setting.  (The "-+X" command does the same thing as "-+X" on  the  com-
\par               mand line.)  This does not work for string-valued options.
\par 
\par        --+    Like the -+ command, but takes a long option name rather than a single option letter.
\par 
\par        -!     Followed  by  one  of the command line option letters, this will reset the option to the "opposite" of its
\par               default setting and print a message describing the new setting.  This does not work for numeric or string-
\par               valued options.
\par 
\par        --!    Like the -! command, but takes a long option name rather than a single option letter.
\par 
\par        _      (Underscore.)   Followed  by  one of the command line option letters, this will print a message describing
\par               the current setting of that option.  The setting of the option is not changed.
\par 
\par        __     (Double underscore.)  Like the _ (underscore) command, but takes a long option name rather than  a  single
\par               option letter.  You must press RETURN after typing the option name.
\par 
\par        +cmd   Causes  the specified cmd to be executed each time a new file is examined.  For example, +G causes less to
\par               initially display each file starting at the end rather than the beginning.
\par 
\par        V      Prints the version number of less being run.
\par 
\par        q or Q or :q or :Q or ZZ
\par               Exits less.
\par 
\par        The following four commands may or may not be valid, depending on your particular installation.
\par 
\par        v      Invokes an editor to edit the current file being viewed.  The editor is taken from the  environment  vari-
\par               able VISUAL if defined, or EDITOR if VISUAL is not defined, or defaults to "vi" if neither VISUAL nor EDI-
\par               TOR is defined.  See also the discussion of LESSEDIT under the section on PROMPTS below.
\par 
\par        ! shell-command
\par               Invokes a shell to run the shell-command given.  A percent sign (%) in the command is replaced by the name
\par               of  the  current  file.   A  pound sign (#) is replaced by the name of the previously examined file.  "!!"
\par               repeats the last shell command.  "!" with no shell command simply invokes a shell.  On Unix  systems,  the
\par               shell  is taken from the environment variable SHELL, or defaults to "sh".  On MS-DOS and OS/2 systems, the
\par               shell is the normal command processor.
\par 
\par        | <m> shell-command
\par               <m> represents any mark letter.  Pipes a section of the input file to the given shell command.   The  sec-
\par               tion  of  the  file to be piped is between the first line on the current screen and the position marked by
\par               the letter.  <m> may also be ^ or $ to indicate beginning or end of file respectively.  If  <m>  is  .  or
\par               newline, the current screen is piped.
\par 
\par        s filename
\par               Save the input to a file.  This only works if the input is a pipe, not an ordinary file.
\par 
\par OPTIONS
\par        Command  line  options  are described below.  Most options may be changed while less is running, via the "-" com-
\par        mand.
\par 
\par        Most options may be given in one of two forms: either a dash followed by a single letter, or two dashes  followed
\par        by  a  long  option name.  A long option name may be abbreviated as long as the abbreviation is unambiguous.  For
\par        example, --quit-at-eof may be abbreviated --quit, but not --qui, since both --quit-at-eof and --quiet begin  with
\par        --qui.   Some  long  option  names are in uppercase, such as --QUIT-AT-EOF, as distinct from --quit-at-eof.  Such
\par        option names need only have their first letter capitalized; the remainder of the name may be in either case.  For
\par        example, --Quit-at-eof is equivalent to --QUIT-AT-EOF.
\par 
\par        Options  are  also  taken from the environment variable "LESS".  For example, to avoid typing "less -options ..."
\par        each time less is invoked, you might tell csh:
\par 
\par        setenv LESS "-options"
\par 
\par        or if you use sh:
\par 
\par        LESS="-options"; export LESS
\par 
\par        On MS-DOS, you don\rquote t need the quotes, but you should replace any percent signs in the options  string  by  double
\par        percent signs.
\par 
\par        The environment variable is parsed before the command line, so command line options override the LESS environment
\par        variable.  If an option appears in the LESS variable, it can be reset to its default value on the command line by
\par        beginning the command line option with "-+".
\par 
\par        For  options like -P or -D which take a following string, a dollar sign ($) must be used to signal the end of the
\par        string.  For example, to set two -D options on MS-DOS, you must have a dollar sign between them, like this:
\par 
\par        LESS="-Dn9.1$-Ds4.1"
\par 
\par        -? or --help
\par               This option displays a summary of the commands accepted by less (the same as the h  command).   (Depending
\par               on  how  your  shell  interprets  the question mark, it may be necessary to quote the question mark, thus:
\par               "-\\?".)
\par 
\par        -a or --search-skip-screen
\par               Causes searches to start after the last line displayed on the screen, thus skipping all lines displayed on
\par               the  screen.   By  default, searches start at the second line on the screen (or after the last found line;
\par               see the -j option).
\par 
\par        -bn or --buffers=n
\par               Specifies the amount of buffer space less will use for each file, in units of kilobytes (1024 bytes).   By
\par               default  64K of buffer space is used for each file (unless the file is a pipe; see the -B option).  The -b
\par               option specifies instead that n kilobytes of buffer space should be used for  each  file.   If  n  is  -1,
\par               buffer space is unlimited; that is, the entire file can be read into memory.
\par 
\par        -B or --auto-buffers
\par               By  default,  when  data  is  read from a pipe, buffers are allocated automatically as needed.  If a large
\par               amount of data is read from the pipe, this can cause a large amount of memory to  be  allocated.   The  -B
\par               option  disables  this automatic allocation of buffers for pipes, so that only 64K (or the amount of space
\par               specified by the -b option) is used for the pipe.  Warning: use of -B can  result  in  erroneous  display,
\par               since only the most recently viewed part of the piped data is kept in memory; any earlier data is lost.
\par 
\par        -c or --clear-screen
\par               Causes  full  screen  repaints to be painted from the top line down.  By default, full screen repaints are
\par               done by scrolling from the bottom of the screen.
\par 
\par        -C or --CLEAR-SCREEN
\par               Same as -c, for compatibility with older versions of less.
\par 
\par        -d or --dumb
\par               The -d option suppresses the error message normally displayed if the terminal is dumb; that is, lacks some
\par               important  capability, such as the ability to clear the screen or scroll backward.  The -d option does not
\par               otherwise change the behavior of less on a dumb terminal.
\par 
\par        -Dxcolor or --color=xcolor
\par               [MS-DOS only] Sets the color of the text displayed.  x is a single character which  selects  the  type  of
\par               text  whose  color  is being set: n=normal, s=standout, d=bold, u=underlined, k=blink.  color is a pair of
\par               numbers separated by a period.  The first number selects the foreground color and the second  selects  the
\par               background  color  of  the  text.   A single number N is the same as N.M, where M is the normal background
\par               color.
\par 
\par        -e or --quit-at-eof
\par               Causes less to automatically exit the second time it reaches end-of-file.  By default,  the  only  way  to
\par               exit less is via the "q" command.
\par 
\par        -E or --QUIT-AT-EOF
\par               Causes less to automatically exit the first time it reaches end-of-file.
\par 
\par        -f or --force
\par               Forces  non-regular  files  to  be  opened.  (A non-regular file is a directory or a device special file.)
\par               Also suppresses the warning message when a binary file is opened.  By default, less will  refuse  to  open
\par               non-regular  files.  Note that some operating systems will not allow directories to be read, even if -f is
\par               set.
\par 
\par        -F or --quit-if-one-screen
\par               Causes less to automatically exit if the entire file can be displayed on the first screen.
\par 
\par        -g or --hilite-search
\par               Normally, less will highlight ALL strings which match the last search command.  The -g option changes this
\par               behavior  to  highlight  only  the particular string which was found by the last search command.  This can
\par               cause less to run somewhat faster than the default.
\par 
\par        -G or --HILITE-SEARCH
\par               The -G option suppresses all highlighting of strings found by search commands.
\par 
\par        --old-bot
\par               Reverts to the old bottom of screen behavior.  This can be sometimes desirable  if  the   long  lines  are
\par               not wrapped  correctly when  reaching  the  bottom  of  the  terminal,  while scrolling forward.
\par 
\par        -hn or --max-back-scroll=n
\par               Specifies a maximum number of lines to scroll backward.  If it is necessary to scroll backward more than n
\par               lines, the screen is repainted in a forward direction instead.  (If the terminal does not have the ability
\par               to scroll backward, -h0 is implied.)
\par 
\par        -i or --ignore-case
\par               Causes searches to ignore case; that is, uppercase and lowercase are considered identical.  This option is
\par               ignored if any uppercase letters appear in the search pattern; in  other  words,  if  a  pattern  contains
\par               uppercase letters, then that search does not ignore case.
\par 
\par        -I or --IGNORE-CASE
\par               Like -i, but searches ignore case even if the pattern contains uppercase letters.
\par 
\par        -jn or --jump-target=n
\par               Specifies  a  line on the screen where the "target" line is to be positioned.  The target line is the line
\par               specified by any command to search for a pattern, jump to a line number, jump to a file percentage or jump
\par               to  a  tag.  The screen line may be specified by a number: the top line on the screen is 1, the next is 2,
\par               and so on.  The number may be negative to specify a line relative to the bottom of the screen: the  bottom
\par               line  on the screen is -1, the second to the bottom is -2, and so on.  Alternately, the screen line may be
\par               specified as a fraction of the height of the screen, starting with a decimal point: .5 is in the middle of
\par               the  screen,  .3 is three tenths down from the first line, and so on.  If the line is specified as a frac-
\par               tion, the actual line number is recalculated if the terminal window is resized, so that  the  target  line
\par               remains  at  the  specified  fraction of the screen height.  If any form of the -j option is used, forward
\par               searches begin at the line immediately after the target line, and backward searches begin  at  the  target
\par               line.   For  example,  if  "-j4"  is  used,  the  target line is the fourth line on the screen, so forward
\par               searches begin at the fifth line on the screen.
\par 
\par        -J or --status-column
\par               Displays a status column at the left edge of the screen.  The status column shows the lines  that  matched
\par               the current search.  The status column is also used if the -w or -W option is in effect.
\par 
\par        -kfilename or --lesskey-file=filename
\par               Causes less to open and interpret the named file as a lesskey (1) file.  Multiple -k options may be speci-
\par               fied.  If the LESSKEY or LESSKEY_SYSTEM environment variable is set, or if a lesskey file is  found  in  a
\par               standard place (see KEY BINDINGS), it is also used as a lesskey file.
\par 
\par        -K or --quit-on-intr
\par               Causes less to exit immediately when an interrupt character (usually ^C) is typed.  Normally, an interrupt
\par               character causes less to stop whatever it is doing and return to its command prompt.   Note  that  use  of
\par               this option makes it impossible to return to the command prompt from the "F" command.
\par 
\par        -L or --no-lessopen
\par               Ignore  the  LESSOPEN environment variable (see the INPUT PREPROCESSOR section below).  This option can be
\par               set from within less, but it will apply only to files opened subsequently, not to the file which  is  cur-
\par               rently open.
\par 
\par        -m or --long-prompt
\par               Causes  less  to  prompt  verbosely (like more), with the percent into the file.  By default, less prompts
\par               with a colon.
\par 
\par        -M or --LONG-PROMPT
\par               Causes less to prompt even more verbosely than more.
\par 
\par        -n or --line-numbers
\par               Suppresses line numbers.  The default (to use line numbers) may cause less to  run  more  slowly  in  some
\par               cases,  especially  with  a very large input file.  Suppressing line numbers with the -n option will avoid
\par               this problem.  Using line numbers means: the line number will be displayed in the verbose  prompt  and  in
\par               the  = command, and the v command will pass the current line number to the editor (see also the discussion
\par               of LESSEDIT in PROMPTS below).
\par 
\par        -N or --LINE-NUMBERS
\par               Causes a line number to be displayed at the beginning of each line in the display.
\par 
\par        -ofilename or --log-file=filename
\par               Causes less to copy its input to the named file as it is being viewed.  This applies only when  the  input
\par               file  is  a pipe, not an ordinary file.  If the file already exists, less will ask for confirmation before
\par               overwriting it.
\par 
\par        -Ofilename or --LOG-FILE=filename
\par               The -O option is like -o, but it will overwrite an existing file without asking for confirmation.
\par 
\par               If no log file has been specified, the -o and -O options can be used from within less  to  specify  a  log
\par               file.   Without a file name, they will simply report the name of the log file.  The "s" command is equiva-
\par               lent to specifying -o from within less.
\par 
\par        -ppattern or --pattern=pattern
\par               The -p option on the command line is equivalent to specifying +/pattern; that is, it tells less  to  start
\par               at the first occurrence of pattern in the file.
\par 
\par        -Pprompt or --prompt=prompt
\par               Provides  a  way  to tailor the three prompt styles to your own preference.  This option would normally be
\par               put in the LESS environment variable, rather than being typed in with each less command.  Such  an  option
\par               must either be the last option in the LESS variable, or be terminated by a dollar sign.  -Ps followed by a
\par               string changes the default (short) prompt to that string.   -Pm  changes  the  medium  (-m)  prompt.   -PM
\par               changes  the  long  (-M)  prompt.   -Ph  changes  the prompt for the help screen.  -P= changes the message
\par               printed by the = command.  -Pw changes the message printed while waiting for data (in the F command).  All
\par               prompt  strings consist of a sequence of letters and special escape sequences.  See the section on PROMPTS
\par               for more details.
\par 
\par        -q or --quiet or --silent
\par               Causes moderately "quiet" operation: the terminal bell is not rung if an attempt is made  to  scroll  past
\par               the  end of the file or before the beginning of the file.  If the terminal has a "visual bell", it is used
\par               instead.  The bell will be rung on certain other errors, such as typing an invalid character.  The default
\par               is to ring the terminal bell in all such cases.
\par 
\par        -Q or --QUIET or --SILENT
\par               Causes totally "quiet" operation: the terminal bell is never rung.
\par 
\par        -r or --raw-control-chars
\par               Causes  "raw"  control characters to be displayed.  The default is to display control characters using the
\par               caret notation; for example, a control-A (octal 001) is displayed as "^A".  Warning: when the -r option is
\par               used,  less cannot keep track of the actual appearance of the screen (since this depends on how the screen
\par               responds to each type of control character).  Thus, various display problems  may  result,  such  as  long
\par               lines being split in the wrong place.
\par 
\par        -R or --RAW-CONTROL-CHARS
\par               Like  -r,  but only ANSI "color" escape sequences are output in "raw" form.  Unlike -r, the screen appear-
\par               ance is maintained correctly in most cases.  ANSI "color" escape sequences are sequences of the form:
\par 
\par                    ESC [ ... m
\par 
\par               where the "..." is zero or more color specification characters For the purpose of keeping track of  screen
\par               appearance,  ANSI color escape sequences are assumed to not move the cursor.  You can make less think that
\par               characters other than "m" can end ANSI color escape sequences by setting the environment variable  LESSAN-
\par               SIENDCHARS  to  the list of characters which can end a color escape sequence.  And you can make less think
\par               that characters other than the standard ones may appear between the ESC and the m by setting the  environ-
\par               ment variable LESSANSIMIDCHARS to the list of characters which can appear.
\par 
\par        -s or --squeeze-blank-lines
\par               Causes consecutive blank lines to be squeezed into a single blank line.  This is useful when viewing nroff
\par               output.
\par 
\par        -S or --chop-long-lines
\par               Causes lines longer than the screen width to be chopped rather than folded.  That is,  the  portion  of  a
\par               long line that does not fit in the screen width is not shown.  The default is to fold long lines; that is,
\par               display the remainder on the next line.
\par 
\par        -ttag or --tag=tag
\par               The -t option, followed immediately by a TAG, will edit the file containing that tag.  For this  to  work,
\par               tag  information  must  be  available;  for  example,  there may be a file in the current directory called
\par               "tags", which was previously built by ctags (1) or an equivalent command.   If  the  environment  variable
\par               LESSGLOBALTAGS  is  set, it is taken to be the name of a command compatible with global (1), and that com-
\par               mand is executed to find the tag.  (See http://www.gnu.org/software/global/global.html).   The  -t  option
\par               may  also  be specified from within less (using the - command) as a way of examining a new file.  The com-
\par               mand ":t" is equivalent to specifying -t from within less.
\par 
\par        -Ttagsfile or --tag-file=tagsfile
\par               Specifies a tags file to be used instead of "tags".
\par 
\par        -u or --underline-special
\par               Causes backspaces and carriage returns to be treated as printable characters; that is, they  are  sent  to
\par               the terminal when they appear in the input.
\par 
\par        -U or --UNDERLINE-SPECIAL
\par               Causes  backspaces,  tabs and carriage returns to be treated as control characters; that is, they are han-
\par               dled as specified by the -r option.
\par 
\par               By default, if neither -u nor -U is given, backspaces which appear adjacent to an underscore character are
\par               treated  specially: the underlined text is displayed using the terminal\rquote s hardware underlining capability.
\par               Also, backspaces which appear between two identical characters are treated specially: the overstruck  text
\par               is  printed  using  the terminal\rquote s hardware boldface capability.  Other backspaces are deleted, along with
\par               the preceding character.  Carriage returns immediately followed by a newline are deleted.  other  carriage
\par               returns are handled as specified by the -r option.  Text which is overstruck or underlined can be searched
\par               for if neither -u nor -U is in effect.
\par 
\par        -V or --version
\par               Displays the version number of less.
\par 
\par        -w or --hilite-unread
\par               Temporarily highlights the first "new" line after a forward movement of a full page.  The first "new" line
\par               is  the  line  immediately following the line previously at the bottom of the screen.  Also highlights the
\par               target line after a g or p command.  The highlight is removed at the next command which  causes  movement.
\par               The entire line is highlighted, unless the -J option is in effect, in which case only the status column is
\par               highlighted.
\par 
\par        -W or --HILITE-UNREAD
\par               Like -w, but temporarily highlights the first new line after any forward movement command larger than  one
\par               line.
\par 
\par        -xn,... or --tabs=n,...
\par               Sets tab stops.  If only one n is specified, tab stops are set at multiples of n.  If multiple values sep-
\par               arated by commas are specified, tab stops are set at those positions, and  then  continue  with  the  same
\par               spacing  as the last two.  For example, -x9,17 will set tabs at positions 9, 17, 25, 33, etc.  The default
\par               for n is 8.
\par 
\par        -X or --no-init
\par               Disables sending the termcap initialization and deinitialization strings to the terminal.  This  is  some-
\par               times desirable if the deinitialization string does something unnecessary, like clearing the screen.
\par 
\par        -yn or --max-forw-scroll=n
\par               Specifies  a  maximum number of lines to scroll forward.  If it is necessary to scroll forward more than n
\par               lines, the screen is repainted instead.  The -c or -C option may be used to repaint from the  top  of  the
\par               screen if desired.  By default, any forward movement causes scrolling.
\par 
\par        -[z]n or --window=n
\par               Changes the default scrolling window size to n lines.  The default is one screenful.  The z and w commands
\par               can also be used to change the window size.  The "z" may be omitted for compatibility with  some  versions
\par               of  more.  If the number n is negative, it indicates n lines less than the current screen size.  For exam-
\par               ple, if the screen is 24 lines, -z-4 sets the scrolling window to 20 lines.  If the screen is  resized  to
\par               40 lines, the scrolling window automatically changes to 36 lines.
\par 
\par        -"cc or --quotes=cc
\par               Changes the filename quoting character.  This may be necessary if you are trying to name a file which con-
\par               tains both spaces and quote characters.  Followed by a single character, this changes the quote  character
\par               to  that  character.  Filenames containing a space should then be surrounded by that character rather than
\par               by double quotes.  Followed by two characters, changes the open quote to  the  first  character,  and  the
\par               close  quote  to  the  second character.  Filenames containing a space should then be preceded by the open
\par               quote character and followed by the close quote character.  Note that even after the quote characters  are
\par               changed, this option remains -" (a dash followed by a double quote).
\par 
\par        -~ or --tilde
\par               Normally  lines after end of file are displayed as a single tilde (~).  This option causes lines after end
\par               of file to be displayed as blank lines.
\par 
\par        -# or --shift
\par               Specifies the default number of positions to scroll horizontally in the RIGHTARROW and LEFTARROW commands.
\par               If  the number specified is zero, it sets the default number of positions to one half of the screen width.
\par               Alternately, the number may be specified as a fraction of the width of the screen, starting with a decimal
\par               point:  .5  is half of the screen width, .3 is three tenths of the screen width, and so on.  If the number
\par               is specified as a fraction, the actual number of scroll positions is recalculated if the  terminal  window
\par               is resized, so that the actual scroll remains at the specified fraction of the screen width.
\par 
\par        --no-keypad
\par               Disables  sending  the  keypad initialization and deinitialization strings to the terminal.  This is some-
\par               times useful if the keypad strings make the numeric keypad behave in an undesirable manner.
\par 
\par        --follow-name
\par               Normally, if the input file is renamed while an F command is executing, less will continue to display  the
\par               contents of the original file despite its name change.  If --follow-name is specified, during an F command
\par               less will periodically attempt to reopen the file by name.  If the reopen succeeds and the file is a  dif-
\par               ferent  file  from  the  original  (which means that a new file has been created with the same name as the
\par               original (now renamed) file), less will display the contents of that new file.
\par 
\par        --     A command line argument of "--" marks the end of option  arguments.   Any  arguments  following  this  are
\par               interpreted as filenames.  This can be useful when viewing a file whose name begins with a "-" or "+".
\par 
\par        +      If  a command line option begins with +, the remainder of that option is taken to be an initial command to
\par               less.  For example, +G tells less to start at the end of the file rather than  the  beginning,  and  +/xyz
\par               tells  it  to  start at the first occurrence of "xyz" in the file.  As a special case, +<number> acts like
\par               +<number>g; that is, it starts the display at the specified line number (however, see the caveat under the
\par               "g" command above).  If the option starts with ++, the initial command applies to every file being viewed,
\par               not just the first one.  The + command described previously may also be used to set (or change) an initial
\par               command for every file.
\par 
\par LINE EDITING
\par        When  entering  command line at the bottom of the screen (for example, a filename for the :e command, or the pat-
\par        tern for a search command), certain keys can be used to manipulate the  command  line.   Most  commands  have  an
\par        alternate  form  in  [ brackets ] which can be used if a key does not exist on a particular keyboard.  (Note that
\par        the forms beginning with ESC do not work in some MS-DOS and Windows systems because ESC is the line erase charac-
\par        ter.)  Any of these special keys may be entered literally by preceding it with the "literal" character, either ^V
\par        or ^A.  A backslash itself may also be entered literally by entering two backslashes.
\par 
\par        LEFTARROW [ ESC-h ]
\par               Move the cursor one space to the left.
\par 
\par        RIGHTARROW [ ESC-l ]
\par               Move the cursor one space to the right.
\par 
\par        ^LEFTARROW [ ESC-b or ESC-LEFTARROW ]
\par               (That is, CONTROL and LEFTARROW simultaneously.)  Move the cursor one word to the left.
\par 
\par        ^RIGHTARROW [ ESC-w or ESC-RIGHTARROW ]
\par               (That is, CONTROL and RIGHTARROW simultaneously.)  Move the cursor one word to the right.
\par 
\par        HOME [ ESC-0 ]
\par               Move the cursor to the beginning of the line.
\par 
\par        END [ ESC-$ ]
\par               Move the cursor to the end of the line.
\par 
\par        BACKSPACE
\par               Delete the character to the left of the cursor, or cancel the command if the command line is empty.
\par 
\par        DELETE or [ ESC-x ]
\par               Delete the character under the cursor.
\par 
\par        ^BACKSPACE [ ESC-BACKSPACE ]
\par               (That is, CONTROL and BACKSPACE simultaneously.)  Delete the word to the left of the cursor.
\par 
\par        ^DELETE [ ESC-X or ESC-DELETE ]
\par               (That is, CONTROL and DELETE simultaneously.)  Delete the word under the cursor.
\par 
\par        UPARROW [ ESC-k ]
\par               Retrieve the previous command line.
\par 
\par        DOWNARROW [ ESC-j ]
\par               Retrieve the next command line.
\par 
\par        TAB    Complete the partial filename to the left of the cursor.  If it matches more than one filename, the  first
\par               match  is  entered into the command line.  Repeated TABs will cycle thru the other matching filenames.  If
\par               the completed filename is a directory, a "/" is appended to the filename.  (On MS-DOS systems,  a  "\\"  is
\par               appended.)   The environment variable LESSSEPARATOR can be used to specify a different character to append
\par               to a directory name.
\par 
\par        BACKTAB [ ESC-TAB ]
\par               Like, TAB, but cycles in the reverse direction thru the matching filenames.
\par 
\par        ^L     Complete the partial filename to the left of the cursor.  If  it  matches  more  than  one  filename,  all
\par               matches are entered into the command line (if they fit).
\par 
\par        ^U (Unix and OS/2) or ESC (MS-DOS)
\par               Delete  the  entire command line, or cancel the command if the command line is empty.  If you have changed
\par               your line-kill character in Unix to something other than ^U, that character is used instead of ^U.
\par 
\par KEY BINDINGS
\par        You may define your own less commands by using the program lesskey (1) to create a lesskey file.  This file spec-
\par        ifies a set of command keys and an action associated with each key.  You may also use lesskey to change the line-
\par        editing keys (see LINE EDITING), and to set environment variables.  If the environment variable LESSKEY  is  set,
\par        less  uses that as the name of the lesskey file.  Otherwise, less looks in a standard place for the lesskey file:
\par        On Unix systems, less looks for a lesskey file called "$HOME/.less".  On MS-DOS and Windows systems,  less  looks
\par        for  a  lesskey  file  called  "$HOME/_less",  and if it is not found there, then looks for a lesskey file called
\par        "_less" in any directory specified in the PATH environment variable.  On OS/2 systems, less looks for  a  lesskey
\par        file  called  "$HOME/less.ini",  and  if  it is not found, then looks for a lesskey file called "less.ini" in any
\par        directory specified in the INIT environment variable, and if it not found there, then looks for  a  lesskey  file
\par        called  "less.ini"  in any directory specified in the PATH environment variable.  See the lesskey manual page for
\par        more details.
\par 
\par        A system-wide lesskey file may also be set up to provide key bindings.  If a key  is  defined  in  both  a  local
\par        lesskey  file  and in the system-wide file, key bindings in the local file take precedence over those in the sys-
\par        tem-wide file.  If the environment variable LESSKEY_SYSTEM is set, less uses that as the name of the  system-wide
\par        lesskey  file.   Otherwise, less looks in a standard place for the system-wide lesskey file: On Unix systems, the
\par        system-wide lesskey file is /usr/local/etc/sysless.  (However, if less was built with a different sysconf  direc-
\par        tory than /usr/local/etc, that directory is where the sysless file is found.)  On MS-DOS and Windows systems, the
\par        system-wide lesskey file is c:\\_sysless.  On OS/2 systems, the system-wide lesskey file is c:\\sysless.ini.
\par 
\par INPUT PREPROCESSOR
\par        You may define an "input preprocessor" for less.  Before less opens a file, it first gives your input  preproces-
\par        sor  a  chance to modify the way the contents of the file are displayed.  An input preprocessor is simply an exe-
\par        cutable program (or shell script), which writes the contents of the file to a different file, called the replace-
\par        ment  file.   The  contents  of  the replacement file are then displayed in place of the contents of the original
\par        file.  However, it will appear to the user as if the original file is opened; that  is,  less  will  display  the
\par        original filename as the name of the current file.
\par 
\par        An  input  preprocessor  receives  one  command line argument, the original filename, as entered by the user.  It
\par        should create the replacement file, and when finished, print the name of the replacement  file  to  its  standard
\par        output.   If  the input preprocessor does not output a replacement filename, less uses the original file, as nor-
\par        mal.  The input preprocessor is not called when viewing standard input.  To set up an input preprocessor, set the
\par        LESSOPEN  environment  variable  to  a command line which will invoke your input preprocessor.  This command line
\par        should include one occurrence of the string "%s", which will be replaced by the filename when the  input  prepro-
\par        cessor command is invoked.
\par 
\par        When less closes a file opened in such a way, it will call another program, called the input postprocessor, which
\par        may perform any desired clean-up action (such as deleting the replacement file created by LESSOPEN).   This  pro-
\par        gram  receives  two  command  line  arguments,  the original filename as entered by the user, and the name of the
\par        replacement file.  To set up an input postprocessor, set the LESSCLOSE environment variable  to  a  command  line
\par        which  will  invoke  your  input  postprocessor.  It may include two occurrences of the string "%s"; the first is
\par        replaced with the original name of the file and the second with the name of the replacement file, which was  out-
\par        put by LESSOPEN.
\par 
\par        For example, on many Unix systems, these two scripts will allow you to keep files in compressed format, but still
\par        let less view them directly:
\par 
\par        lessopen.sh:
\par             #! /bin/sh
\par             case "$1" in
\par             *.Z) uncompress -
\par                  if [ -s /tmp/less.$$ ]; then
\par                       echo /tmp/less.$$
\par                  else
\par                       rm -f /tmp/less.$$
\par                  fi
\par                  ;;
\par             esac
\par 
\par        lessclose.sh:
\par             #! /bin/sh
\par             rm $2
\par 
\par        To use these scripts, put them both where they can be  executed  and  set  LESSOPEN="lessopen.sh %s",  and  LESS-
\par        CLOSE="lessclose.sh %s %s".   More complex LESSOPEN and LESSCLOSE scripts may be written to accept other types of
\par        compressed files, and so on.
\par 
\par        It is also possible to set up an input preprocessor to pipe the file data directly to less, rather  than  putting
\par        the data into a replacement file.  This avoids the need to decompress the entire file before starting to view it.
\par        An input preprocessor that works this way is called an input pipe.  An input pipe, instead of writing the name of
\par        a  replacement  file  on  its standard output, writes the entire contents of the replacement file on its standard
\par        output.  If the input pipe does not write any characters on its standard output, then  there  is  no  replacement
\par        file  and less uses the original file, as normal.  To use an input pipe, make the first character in the LESSOPEN
\par        environment variable a vertical bar (|) to signify that the input preprocessor is an input pipe.
\par 
\par        For example, on many Unix systems, this script will work like the previous example scripts:
\par 
\par        lesspipe.sh:
\par             #! /bin/sh
\par             case "$1" in
\par             *.Z) uncompress -c $1  2>/dev/null
\par                  ;;
\par             esac
\par 
\par        To use this script, put it where it can be executed and set LESSOPEN="|lesspipe.sh %s".  When an  input  pipe  is
\par        used,  a  LESSCLOSE postprocessor can be used, but it is usually not necessary since there is no replacement file
\par        to clean up.  In this case, the replacement file name passed to the LESSCLOSE postprocessor is "-".
\par 
\par        For compatibility with previous versions of less, the input preprocessor or pipe is not used if less  is  viewing
\par        standard  input.   However,  if  the first character of LESSOPEN is a dash (-), the input preprocessor is used on
\par        standard input as well as other files.  In this case, the dash is not considered to be part of  the  preprocessor
\par        command.   If standard input is being viewed, the input preprocessor is passed a file name consisting of a single
\par        dash.  Similarly, if the first two characters of LESSOPEN are vertical bar and dash (|-), the input pipe is  used
\par        on standard input as well as other files.  Again, in this case the dash is not considered to be part of the input
\par        pipe command.
\par 
\par NATIONAL CHARACTER SETS
\par        There are three types of characters in the input file:
\par 
\par        normal characters
\par               can be displayed directly to the screen.
\par 
\par        control characters
\par               should not be displayed directly, but are expected to be found in ordinary text files (such  as  backspace
\par               and tab).
\par 
\par        binary characters
\par               should not be displayed directly and are not expected to be found in text files.
\par 
\par        A  "character  set" is simply a description of which characters are to be considered normal, control, and binary.
\par        The LESSCHARSET environment variable may be used to select a character set.  Possible values for LESSCHARSET are:
\par 
\par        ascii  BS, TAB, NL, CR, and formfeed are control characters, all chars with values between 32 and 126 are normal,
\par               and all others are binary.
\par 
\par        iso8859
\par               Selects an ISO 8859 character set.  This is the same as ASCII, except characters between 160 and  255  are
\par               treated as normal characters.
\par 
\par        latin1 Same as iso8859.
\par 
\par        latin9 Same as iso8859.
\par 
\par        dos    Selects a character set appropriate for MS-DOS.
\par 
\par        ebcdic Selects an EBCDIC character set.
\par 
\par        IBM-1047
\par               Selects an EBCDIC character set used by OS/390 Unix Services.  This is the EBCDIC analogue of latin1.  You
\par               get similar results by setting either LESSCHARSET=IBM-1047 or LC_CTYPE=en_US in your environment.
\par 
\par        koi8-r Selects a Russian character set.
\par 
\par        next   Selects a character set appropriate for NeXT computers.
\par 
\par        utf-8  Selects the UTF-8 encoding of the ISO 10646 character set.  UTF-8 is special in that  it  supports  multi-
\par               byte characters in the input file.  It is the only character set that supports multi-byte characters.
\par 
\par        windows
\par               Selects a character set appropriate for Microsoft Windows (cp 1251).
\par 
\par        In  rare  cases,  it  may be desired to tailor less to use a character set other than the ones definable by LESS-
\par        CHARSET.  In this case, the environment variable LESSCHARDEF can be used to define a character set.  It should be
\par        set  to a string where each character in the string represents one character in the character set.  The character
\par        "." is used for a normal character, "c" for control, and "b" for binary.  A decimal number may be used for  repe-
\par        tition.   For  example,  "bccc4b."  would  mean  character 0 is binary, 1, 2 and 3 are control, 4, 5, 6 and 7 are
\par        binary, and 8 is normal.  All characters after the last are taken to be the same as the  last,  so  characters  9
\par        through 255 would be normal.  (This is an example, and does not necessarily represent any real character set.)
\par 
\par        This table shows the value of LESSCHARDEF which is equivalent to each of the possible values for LESSCHARSET:
\par 
\par             ascii     8bcccbcc18b95.b
\par             dos       8bcccbcc12bc5b95.b.
\par             ebcdic    5bc6bcc7bcc41b.9b7.9b5.b..8b6.10b6.b9.7b
\par                       9.8b8.17b3.3b9.7b9.8b8.6b10.b.b.b.
\par             IBM-1047  4cbcbc3b9cbccbccbb4c6bcc5b3cbbc4bc4bccbc
\par                       191.b
\par             iso8859   8bcccbcc18b95.33b.
\par             koi8-r    8bcccbcc18b95.b128.
\par             latin1    8bcccbcc18b95.33b.
\par             next      8bcccbcc18b95.bb125.bb
\par 
\par        If neither LESSCHARSET nor LESSCHARDEF is set, but any of the strings "UTF-8", "UTF8", "utf-8" or "utf8" is found
\par        in the LC_ALL, LC_TYPE or LANG environment variables, then the default character set is utf-8.
\par 
\par        If that string is not found, but your system supports the setlocale interface, less will use setlocale to  deter-
\par        mine the character set.  setlocale is controlled by setting the LANG or LC_CTYPE environment variables.
\par 
\par        Finally, if the setlocale interface is also not available, the default character set is latin1.
\par 
\par        Control  and  binary  characters  are displayed in standout (reverse video).  Each such character is displayed in
\par        caret notation if possible (e.g. ^A for control-A).  Caret notation is  used  only  if  inverting  the  0100  bit
\par        results  in  a normal printable character.  Otherwise, the character is displayed as a hex number in angle brack-
\par        ets.  This format can be changed by setting the LESSBINFMT environment variable.  LESSBINFMT may begin with a "*"
\par        and  one  character  to select the display attribute: "*k" is blinking, "*d" is bold, "*u" is underlined, "*s" is
\par        standout, and "*n" is normal.  If LESSBINFMT does not begin with a "*", normal attribute is assumed.  The remain-
\par        der  of  LESSBINFMT  is  a string which may include one printf-style escape sequence (a % followed by x, X, o, d,
\par        etc.).  For example, if LESSBINFMT is "*u[%x]", binary characters are displayed in  underlined  hexadecimal  sur-
\par        rounded  by brackets.  The default if no LESSBINFMT is specified is "*s<%02X>".  Warning: the result of expanding
\par        the character via LESSBINFMT must be less than 31 characters.
\par 
\par        When the character set is utf-8, the LESSUTFBINFMT environment variable  acts  similarly  to  LESSBINFMT  but  it
\par        applies  to  Unicode  code points that were successfully decoded but are unsuitable for display (e.g., unassigned
\par        code points).  Its default value is "<U+%04lX>".  Note that LESSUTFBINFMT  and  LESSBINFMT  share  their  display
\par        attribute  setting  ("*x") so specifying one will affect both; LESSUTFBINFMT is read after LESSBINFMT so its set-
\par        ting, if any, will have priority.  Problematic octets in a UTF-8 file (octets of a truncated sequence, octets  of
\par        a  complete but non-shortest form sequence, illegal octets, and stray trailing octets) are displayed individually
\par        using LESSBINFMT so as to facilitate diagnostic of how the UTF-8 file is ill-formed.
\par 
\par PROMPTS
\par        The -P option allows you to tailor the prompt to your preference.  The string given to the -P option replaces the
\par        specified  prompt  string.   Certain characters in the string are interpreted specially.  The prompt mechanism is
\par        rather complicated to provide flexibility, but the ordinary user need not understand the details of  constructing
\par        personalized prompt strings.
\par 
\par        A percent sign followed by a single character is expanded according to what the following character is:
\par 
\par        %bX    Replaced  by  the byte offset into the current input file.  The b is followed by a single character (shown
\par               as X above) which specifies the line whose byte offset is to be used.  If the character is a "t", the byte
\par               offset  of the top line in the display is used, an "m" means use the middle line, a "b" means use the bot-
\par               tom line, a "B" means use the line just after the bottom line, and a "j" means use the "target"  line,  as
\par               specified by the -j option.
\par 
\par        %B     Replaced by the size of the current input file.
\par 
\par        %c     Replaced by the column number of the text appearing in the first column of the screen.
\par 
\par        %dX    Replaced  by  the page number of a line in the input file.  The line to be used is determined by the X, as
\par               with the %b option.
\par 
\par        %D     Replaced by the number of pages in the input file, or equivalently, the page number of the  last  line  in
\par               the input file.
\par 
\par        %E     Replaced  by the name of the editor (from the VISUAL environment variable, or the EDITOR environment vari-
\par               able if VISUAL is not defined).  See the discussion of the LESSEDIT feature below.
\par 
\par        %f     Replaced by the name of the current input file.
\par 
\par        %i     Replaced by the index of the current file in the list of input files.
\par 
\par        %lX    Replaced by the line number of a line in the input file.  The line to be used is determined by the  X,  as
\par               with the %b option.
\par 
\par        %L     Replaced by the line number of the last line in the input file.
\par 
\par        %m     Replaced by the total number of input files.
\par 
\par        %pX    Replaced  by  the percent into the current input file, based on byte offsets.  The line used is determined
\par               by the X as with the %b option.
\par 
\par        %PX    Replaced by the percent into the current input file, based on line numbers.  The line used  is  determined
\par               by the X as with the %b option.
\par 
\par        %s     Same as %B.
\par 
\par        %t     Causes any trailing spaces to be removed.  Usually used at the end of the string, but may appear anywhere.
\par 
\par        %x     Replaced by the name of the next input file in the list.
\par 
\par        If any item is unknown (for example, the file size if input is a pipe), a question mark is printed instead.
\par 
\par        The format of the prompt string can be changed depending on certain conditions.  A question mark  followed  by  a
\par        single  character acts like an "IF": depending on the following character, a condition is evaluated.  If the con-
\par        dition is true, any characters following the question mark and condition character, up to a period, are  included
\par        in the prompt.  If the condition is false, such characters are not included.  A colon appearing between the ques-
\par        tion mark and the period can be used to establish an "ELSE": any characters between the colon and the period  are
\par        included  in  the string if and only if the IF condition is false.  Condition characters (which follow a question
\par        mark) may be:
\par 
\par        ?a     True if any characters have been included in the prompt so far.
\par 
\par        ?bX    True if the byte offset of the specified line is known.
\par 
\par        ?B     True if the size of current input file is known.
\par 
\par        ?c     True if the text is horizontally shifted (%c is not zero).
\par 
\par        ?dX    True if the page number of the specified line is known.
\par 
\par        ?e     True if at end-of-file.
\par 
\par        ?f     True if there is an input filename (that is, if input is not a pipe).
\par 
\par        ?lX    True if the line number of the specified line is known.
\par 
\par        ?L     True if the line number of the last line in the file is known.
\par 
\par        ?m     True if there is more than one input file.
\par 
\par        ?n     True if this is the first prompt in a new input file.
\par 
\par        ?pX    True if the percent into the current input file, based on byte offsets, of the specified line is known.
\par 
\par        ?PX    True if the percent into the current input file, based on line numbers, of the specified line is known.
\par 
\par        ?s     Same as "?B".
\par 
\par        ?x     True if there is a next input file (that is, if the current input file is not the last one).
\par 
\par        Any characters other than the special ones (question mark, colon, period, percent, and backslash)  become  liter-
\par        ally  part  of the prompt.  Any of the special characters may be included in the prompt literally by preceding it
\par        with a backslash.
\par 
\par        Some examples:
\par 
\par        ?f%f:Standard input.
\par 
\par        This prompt prints the filename, if known; otherwise the string "Standard input".
\par 
\par        ?f%f .?ltLine %lt:?pt%pt\\%:?btByte %bt:-...
\par 
\par        This prompt would print the filename, if known.  The filename is followed by the line number, if known, otherwise
\par        the  percent  if known, otherwise the byte offset if known.  Otherwise, a dash is printed.  Notice how each ques-
\par        tion mark has a matching period, and how the % after the %pt is included literally by escaping it  with  a  back-
\par        slash.
\par 
\par        ?n?f%f .?m(file %i of %m) ..?e(END) ?x- Next\\: %x..%t
\par 
\par        This prints the filename if this is the first prompt in a file, followed by the "file N of N" message if there is
\par        more than one input file.  Then, if we are at end-of-file, the string "(END)" is printed followed by the name  of
\par        the  next  file,  if there is one.  Finally, any trailing spaces are truncated.  This is the default prompt.  For
\par        reference, here are the defaults for the other two prompts (-m and -M respectively).  Each  is  broken  into  two
\par        lines here for readability only.
\par 
\par        ?n?f%f .?m(file %i of %m) ..?e(END) ?x- Next\\: %x.:
\par             ?pB%pB\\%:byte %bB?s/%s...%t
\par 
\par        ?f%f .?n?m(file %i of %m) ..?ltlines %lt-%lb?L/%L. :
\par             byte %bB?s/%s. .?e(END) ?x- Next\\: %x.:?pB%pB\\%..%t
\par 
\par        And here is the default message produced by the = command:
\par 
\par        ?f%f .?m(file %i of %m) .?ltlines %lt-%lb?L/%L. .
\par             byte %bB?s/%s. ?e(END) :?pB%pB\\%..%t
\par 
\par        The  prompt expansion features are also used for another purpose: if an environment variable LESSEDIT is defined,
\par        it is used as the command to be executed when the v command is invoked.  The LESSEDIT string is expanded  in  the
\par        same way as the prompt strings.  The default value for LESSEDIT is:
\par 
\par             %E ?lm+%lm. %f
\par 
\par        Note  that  this  expands to the editor name, followed by a + and the line number, followed by the file name.  If
\par        your editor does not accept the "+linenumber" syntax, or has other differences in invocation syntax, the LESSEDIT
\par        variable can be changed to modify this default.
\par 
\par SECURITY
\par        When  the  environment  variable LESSSECURE is set to 1, less runs in a "secure" mode.  This means these features
\par        are disabled:
\par 
\par               !      the shell command
\par 
\par               |      the pipe command
\par 
\par               :e     the examine command.
\par 
\par               v      the editing command
\par 
\par               s  -o  log files
\par 
\par               -k     use of lesskey files
\par 
\par               -t     use of tags files
\par 
\par                      metacharacters in filenames, such as *
\par 
\par                      filename completion (TAB, ^L)
\par 
\par        Less can also be compiled to be permanently in "secure" mode.
\par 
\par COMPATIBILITY WITH MORE
\par        If the environment variable LESS_IS_MORE is set to 1, or if the program is invoked via a file link named  "more",
\par        less  behaves  (mostly)  in  conformance with the POSIX "more" command specification.  In this mode, less behaves
\par        differently in these ways:
\par 
\par        The -e option works differently.  If the -e option is not set, less behaves as if the -E option were set.  If the
\par        -e option is set, less behaves as if the -e and -F options were set.
\par 
\par        The -m option works differently.  If the -m option is not set, the medium prompt is used, and it is prefixed with
\par        the string "--More--".  If the -m option is set, the short prompt is used.
\par 
\par        The -n option acts like the -z option.  The normal behavior of the -n option is unavailable in this mode.
\par 
\par        The parameter to the -p option is taken to be a less command rather than a search pattern.
\par 
\par        The LESS environment variable is ignored, and the MORE environment variable is used in its place.
\par 
\par ENVIRONMENT VARIABLES
\par        Environment variables may be specified either in the system environment as usual, or in a lesskey (1)  file.   If
\par        environment  variables  are defined in more than one place, variables defined in a local lesskey file take prece-
\par        dence over variables defined in the system environment, which take precedence over variables defined in the  sys-
\par        tem-wide lesskey file.
\par 
\par        COLUMNS
\par               Sets  the  number  of columns on the screen.  Takes precedence over the number of columns specified by the
\par               TERM variable.  (But if you have a windowing system which supports TIOCGWINSZ or WIOCGETD, the window sys-
\par               tem\rquote s idea of the screen size takes precedence over the LINES and COLUMNS environment variables.)
\par 
\par        EDITOR The name of the editor (used for the v command).
\par 
\par        HOME   Name of the user\rquote s home directory (used to find a lesskey file on Unix and OS/2 systems).
\par 
\par        HOMEDRIVE, HOMEPATH
\par               Concatenation of the HOMEDRIVE and HOMEPATH environment variables is the name of the user\rquote s home directory
\par               if the HOME variable is not set (only in the Windows version).
\par 
\par        INIT   Name of the user\rquote s init directory (used to find a lesskey file on OS/2 systems).
\par 
\par        LANG   Language for determining the character set.
\par 
\par        LC_CTYPE
\par               Language for determining the character set.
\par 
\par        LESS   Options which are passed to less automatically.
\par 
\par        LESSANSIENDCHARS
\par               Characters which may end an ANSI color escape sequence (default "m").
\par 
\par        LESSANSIMIDCHARS
\par               Characters which may appear between the ESC character and the  end  character  in  an  ANSI  color  escape
\par               sequence (default "0123456789;[?!"\rquote #%()*+ ".
\par 
\par        LESSBINFMT
\par               Format for displaying non-printable, non-control characters.
\par 
\par        LESSCHARDEF
\par               Defines a character set.
\par 
\par        LESSCHARSET
\par               Selects a predefined character set.
\par 
\par        LESSCLOSE
\par               Command line to invoke the (optional) input-postprocessor.
\par 
\par        LESSECHO
\par               Name  of  the lessecho program (default "lessecho").  The lessecho program is needed to expand metacharac-
\par               ters, such as * and ?, in filenames on Unix systems.
\par 
\par        LESSEDIT
\par               Editor prototype string (used for the v command).  See discussion under PROMPTS.
\par 
\par        LESSGLOBALTAGS
\par               Name of the command used by the -t option to find global tags.  Normally should be set to "global" if your
\par               system has the global (1) command.  If not set, global tags are not used.
\par 
\par        LESSHISTFILE
\par               Name  of the history file used to remember search commands and shell commands between invocations of less.
\par               If set to "-" or "/dev/null", a history file is not used.  The default is "$HOME/.lesshst"  on  Unix  sys-
\par               tems,  "$HOME/_lesshst"  on DOS and Windows systems, or "$HOME/lesshst.ini" or "$INIT/lesshst.ini" on OS/2
\par               systems.
\par 
\par        LESSHISTSIZE
\par               The maximum number of commands to save in the history file.  The default is 100.
\par 
\par        LESSKEY
\par               Name of the default lesskey(1) file.
\par 
\par        LESSKEY_SYSTEM
\par               Name of the default system-wide lesskey(1) file.
\par 
\par        LESSMETACHARS
\par               List of characters which are considered "metacharacters" by the shell.
\par 
\par        LESSMETAESCAPE
\par               Prefix which less will add before each metacharacter in a command sent to the shell.  If LESSMETAESCAPE is
\par               an empty string, commands containing metacharacters will not be passed to the shell.
\par 
\par        LESSOPEN
\par               Command line to invoke the (optional) input-preprocessor.
\par 
\par        LESSSECURE
\par               Runs less in "secure" mode.  See discussion under SECURITY.
\par 
\par        LESSSEPARATOR
\par               String to be appended to a directory name in filename completion.
\par 
\par        LESSUTFBINFMT
\par               Format for displaying non-printable Unicode code points.
\par 
\par        LESS_IS_MORE
\par               Emulate the more (1) command.
\par 
\par        LINES  Sets  the  number of lines on the screen.  Takes precedence over the number of lines specified by the TERM
\par               variable.  (But if you have a windowing system which supports TIOCGWINSZ or WIOCGETD, the window  system\rquote s
\par               idea of the screen size takes precedence over the LINES and COLUMNS environment variables.)
\par 
\par        PATH   User\rquote s search path (used to find a lesskey file on MS-DOS and OS/2 systems).
\par 
\par        SHELL  The shell used to execute the ! command, as well as to expand filenames.
\par 
\par        TERM   The type of terminal on which less is being run.
\par 
\par        VISUAL The name of the editor (used for the v command).
\par 
\par SEE ALSO
\par        lesskey(1)
\par 
\par COPYRIGHT
\par        Copyright (C) 1984-2009  Mark Nudelman
\par 
\par        less  is  part of the GNU project and is free software.  You can redistribute it and/or modify it under the terms
\par        of either (1) the GNU General Public License as published by the  Free  Software  Foundation;  or  (2)  the  Less
\par        License.   See  the  file  README in the less distribution for more details regarding redistribution.  You should
\par        have received a copy of the GNU General Public License along with the source for less; see the file COPYING.   If
\par        not,  write to the Free Software Foundation, 59 Temple Place, Suite 330, Boston, MA  02111-1307, USA.  You should
\par        also have received a copy of the Less License; see the file LICENSE.
\par 
\par        less is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the  implied  war-
\par        ranty  of  MERCHANTABILITY  or  FITNESS  FOR  A  PARTICULAR PURPOSE.  See the GNU General Public License for more
\par        details.
\par 
\par AUTHOR
\par        Mark Nudelman <markn@greenwoodsoftware.com>
\par        See http://www.greenwoodsoftware.com/less/bugs.html for the latest list of known bugs in less.
\par        Send bug reports or comments to the above address or to
\par        bug-less@gnu.org.
\par        For more information, see the less homepage at
\par        http://www.greenwoodsoftware.com/less.
\par 
\par                            Version 436: 07 Jul 2009                    LESS(1)
\par \plain \f1\fs20\cf4 ------------------------------------------------------------------------------------------------------------\par}