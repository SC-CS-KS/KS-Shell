{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f2\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red255\green0\blue0;\red0\green128\blue128;\red0\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid916080449\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f2\fs24}
\listid1674390087}
{\list\listtemplateid1326379879\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f2\fs24}
\listid537961226}
{\list\listtemplateid616356663\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f2\fs24}
\listid779413013}
{\list\listtemplateid261871214\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f2\fs24}
\listid1343236648}
}
{\*\listoverridetable
{\listoverride\listid1674390087\listoverridecount0\ls1}
{\listoverride\listid537961226\listoverridecount0\ls2}
{\listoverride\listid779413013\listoverridecount0\ls3}
{\listoverride\listid1343236648\listoverridecount0\ls4}
}


\pard\sl360\slmult1\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f1\b\lang2052\fs24\cf4 help printf
\par \pard\sl360\slmult1\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\lang2052\fs18 printf: 
\par \plain \f1\lang2052\fs18\cf1 printf [-v var] format [arguments]
\par \plain \f1\lang2052\fs18  
\par printf formats and prints ARGUMENTS under control of the FORMAT. 
\par FORMAT is a character string which contains three types of objects: plain characters, which are simply copied to standard output, character escape sequences which are converted and copied to the standard output, and format specifications, each of which causes printing of the next successive argument.  
\par 
\par In addition to the standard printf(1) formats, %b means to expand backslash escape sequences in the corresponding argument, and %q means to quote the argument in a way that can be reused as shell input.
\par     
\par \plain \f1\lang2052\fs18\cf2 If the -v option is supplied, the output is placed into the value of the shell variable VAR rather than being sent to the standard output.
\par \plain \f1\lang2052\fs18\cf1 #printf -v var "%f"  3.25  
\par #echo $var               
\par 3.250000
\par \plain \f1\lang2052\fs18\cf2 
\par \plain \f1\lang2052\fs18\cf1 #/usr/bin/printf -v var "%f" 3.5  
\par \plain \f1\lang2052\fs18\cf-1 -v/usr/bin/printf: warning: ignoring excess arguments, starting with `var'
\par //\uc2\u22806 \'cd\'e2\u37096 \'b2\'bf\u21629 \'c3\'fc\u20196 \'c1\'eeprintf\u27809 \'c3\'bb\u26377 \'d3\'d0-v\u36873 \'d1\'a1\u39033 \'cf\'ee\uc1
\par \plain \f1\lang2052\fs18\cf3 ---------------------------------------------------------------------------------------------------------------------------------------------\par}