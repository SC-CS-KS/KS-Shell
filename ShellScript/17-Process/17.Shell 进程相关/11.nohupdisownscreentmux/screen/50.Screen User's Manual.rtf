{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f2\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1142806517\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f2\fs24\lang1024}
\listid732189136}
}
{\*\listoverridetable
{\listoverride\listid732189136\listoverridecount0\ls1}
}


\pard\sl360\slmult1\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f1\b\lang2052\fs24\cf2 50.Screen User's Manual
\par \pard\sl360\slmult1\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\lang2052\fs21 This file documents the `Screen' virtual terminal manager.
\par 
\par    Copyright (c) 1993-2003 Free Software Foundation, Inc.
\par 
\par    Permission is granted to make and distribute verbatim copies of this
\par manual provided the copyright notice and this permission notice are
\par preserved on all copies.
\par 
\par    Permission is granted to copy and distribute modified versions of
\par this manual under the conditions for verbatim copying, provided that
\par the entire resulting derived work is distributed under the terms of a
\par permission notice identical to this one.
\par 
\par    Permission is granted to copy and distribute translations of this
\par manual into another language, under the above conditions for modified
\par versions, except that this permission notice may be stated in a
\par translation approved by the Foundation.
\par 
\par Screen
\par ******
\par 
\par This file documents the `Screen' virtual terminal manager, version
\par 4.1.0.
\par 
\par 1 Overview
\par **********
\par 
\par Screen is a full-screen window manager that multiplexes a physical
\par terminal between several processes, typically interactive shells.  Each
\par virtual terminal provides the functions of the DEC VT100 terminal and,
\par in addition, several control functions from the ISO 6429 (ECMA 48, ANSI
\par X3.64) and ISO 2022 standards (e.g. insert/delete line and support for
\par multiple character sets).  There is a scrollback history buffer for
\par each virtual terminal and a copy-and-paste mechanism that allows the
\par user to move text regions between windows.
\par 
\par    When `screen' is called, it creates a single window with a shell in
\par it (or the specified command) and then gets out of your way so that you
\par can use the program as you normally would.  Then, at any time, you can
\par create new (full-screen) windows with other programs in them (including
\par more shells), kill the current window, view a list of the active
\par windows, turn output logging on and off, copy text between windows, view
\par the scrollback history, switch between windows, etc.  All windows run
\par their programs completely independent of each other.  Programs continue
\par to run when their window is currently not visible and even when the
\par whole screen session is detached from the user's terminal.
\par 
\par    When a program terminates, `screen' (per default) kills the window
\par that contained it.  If this window was in the foreground, the display
\par switches to the previously displayed window; if none are left, `screen'
\par exits.
\par 
\par    Everything you type is sent to the program running in the current
\par window.  The only exception to this is the one keystroke that is used to
\par initiate a command to the window manager.  By default, each command
\par begins with a control-a (abbreviated `C-a' from now on), and is
\par followed by one other keystroke.  The command character (*note Command
\par Character::) and all the key bindings (*note Key Binding::) can be fully
\par customized to be anything you like, though they are always two
\par characters in length.
\par 
\par    `Screen' does not understand the prefix `C-' to mean control.
\par Please use the caret notation (`^A' instead of `C-a') as arguments to
\par e.g. the `escape' command or the `-e' option. `Screen' will also print
\par out control characters in caret notation.
\par 
\par    The standard way to create a new window is to type `C-a c'.  This
\par creates a new window running a shell and switches to that window
\par immediately, regardless of the state of the process running in the
\par current window.  Similarly, you can create a new window with a custom
\par command in it by first binding the command to a keystroke (in your
\par `.screenrc' file or at the `C-a :' command line) and then using it just
\par like the `C-a c' command.  In addition, new windows can be created by
\par running a command like:
\par 
\par      screen emacs prog.c
\par 
\par from a shell prompt within a previously created window.  This will not
\par run another copy of `screen', but will instead supply the command name
\par and its arguments to the window manager (specified in the $STY
\par environment variable) who will use it to create the new window.  The
\par above example would start the `emacs' editor (editing `prog.c') and
\par switch to its window.
\par 
\par    If `/etc/utmp' is writable by `screen', an appropriate record will
\par be written to this file for each window, and removed when the window is
\par closed.  This is useful for working with `talk', `script', `shutdown',
\par `rsend', `sccs' and other similar programs that use the utmp file to
\par determine who you are. As long as `screen' is active on your terminal,
\par the terminal's own record is removed from the utmp file.  *Note Login::.
\par 
\par 2 Getting Started
\par *****************
\par 
\par Before you begin to use `screen' you'll need to make sure you have
\par correctly selected your terminal type, just as you would for any other
\par termcap/terminfo program.  (You can do this by using `tset', `qterm',
\par or just `set term=mytermtype', for example.)
\par 
\par    If you're impatient and want to get started without doing a lot more
\par reading, you should remember this one command: `C-a ?' (*note Key
\par Binding::).  Typing these two characters will display a list of the
\par available `screen' commands and their bindings. Each keystroke is
\par discussed in the section on keystrokes (*note Default Key Bindings::).
\par Another section (*note Customization::) deals with the contents of your
\par `.screenrc'.
\par 
\par    If your terminal is a "true" auto-margin terminal (it doesn't allow
\par the last position on the screen to be updated without scrolling the
\par screen) consider using a version of your terminal's termcap that has
\par automatic margins turned _off_.  This will ensure an accurate and
\par optimal update of the screen in all circumstances.  Most terminals
\par nowadays have "magic" margins (automatic margins plus usable last
\par column).  This is the VT100 style type and perfectly suited for
\par `screen'.  If all you've got is a "true" auto-margin terminal `screen'
\par will be content to use it, but updating a character put into the last
\par position on the screen may not be possible until the screen scrolls or
\par the character is moved into a safe position in some other way. This
\par delay can be shortened by using a terminal with insert-character
\par capability.
\par 
\par    *Note Special Capabilities::, for more information about telling
\par `screen' what kind of terminal you have.
\par 
\par 3 Invoking `Screen'
\par *******************
\par 
\par Screen has the following command-line options:
\par 
\par `-a'
\par      Include _all_ capabilities (with some minor exceptions) in each
\par      window's termcap, even if `screen' must redraw parts of the display
\par      in order to implement a function.
\par 
\par `-A'
\par      Adapt the sizes of all windows to the size of the display.  By
\par      default, `screen' may try to restore its old window sizes when
\par      attaching to resizable terminals (those with `WS' in their
\par      descriptions, e.g.  `suncmd' or some varieties of `xterm').
\par 
\par `-c FILE'
\par      Use FILE as the user's configuration file instead of the default
\par      of `$HOME/.screenrc'.
\par 
\par `-d [PID.SESSIONNAME]'
\par `-D [PID.SESSIONNAME]'
\par      Do not start `screen', but instead detach a `screen' session
\par      running elsewhere (*note Detach::).  `-d' has the same effect as
\par      typing `C-a d' from the controlling terminal for the session.
\par      `-D' is the equivalent to the power detach key.  If no session can
\par      be detached, this option is ignored.  In combination with the
\par      `-r'/`-R' option more powerful effects can be achieved:
\par 
\par     `-d -r'
\par           Reattach a session and if necessary detach it first.
\par 
\par     `-d -R'
\par           Reattach a session and if necessary detach  or  even create
\par           it first.
\par 
\par     `-d -RR'
\par           Reattach a session and if necessary detach or create it.  Use
\par           the first session if more than one session is available.
\par 
\par     `-D -r'
\par           Reattach a session. If necessary detach  and  logout remotely
\par           first.
\par 
\par     `-D -R'
\par           Attach here and now. In detail this means: If a session  is
\par           running, then reattach. If necessary detach and logout
\par           remotely first.  If it was not running create it and notify
\par           the user.  This is the author's favorite.
\par 
\par     `-D -RR'
\par           Attach here and now. Whatever that  means, just do it.
\par 
\par      _Note_: It is a good idea to check the status of your sessions
\par      with `screen -list' before using this option.
\par 
\par `-e XY'
\par      Set the command character to X, and the character generating a
\par      literal command character (when typed after the command character)
\par      to Y.  The defaults are `C-a' and `a', which can be specified as
\par      `-e^Aa'.  When creating a `screen' session, this option sets the
\par      default command character. In a multiuser session all users added
\par      will start off with this command character. But when attaching to
\par      an already running session, this option only changes the command
\par      character of the attaching user.  This option is equivalent to the
\par      commands `defescape' or `escape' respectively.  (*note Command
\par      Character::).
\par 
\par `-f'
\par `-fn'
\par `-fa'
\par      Set flow-control to on, off, or automatic switching mode,
\par      respectively.  This option is equivalent to the `defflow' command
\par      (*note Flow Control::).
\par 
\par `-h NUM'
\par      Set the history scrollback buffer to be NUM lines high.
\par      Equivalent to the `defscrollback' command (*note Copy::).
\par 
\par `-i'
\par      Cause the interrupt key (usually `C-c') to interrupt the display
\par      immediately when flow control is on.  This option is equivalent to
\par      the `interrupt' argument to the `defflow' command (*note Flow
\par      Control::). Its use is discouraged.
\par 
\par `-l'
\par `-ln'
\par      Turn login mode on or off (for `/etc/utmp' updating).  This option
\par      is equivalent to the `deflogin' command (*note Login::).
\par 
\par `-ls [MATCH]'
\par `-list [MATCH]'
\par      Do not start `screen', but instead print a list of session
\par      identification strings (usually of the form PID.TTY.HOST; *note
\par      Session Name::).  Sessions marked `detached' can be resumed with
\par      `screen -r'.  Those marked `attached' are running and have a
\par      controlling terminal.  If the session runs in multiuser mode, it
\par      is marked `multi'.  Sessions marked as `unreachable' either live
\par      on a different host or are dead.  An unreachable session is
\par      considered dead, when its name matches either the name of the
\par      local host, or the specified parameter, if any.  See the `-r' flag
\par      for a description how to construct matches.  Sessions marked as
\par      `dead' should be thoroughly checked and removed.  Ask your system
\par      administrator if you are not sure.  Remove sessions with the
\par      `-wipe' option.
\par 
\par `-L'
\par      Tell `screen' to turn on automatic output logging for the windows.
\par 
\par `-m'
\par      Tell `screen' to ignore the `$STY' environment variable.  When
\par      this option is used, a new session will always be created,
\par      regardless of whether `screen' is being called from within another
\par      `screen' session or not. This flag has a special meaning in
\par      connection with the `-d' option:
\par     `-d -m'
\par           Start `screen' in _detached_ mode. This creates a new session
\par           but doesn't attach to it. This is useful for system startup
\par           scripts.
\par 
\par     `-D -m'
\par           This also starts `screen' in _detached_ mode, but doesn't fork
\par           a new process. The command exits if the session terminates.
\par 
\par `-p NAME_OR_NUMBER'
\par      Preselect a window. This is useful when you want to reattach to a
\par      specific window or you want to send a command via the `-X' option
\par      to a specific window. As with screen's select command, `-' selects
\par      the blank window. As a special case for reattach, `=' brings up
\par      the windowlist on the blank window.
\par 
\par `-q'
\par      Suppress printing of error messages. In combination with `-ls' the
\par      exit value is set as follows: 9 indicates a directory without
\par      sessions. 10 indicates a directory with running but not attachable
\par      sessions. 11 (or more) indicates 1 (or more) usable sessions.  In
\par      combination with `-r' the exit value is as follows: 10 indicates
\par      that there is no session to resume. 12 (or more) indicates that
\par      there are 2 (or more) sessions to resume and you should specify
\par      which one to choose.  In all other cases `-q' has no effect.
\par 
\par `-r [PID.SESSIONNAME]'
\par `-r SESSIONOWNER/[PID.SESSIONNAME]'
\par      Resume a detached `screen' session.  No other options (except
\par      combinations with `-d' or `-D') may be specified, though the
\par      session name (*note Session Name::) may be needed to distinguish
\par      between multiple detached `screen' sessions.  The second form is
\par      used to connect to another user's screen session which runs in
\par      multiuser mode. This indicates that screen should look for
\par      sessions in another user's directory. This requires setuid-root.
\par 
\par `-R'
\par      Resume the first appropriate detached `screen' session.  If
\par      successful, all other command-line options are ignored.  If no
\par      detached session exists, start a new session using the specified
\par      options, just as if `-R' had not been specified.  This option is
\par      set by default if screen is run as a login-shell (actually screen
\par      uses `-xRR' in that case).  For combinations with the `-D'/`-d'
\par      option see there.
\par 
\par `-s PROGRAM'
\par      Set the default shell to be PROGRAM.  By default, `screen' uses
\par      the value of the environment variable `$SHELL', or `/bin/sh' if it
\par      is not defined.  This option is equivalent to the `shell' command
\par      (*note Shell::).
\par 
\par `-S SESSIONNAME'
\par      Set the name of the new session to SESSIONNAME.  This option can
\par      be used to specify a meaningful name for the session in place of
\par      the default TTY.HOST suffix.  This name identifies the session for
\par      the `screen -list' and `screen -r' commands.  This option is
\par      equivalent to the `sessionname' command (*note Session Name::).
\par 
\par `-t NAME'
\par      Set the title (name) for the default shell or specified program.
\par      This option is equivalent to the `shelltitle' command (*note
\par      Shell::).
\par 
\par `-U'
\par      Run screen in UTF-8 mode. This option tells screen that your
\par      terminal sends and understands UTF-8 encoded characters. It also
\par      sets the default encoding for new windows to `utf8'.
\par 
\par `-v'
\par      Print the version number.
\par 
\par `-wipe [MATCH]'
\par      List available screens like `screen -ls', but remove destroyed
\par      sessions instead of marking them as `dead'.  An unreachable
\par      session is considered dead, when its name matches either the name
\par      of the local host, or the explicitly given parameter, if any.  See
\par      the `-r' flag for a description how to construct matches.
\par 
\par `-x'
\par      Attach to a session which is already attached elsewhere
\par      (multi-display mode).  `Screen' refuses to attach from within
\par      itself.  But when cascading multiple screens, loops are not
\par      detected; take care.
\par 
\par `-X'
\par      Send the specified command to a running screen session. You can use
\par      the `-d' or `-r' option to tell screen to look only for attached
\par      or detached screen sessions. Note that this command doesn't work
\par      if the session is password protected.
\par 
\par 
\par 4 Customizing `Screen'
\par **********************
\par 
\par You can modify the default settings for `screen' to fit your tastes
\par either through a personal `.screenrc' file which contains commands to
\par be executed at startup, or on the fly using the `colon' command.
\par 
\par 4.1 The `.screenrc' file
\par ========================
\par 
\par When `screen' is invoked, it executes initialization commands from the
\par files `.screenrc' in the user's home directory and
\par `/usr/local/etc/screenrc'.  These defaults can be overridden in the
\par following ways: For the global screenrc file `screen' searches for the
\par environment variable `$SYSSCREENRC' (this override feature may be
\par disabled at compile-time).  The user specific screenrc file is searched
\par for in `$SCREENRC', then ``$HOME'/.screenrc'.  The command line option
\par `-c' specifies which file to use (*note Invoking Screen::.  Commands in
\par these files are used to set options, bind commands to keys, and to
\par automatically establish one or more windows at the beginning of your
\par `screen' session.  Commands are listed one per line, with empty lines
\par being ignored.  A command's arguments are separated by tabs or spaces,
\par and may be surrounded by single or double quotes.  A `#' turns the rest
\par of the line into a comment, except in quotes.  Unintelligible lines are
\par warned about and ignored.  Commands may contain references to
\par environment variables.  The syntax is the shell-like `$VAR' or
\par `$\{VAR\}'.  Note that this causes incompatibility with previous `screen'
\par versions, as now the '$'-character has to be protected with '\\' if no
\par variable substitution is intended. A string in single-quotes is also
\par protected from variable substitution.
\par 
\par    Two configuration files are shipped as examples with your screen
\par distribution: `etc/screenrc' and `etc/etcscreenrc'. They contain a
\par number of useful examples for various commands.
\par 
\par 4.2 Source
\par ==========
\par 
\par  -- Command: source file
\par      (none)
\par      Read and execute commands from file FILE. Source  commands may be
\par      nested to a maximum recursion level of ten. If FILE is not an
\par      absolute path and  screen  is already processing  a source
\par      command, the parent directory of the running source command file
\par      is used to search for the new command file  before screen's
\par      current directory.
\par 
\par      Note  that termcap/terminfo/termcapinfo commands only work at
\par      startup and reattach time, so they must be reached  via the
\par      default screenrc files to have an effect.
\par 
\par 4.3 Colon
\par =========
\par 
\par Customization can also be done online, with this command:
\par 
\par  -- Command: colon
\par      (`C-a :')
\par      Allows you to enter `.screenrc' command lines.  Useful for
\par      on-the-fly modification of key bindings, specific window creation
\par      and changing settings.  Note that the `set' keyword no longer
\par      exists, as of version 3.3.  Change default settings with commands
\par      starting with `def'.  You might think of this as the `ex' command
\par      mode of `screen', with `copy' as its `vi' command mode (*note Copy
\par      and Paste::).
\par 
\par 5 Commands
\par **********
\par 
\par A command in `screen' can either be bound to a key, invoked from a
\par screenrc file, or called from the `colon' prompt (*note
\par Customization::).  As of version 3.3, all commands can be bound to
\par keys, although some may be less useful than others.  For a number of
\par real life working examples of the most important commands see the files
\par `etc/screenrc' and `etc/etcscreenrc' of your screen distribution.
\par 
\par    In this manual, a command definition looks like this:
\par 
\par - Command: command [-n] ARG1 [ARG2] ...
\par      (KEYBINDINGS)
\par      This command does something, but I can't remember what.
\par 
\par    An argument in square brackets (`[]') is optional.  Many commands
\par take an argument of `on' or `off', which is indicated as STATE in the
\par definition.
\par 
\par 5.1 Default Key Bindings
\par ========================
\par 
\par As mentioned previously, each keyboard command consists of a `C-a'
\par followed by one other character.  For your convenience, all commands
\par that are bound to lower-case letters are also bound to their control
\par character counterparts (with the exception of `C-a a'; see below).
\par Thus, both `C-a c' and `C-a C-c' can be used to create a window.
\par 
\par    The following table shows the default key bindings:
\par 
\par `C-a ''
\par      (select)
\par      Prompt for a window identifier and switch.  *Note Selecting::.
\par 
\par `C-a "'
\par      (windowlist -b)
\par      Present a list of all windows for selection.  *Note Selecting::.
\par 
\par `C-a 0...9, -'
\par      (select 0...select 9, select -)
\par      Switch to window number 0...9, or the blank window.  *Note
\par      Selecting::.
\par 
\par `C-a <Tab>'
\par      (focus)
\par      Switch the input focus to the next region.  *Note Regions::.
\par 
\par `C-a C-a'
\par      (other)
\par      Toggle to the window displayed previously.  If this window does no
\par      longer exist, `other' has the same effect as `next'.  *Note
\par      Selecting::.
\par 
\par `C-a a'
\par      (meta)
\par      Send the command character (C-a) to window. See `escape' command.
\par      *Note Command Character::.
\par 
\par `C-a A'
\par      (title)
\par      Allow the user to enter a title for the current window.  *Note
\par      Naming Windows::.
\par 
\par `C-a b'
\par `C-a C-b'
\par      (break)
\par      Send a break to the tty.  *Note Break::.
\par 
\par `C-a B'
\par      (pow_break)
\par      Close and reopen the tty-line.  *Note Break::.
\par 
\par `C-a c'
\par `C-a C-c'
\par      (screen)
\par      Create a new window with a shell and switch to that window.  *Note
\par      Screen Command::.
\par 
\par `C-a C'
\par      (clear)
\par      Clear the screen.  *Note Clear::.
\par 
\par `C-a d'
\par `C-a C-d'
\par      (detach)
\par      Detach `screen' from this terminal.  *Note Detach::.
\par 
\par `C-a D D'
\par      (pow_detach)
\par      Detach and logout.  *Note Power Detach::.
\par 
\par `C-a f'
\par `C-a C-f'
\par      (flow)
\par      Cycle flow among `on', `off' or `auto'.  *Note Flow::.
\par 
\par `C-a F'
\par      (fit)
\par      Resize the window to the current region size.  *Note Window Size::.
\par 
\par `C-a C-g'
\par      (vbell)
\par      Toggle visual bell mode.  *Note Bell::.
\par 
\par `C-a h'
\par      (hardcopy)
\par      Write a hardcopy of the current window to the file "hardcopy.N".
\par      *Note Hardcopy::.
\par 
\par `C-a H'
\par      (log)
\par      Toggle logging of the current window to the file "screenlog.N".
\par      *Note Log::.
\par 
\par `C-a i'
\par `C-a C-i'
\par      (info)
\par      Show info about the current window.  *Note Info::.
\par 
\par `C-a k'
\par `C-a C-k'
\par      (kill)
\par      Destroy the current window.  *Note Kill::.
\par 
\par `C-a l'
\par `C-a C-l'
\par      (redisplay)
\par      Fully refresh the current window.  *Note Redisplay::.
\par 
\par `C-a L'
\par      (login)
\par      Toggle the current window's login state.  *Note Login::.
\par 
\par `C-a m'
\par `C-a C-m'
\par      (lastmsg)
\par      Repeat the last message displayed in the message line.  *Note Last
\par      Message::.
\par 
\par `C-a M'
\par      (monitor) Toggle monitoring of the current window.  *Note
\par      Monitor::.
\par 
\par `C-a <SPC>'
\par `C-a n'
\par `C-a C-n'
\par      (next)
\par      Switch to the next window.  *Note Selecting::.
\par 
\par `C-a N'
\par      (number)
\par      Show the number (and title) of the current window.  *Note Number::.
\par 
\par `C-a p'
\par `C-a C-p'
\par `C-a C-h'
\par `C-a <BackSpace>'
\par      (prev)
\par      Switch to the previous window (opposite of `C-a n').  *Note
\par      Selecting::.
\par 
\par `C-a q'
\par `C-a C-q'
\par      (xon)
\par      Send a ^Q (ASCII XON) to the current window.  *Note XON/XOFF::.
\par 
\par `C-a Q'
\par      (only)
\par      Delete all regions but the current one.  *Note Regions::.
\par 
\par `C-a r'
\par `C-a C-r'
\par      (wrap)
\par      Toggle the current window's line-wrap setting (turn the current
\par      window's automatic margins on or off).  *Note Wrap::.
\par 
\par `C-a s'
\par `C-a C-s'
\par      (xoff)
\par      Send a ^S (ASCII XOFF) to the current window.  *Note XON/XOFF::.
\par 
\par `C-a S'
\par      (split)
\par      Split the current region into two new ones.  *Note Regions::.
\par 
\par `C-a t'
\par `C-a C-t'
\par      (time)
\par      Show the load average and xref.  *Note Time::.
\par 
\par `C-a v'
\par      (version)
\par      Display the version and compilation date.  *Note Version::.
\par 
\par `C-a C-v'
\par      (digraph)
\par      Enter digraph.  *Note Digraph::.
\par 
\par `C-a w'
\par `C-a C-w'
\par      (windows)
\par      Show a list of active windows.  *Note Windows::.
\par 
\par `C-a W'
\par      (width)
\par      Toggle between 80 and 132 columns.  *Note Window Size::.
\par 
\par `C-a x'
\par `C-a C-x'
\par      (lockscreen)
\par      Lock your terminal.  *Note Lock::.
\par 
\par `C-a X'
\par      (remove)
\par      Kill the current region.  *Note Regions::.
\par 
\par `C-a z'
\par `C-a C-z'
\par      (suspend)
\par      Suspend `screen'.  *Note Suspend::.
\par 
\par `C-a Z'
\par      (reset)
\par      Reset the virtual terminal to its "power-on" values.  *Note
\par      Reset::.
\par 
\par `C-a .'
\par      (dumptermcap)
\par      Write out a `.termcap' file.  *Note Dump Termcap::.
\par 
\par `C-a ?'
\par      (help)
\par      Show key bindings.  *Note Help::.
\par 
\par `C-a C-\\'
\par      (quit)
\par      Kill all windows and terminate `screen'.  *Note Quit::.
\par 
\par `C-a :'
\par      (colon)
\par      Enter a command line.  *Note Colon::.
\par 
\par `C-a ['
\par `C-a C-['
\par `C-a <ESC>'
\par      (copy)
\par      Enter copy/scrollback mode.  *Note Copy::.
\par 
\par `C-a ]'
\par `C-a C-]'
\par      (paste .)
\par      Write the contents of the paste buffer to the stdin queue of the
\par      current window.  *Note Paste::.
\par 
\par `C-a \{'
\par `C-a \}'
\par      (history)
\par      Copy and paste a previous (command) line.  *Note History::.
\par 
\par `C-a >'
\par      (writebuf)
\par      Write the paste buffer out to the screen-exchange file.  *Note
\par      Screen Exchange::.
\par 
\par `C-a <'
\par      (readbuf)
\par      Read the screen-exchange file into the paste buffer.  *Note Screen
\par      Exchange::.
\par 
\par `C-a ='
\par      (removebuf)
\par      Delete the screen-exchange file.  *Note Screen Exchange::.
\par 
\par `C-a _'
\par      (silence)
\par      Start/stop monitoring the current window for inactivity. *Note
\par      Silence::,
\par 
\par `C-a ,'
\par      (license)
\par      Show the copyright page.
\par 
\par `C-a *'
\par      (displays)
\par      Show the listing of attached displays.
\par 
\par 5.2 Command Summary
\par ===================
\par 
\par `acladd USERNAMES'
\par      Allow other users in this session.  *Note Multiuser Session::.
\par 
\par `aclchg USERNAMES PERMBITS LIST'
\par      Change a user's permissions.  *Note Multiuser Session::.
\par 
\par `acldel USERNAME'
\par      Disallow other user in this session.  *Note Multiuser Session::.
\par 
\par `aclgrp USRNAME [GROUPNAME]'
\par      Inherit permissions granted to a group leader. *Note Multiuser
\par      Session::.
\par 
\par `aclumask [USERS]+/-BITS ...'
\par      Predefine access to new windows. *Note Umask::.
\par 
\par `activity MESSAGE'
\par      Set the activity notification message.  *Note Monitor::.
\par 
\par `addacl USERNAMES'
\par      Synonym to `acladd'.  *Note Multiuser Session::.
\par 
\par `allpartial STATE'
\par      Set all windows to partial refresh.  *Note Redisplay::.
\par 
\par `altscreen STATE'
\par      Enables support for the "alternate screen" terminal capability.
\par      *Note Redisplay::.
\par 
\par `at [IDENT][#|*|%] COMMAND [ARGS]'
\par      Execute a command at other displays or windows.  *Note At::.
\par 
\par `attrcolor ATTRIB [ATTRIBUTE/COLOR-MODIFIER]'
\par      Map attributes to colors.  *Note Attrcolor::.
\par 
\par `autodetach STATE'
\par      Automatically detach the session on SIGHUP.  *Note Detach::.
\par 
\par `autonuke STATE'
\par      Enable a clear screen to discard unwritten output.  *Note
\par      Autonuke::.
\par 
\par `backtick ID LIFESPAN AUTOREFRESH COMMAND [ARGS]'
\par      Define a command for the backtick string escape.  *Note Backtick::.
\par 
\par `bce [STATE]'
\par      Change background color erase.  *Note Character Processing::.
\par 
\par `bell_msg [MESSAGE]'
\par      Set the bell notification message.  *Note Bell::.
\par 
\par `bind [-c CLASS] KEY [COMMAND [ARGS]]'
\par      Bind a command to a key.  *Note Bind::.
\par 
\par `bindkey [OPTS] [STRING [CMD ARGS]]'
\par      Bind a string to a series of keystrokes. *Note Bindkey::.
\par 
\par `blanker'
\par      Blank the screen.  *Note Screen Saver::.
\par 
\par `blankerprg'
\par      Define a blanker program.  *Note Screen Saver::.
\par 
\par `break [DURATION]'
\par      Send a break signal to the current window.  *Note Break::.
\par 
\par `breaktype [TCSENDBREAK | TCSBRK | TIOCSBRK]'
\par      Specify how to generate breaks.  *Note Break::.
\par 
\par `bufferfile [EXCHANGE-FILE]'
\par      Select a file for screen-exchange.  *Note Screen Exchange::.
\par 
\par `c1 [STATE]'
\par      Change c1 code processing.  *Note Character Processing::.
\par 
\par `caption MODE [STRING]'
\par      Change caption mode and string.  *Note Regions::.
\par 
\par `chacl USERNAMES PERMBITS LIST'
\par      Synonym to `aclchg'. *Note Multiuser Session::.
\par 
\par `charset SET'
\par      Change character set slot designation.  *Note Character
\par      Processing::.
\par 
\par `chdir [DIRECTORY]'
\par      Change the current directory for future windows.  *Note Chdir::.
\par 
\par `clear'
\par      Clear the window screen.  *Note Clear::.
\par 
\par `colon'
\par      Enter a `screen' command.  *Note Colon::.
\par 
\par `command [-c CLASS]'
\par      Simulate the screen escape key.  *Note Command Character::.
\par 
\par `compacthist [STATE]'
\par      Selects compaction of trailing empty lines.  *Note Scrollback::.
\par 
\par `console [STATE]'
\par      Grab or ungrab console output.  *Note Console::.
\par 
\par `copy'
\par      Enter copy mode.  *Note Copy::.
\par 
\par `copy_reg [KEY]'
\par      Removed. Use `paste' instead.  *Note Registers::.
\par 
\par `crlf STATE'
\par      Select line break behavior for copying.  *Note Line Termination::.
\par 
\par `debug STATE'
\par      Suppress/allow debugging output.  *Note Debug::.
\par 
\par `defautonuke STATE'
\par      Select default autonuke behavior.  *Note Autonuke::.
\par 
\par `defbce STATE'
\par      Select background color erase.  *Note Character Processing::.
\par 
\par `defbreaktype [TCSENDBREAK | TCSBRK | TIOCSBRK]'
\par      Specify the default for generating breaks.  *Note Break::.
\par 
\par `defc1 STATE'
\par      Select default c1 processing behavior.  *Note Character
\par      Processing::.
\par 
\par `defcharset [SET]'
\par      Change defaul character set slot designation.  *Note Character
\par      Processing::.
\par 
\par `defencoding ENC'
\par      Select default window encoding.  *Note Character Processing::.
\par 
\par `defescape XY'
\par      Set the default command and `meta' characters.  *Note Command
\par      Character::.
\par 
\par `defflow FSTATE'
\par      Select default flow control behavior.  *Note Flow::.
\par 
\par `defgr STATE'
\par      Select default GR processing behavior.  *Note Character
\par      Processing::.
\par 
\par `defhstatus [STATUS]'
\par      Select default window hardstatus line.  *Note Hardstatus::.
\par 
\par `deflog STATE'
\par      Select default window logging behavior.  *Note Log::.
\par 
\par `deflogin STATE'
\par      Select default utmp logging behavior.  *Note Login::.
\par 
\par `defmode MODE'
\par      Select default file mode for ptys.  *Note Mode::.
\par 
\par `defmonitor STATE'
\par      Select default activity monitoring behavior.  *Note Monitor::.
\par 
\par `defnonblock STATE|NUMSECS'
\par      Select default nonblock mode.  *Note Nonblock::.
\par 
\par `defobuflimit LIMIT'
\par      Select default output buffer limit.  *Note Obuflimit::.
\par 
\par `defscrollback NUM'
\par      Set default lines of scrollback.  *Note Scrollback::.
\par 
\par `defshell COMMAND'
\par      Set the default program for new windows.  *Note Shell::.
\par 
\par `defsilence STATE'
\par      Select default idle monitoring behavior.  *Note Silence::.
\par 
\par `defslowpaste MSEC'
\par      Select the default inter-character timeout when pasting.  *Note
\par      Paste::.
\par 
\par `defutf8 STATE'
\par      Select default character encoding.  *Note Character Processing::.
\par 
\par `defwrap STATE'
\par      Set default line-wrapping behavior.  *Note Wrap::.
\par 
\par `defwritelock ON|OFF|AUTO'
\par      Set default writelock behavior.  *Note Multiuser Session::.
\par 
\par `defzombie [KEYS]'
\par      Keep dead windows.  *Note Zombie::.
\par 
\par `detach [-h]'
\par      Disconnect `screen' from the terminal.  *Note Detach::.
\par 
\par `digraph'
\par      Enter digraph sequence.  *Note Digraph::.
\par 
\par `dinfo'
\par      Display terminal information.  *Note Info::.
\par 
\par `displays'
\par      List currently active user interfaces. *Note Displays::.
\par 
\par `dumptermcap'
\par      Write the window's termcap entry to a file.  *Note Dump Termcap::.
\par 
\par `echo [-n] MESSAGE'
\par      Display a message on startup.  *Note Startup::.
\par 
\par `encoding ENC [DENC]'
\par      Set the encoding of a window.  *Note Character Processing::.
\par 
\par `escape XY'
\par      Set the command and `meta' characters.  *Note Command Character::.
\par 
\par `eval COMMAND1 [COMMAND2 ...]'
\par      Parse and execute each argument. *Note Eval::.
\par 
\par `exec [[FDPAT] COMMAND [ARGS ...]]'
\par      Run a subprocess (filter).  *Note Exec::.
\par 
\par `fit'
\par      Change window size to current display size.  *Note Window Size::.
\par 
\par `flow [FSTATE]'
\par      Set flow control behavior.  *Note Flow::.
\par 
\par `focus'
\par      Move focus to next region.  *Note Regions::.
\par 
\par `gr [STATE]'
\par      Change GR charset processing.  *Note Character Processing::.
\par 
\par `hardcopy [-h] [FILE]'
\par      Write out the contents of the current window.  *Note Hardcopy::.
\par 
\par `hardcopy_append STATE'
\par      Append to hardcopy files.  *Note Hardcopy::.
\par 
\par `hardcopydir DIRECTORY'
\par      Place, where to dump hardcopy files.  *Note Hardcopy::.
\par 
\par `hardstatus [STATE]'
\par      Use the hardware status line.  *Note Hardware Status Line::.
\par 
\par `height [LINES [COLS]]'
\par      Set display height.  *Note Window Size::.
\par 
\par `help [-c CLASS]'
\par      Display current key bindings.  *Note Help::.
\par 
\par `history'
\par      Find previous command beginning ....  *Note History::.
\par 
\par `hstatus STATUS'
\par      Change the window's hardstatus line.  *Note Hardstatus::.
\par 
\par `idle [TIMEOUT [CMD ARGS]]'
\par      Define a screen saver command.  *Note Screen Saver::.
\par 
\par `ignorecase [STATE]'
\par      Ignore character case in searches.  *Note Searching::.
\par 
\par `info'
\par      Display window settings.  *Note Info::.
\par 
\par `ins_reg [KEY]'
\par      Removed, use `paste' instead.  *Note Registers::.
\par 
\par `kill'
\par      Destroy the current window.  *Note Kill::.
\par 
\par `lastmsg'
\par      Redisplay the last message.  *Note Last Message::.
\par 
\par `license'
\par      Display licensing information.  *Note Startup::.
\par 
\par `lockscreen'
\par      Lock the controlling terminal.  *Note Lock::.
\par 
\par `log [STATE]'
\par      Log all output in the current window.  *Note Log::.
\par 
\par `logfile FILENAME'
\par      Place where to collect logfiles.  *Note Log::.
\par 
\par `login [STATE]'
\par      Log the window in `/etc/utmp'.  *Note Login::.
\par 
\par `logtstamp [STATE]'
\par      Configure logfile time-stamps.  *Note Log::.
\par 
\par `mapdefault'
\par      Use only the default mapping table for the next keystroke.  *Note
\par      Bindkey Control::.
\par 
\par `mapnotnext'
\par      Don't try to do keymapping on the next keystroke.  *Note Bindkey
\par      Control::.
\par 
\par `maptimeout TIMO'
\par      Set the inter-character timeout used for keymapping. *Note Bindkey
\par      Control::.
\par 
\par `markkeys STRING'
\par      Rebind keys in copy mode.  *Note Copy Mode Keys::.
\par 
\par `maxwin N'
\par      Set the maximum window number. *Note Maxwin::.
\par 
\par `meta'
\par      Insert the command character.  *Note Command Character::.
\par 
\par `monitor [STATE]'
\par      Monitor activity in window.  *Note Monitor::.
\par 
\par `msgminwait SEC'
\par      Set minimum message wait.  *Note Message Wait::.
\par 
\par `msgwait SEC'
\par      Set default message wait.  *Note Message Wait::.
\par 
\par `multiuser STATE'
\par      Go into single or multi user mode. *Note Multiuser Session::.
\par 
\par `nethack STATE'
\par      Use `nethack'-like error messages.  *Note Nethack::.
\par 
\par `next'
\par      Switch to the next window.  *Note Selecting::.
\par 
\par `nonblock [STATE|NUMSECS]'
\par      Disable flow control to the current display. *Note
\par      Nonblock::.|NUMSECS]
\par 
\par `number [N]'
\par      Change/display the current window's number.  *Note Number::.
\par 
\par `obuflimit [LIMIT]'
\par      Select output buffer limit.  *Note Obuflimit::.
\par 
\par `only'
\par      Kill all other regions.  *Note Regions::.
\par 
\par `other'
\par      Switch to the window you were in last.  *Note Selecting::.
\par 
\par `partial STATE'
\par      Set window to partial refresh.  *Note Redisplay::.
\par 
\par `password [CRYPTED_PW]'
\par      Set reattach password.  *Note Detach::.
\par 
\par `paste [SRC_REGS [DEST_REG]]'
\par      Paste contents of paste buffer or registers somewhere.  *Note
\par      Paste::.
\par 
\par `pastefont [STATE]'
\par      Include font information in the paste buffer.  *Note Paste::.
\par 
\par `pow_break'
\par      Close and Reopen the window's terminal.  *Note Break::.
\par 
\par `pow_detach'
\par      Detach and hang up.  *Note Power Detach::.
\par 
\par `pow_detach_msg [MESSAGE]'
\par      Set message displayed on `pow_detach'.  *Note Power Detach::.
\par 
\par `prev'
\par      Switch to the previous window.  *Note Selecting::.
\par 
\par `printcmd [CMD]'
\par      Set a command for VT100 printer port emulation.  *Note Printcmd::.
\par 
\par `process [KEY]'
\par      Treat a register as input to `screen'.  *Note Registers::.
\par 
\par `quit'
\par      Kill all windows and exit.  *Note Quit::.
\par 
\par `readbuf [-e ENCODING] [FILENAME]'
\par      Read the paste buffer from the screen-exchange file.  *Note Screen
\par      Exchange::.
\par 
\par `readreg [-e ENCODING] [REG [FILE]]'
\par      Load a register from paste buffer or file.  *Note Registers::.
\par 
\par `redisplay'
\par      Redisplay the current window.  *Note Redisplay::.
\par 
\par `register [-e ENCODING] KEY STRING'
\par      Store a string to a register.  *Note Registers::.
\par 
\par `remove'
\par      Kill current region.  *Note Regions::.
\par 
\par `removebuf'
\par      Delete the screen-exchange file.  *Note Screen Exchange::.
\par 
\par `reset'
\par      Reset the terminal settings for the window.  *Note Reset::.
\par 
\par `resize [(+/-)lines]'
\par      Grow or shrink a region
\par 
\par `screen [OPTS] [N] [CMD [ARGS]]'
\par      Create a new window.  *Note Screen Command::.
\par 
\par `scrollback NUM'
\par      Set size of scrollback buffer.  *Note Scrollback::.
\par 
\par `select [N]'
\par      Switch to a specified window.  *Note Selecting::.
\par 
\par `sessionname [NAME]'
\par      Name this session.  *Note Session Name::.
\par 
\par `setenv [VAR [STRING]]'
\par      Set an environment variable for new windows.  *Note Setenv::.
\par 
\par `setsid STATE'
\par      Controll process group creation for windows.  *Note Setsid::.
\par 
\par `shell COMMAND'
\par      Set the default program for new windows.  *Note Shell::.
\par 
\par `shelltitle TITLE'
\par      Set the default name for new windows.  *Note Shell::.
\par 
\par `silence [STATE|SECONDS]'
\par      Monitor a window for inactivity.  *Note Silence::.
\par 
\par `silencewait SECONDS'
\par      Default timeout to trigger an inactivity notify.  *Note Silence::.
\par 
\par `sleep NUM'
\par      Pause during startup.  *Note Startup::.
\par 
\par `slowpaste MSEC'
\par      Slow down pasting in windows.  *Note Paste::.
\par 
\par `source FILE'
\par      Run commands from a file.  *Note Source::.
\par 
\par `sorendition [ATTR [COLOR]]'
\par      Change text highlighting.  *Note Sorendition::.
\par 
\par `split'
\par      Split region into two parts.  *Note Regions::.
\par 
\par `startup_message STATE'
\par      Display copyright notice on startup.  *Note Startup::.
\par 
\par `stuff STRING'
\par      Stuff a string in the input buffer of a window.  *Note Paste::.
\par 
\par `su [USERNAME [PASSWORD [PASSWORD2]]]'
\par      Identify a user. *Note Multiuser Session::.
\par 
\par `suspend'
\par      Put session in background.  *Note Suspend::.
\par 
\par `term TERM'
\par      Set `$TERM' for new windows.  *Note Term::.
\par 
\par `termcap TERM TERMINAL-TWEAKS [WINDOW-TWEAKS]'
\par      Tweak termcap entries for best performance.  *Note Termcap
\par      Syntax::.
\par 
\par `terminfo TERM TERMINAL-TWEAKS [WINDOW-TWEAKS]'
\par      Ditto, for terminfo systems.  *Note Termcap Syntax::.
\par 
\par `termcapinfo TERM TERMINAL-TWEAKS [WINDOW-TWEAKS]'
\par      Ditto, for both systems.  *Note Termcap Syntax::.
\par 
\par `time [STRING]'
\par      Display time and load average.  *Note Time::.
\par 
\par `title [WINDOWTITLE]'
\par      Set the name of the current window.  *Note Title Command::.
\par 
\par `umask [USERS]+/-BITS ...'
\par      Synonym to `aclumask'. *Note Umask::.
\par 
\par `unsetenv VAR'
\par      Unset environment variable for new windows.  *Note Setenv::.
\par 
\par `utf8 [STATE [DSTATE]]'
\par      Select character encoding of the current window.  *Note Character
\par      Processing::.
\par 
\par `vbell [STATE]'
\par      Use visual bell.  *Note Bell::.
\par 
\par `vbell_msg [MESSAGE]'
\par      Set vbell message.  *Note Bell::.
\par 
\par `vbellwait SEC'
\par      Set delay for vbell message.  *Note Bell::.
\par 
\par `version'
\par      Display `screen' version.  *Note Version::.
\par 
\par `wall MESSAGE'
\par      Write a message to all displays.  *Note Multiuser Session::.
\par 
\par `width [COLS [LINES]]'
\par      Set the width of the window.  *Note Window Size::.
\par 
\par `windowlist [-b] | string [STRING] | title [TITLE]'
\par      Present a list of all windows for selection.  *Note Windowlist::.
\par 
\par `windows'
\par      List active windows.  *Note Windows::.
\par 
\par `wrap [STATE]'
\par      Control line-wrap behavior.  *Note Wrap::.
\par 
\par `writebuf [-e ENCODING] [FILENAME]'
\par      Write paste buffer to screen-exchange file.  *Note Screen
\par      Exchange::.
\par 
\par `writelock ON|OFF|AUTO'
\par      Grant exclusive write permission.  *Note Multiuser Session::.
\par 
\par `xoff'
\par      Send an XOFF character.  *Note XON/XOFF::.
\par 
\par `xon'
\par      Send an XON character.  *Note XON/XOFF::.
\par 
\par `zmodem [off|auto|catch|pass]'
\par      Define how screen treats zmodem requests.  *Note Zmodem::.
\par 
\par `zombie [KEYS [onerror] ]'
\par      Keep dead windows.  *Note Zombie::.
\par 
\par 6 New Window
\par ************
\par 
\par This section describes the commands for creating a new window for
\par running programs.  When a new window is created, the first available
\par number from the range 0...9 is assigned to it.  The number of windows
\par is limited at compile-time by the MAXWIN configuration parameter.
\par 
\par 6.1 Chdir
\par =========
\par 
\par  -- Command: chdir [directory]
\par      (none)
\par      Change the current directory of `screen' to the specified directory
\par      or, if called without an argument, to your home directory (the
\par      value of the environment variable `$HOME').  All windows that are
\par      created by means of the `screen' command from within `.screenrc'
\par      or by means of `C-a : screen ...' or `C-a c' use this as their
\par      default directory.  Without a `chdir' command, this would be the
\par      directory from which `screen' was invoked.  Hardcopy and log files
\par      are always written to the _window's_ default directory, _not_ the
\par      current directory of the process running in the window.  You can
\par      use this command multiple times in your `.screenrc' to start
\par      various windows in different default directories, but the last
\par      `chdir' value will affect all the windows you create interactively.
\par 
\par 6.2 Screen Command
\par ==================
\par 
\par  -- Command: screen [opts] [n] [cmd [args]]
\par      (`C-a c', `C-a C-c')
\par      Establish a new window.  The flow-control options (`-f', `-fn' and
\par      `-fa'), title option (`-t'), login options (`-l' and `-ln') ,
\par      terminal type option (`-T TERM'), the all-capability-flag (`-a')
\par      and scrollback option (`-h NUM') may be specified with each
\par      command.  The option (`-M') turns monitoring on for this window.
\par      The option (`-L') turns output logging on for this window.  If an
\par      optional number N in the range 0...9 is given, the window number N
\par      is assigned to the newly created window (or, if this number is
\par      already in-use, the next available number).  If a command is
\par      specified after `screen', this command (with the given arguments)
\par      is started in the window; otherwise, a shell is created.
\par 
\par      Screen has built in some functionality of `cu' and `telnet'.
\par      *Note Window Types::.
\par 
\par    Thus, if your `.screenrc' contains the lines
\par 
\par      # example for .screenrc:
\par      screen 1
\par      screen -fn -t foobar 2 -L telnet foobar
\par 
\par `screen' creates a shell window (in window #1) and a window with a
\par TELNET connection to the machine foobar (with no flow-control using the
\par title `foobar' in window #2) and will write a logfile `screenlog.2' of
\par the telnet session.  If you do not include any `screen' commands in
\par your `.screenrc' file, then `screen' defaults to creating a single
\par shell window, number zero.  When the initialization is completed,
\par `screen' switches to the last window specified in your .screenrc file
\par or, if none, it opens default window #0.
\par 
\par 6.3 Setenv
\par ==========
\par 
\par  -- Command: setenv var string
\par      (none)
\par      Set the environment variable VAR to value STRING.  If only VAR is
\par      specified, the user will be prompted to enter a value.  If no
\par      parameters are specified, the user will be prompted for both
\par      variable and value. The environment is inherited by all
\par      subsequently forked shells.
\par 
\par  -- Command: unsetenv var
\par      (none)
\par      Unset an environment variable.
\par 
\par 6.4 Shell
\par =========
\par 
\par  -- Command: shell command
\par  -- Command: defshell command
\par      (none)
\par      Set the command to be used to create a new shell.  This overrides
\par      the value of the environment variable `$SHELL'.  This is useful if
\par      you'd like to run a tty-enhancer which is expecting to execute the
\par      program specified in `$SHELL'.  If the command begins with a `-'
\par      character, the shell will be started as a login-shell.
\par 
\par      `defshell' is currently a synonym to the `shell' command.
\par 
\par  -- Command: shelltitle title
\par      (none)
\par      Set the title for all shells created during startup or by the C-a
\par      C-c command.  *Note Naming Windows::, for details about what
\par      titles are.
\par 
\par 6.5 Term
\par ========
\par 
\par  -- Command: term term
\par      (none)
\par      In each window `screen' opens, it sets the `$TERM' variable to
\par      `screen' by default, unless no description for `screen' is
\par      installed in the local termcap or terminfo data base.  In that
\par      case it pretends that the terminal emulator is `vt100'.  This
\par      won't do much harm, as `screen' is VT100/ANSI compatible.  The use
\par      of the `term' command is discouraged for non-default purpose.
\par      That is, one may want to specify special `$TERM' settings (e.g.
\par      vt100) for the next `screen rlogin othermachine' command. Use the
\par      command `screen -T vt100 rlogin othermachine' rather than setting
\par      and resetting the default.
\par 
\par 6.6 Window Types
\par ================
\par 
\par Screen provides three different window types. New windows are created
\par with `screen''s `screen' command (*note Screen Command::).  The first
\par parameter to the `screen' command defines which type of window is
\par created. The different window types are all special cases of the normal
\par type. They have been added in order to allow `screen' to be used
\par efficiently as a console with 100 or more windows.
\par    * The normal window contains a shell (default, if no parameter is
\par      given) or any other system command that could be executed from a
\par      shell.  (e.g. `slogin', etc...).
\par 
\par    * If a tty (character special device) name (e.g. `/dev/ttya') is
\par      specified as the first parameter, then the window is directly
\par      connected to this device.  This window type is similar to `screen
\par      cu -l /dev/ttya'.  Read and write access is required on the device
\par      node, an exclusive open is attempted on the node to mark the
\par      connection line as busy.  An optional parameter is allowed
\par      consisting of a comma separated list of flags in the notation used
\par      by `stty(1)':
\par     `<baud_rate>'
\par           Usually 300, 1200, 9600 or 19200. This affects transmission
\par           as well as receive speed.
\par 
\par     `cs8 or cs7'
\par           Specify the transmission of eight (or seven) bits per byte.
\par 
\par     `ixon or -ixon'
\par           Enables (or disables) software flow-control (CTRL-S/CTRL-Q)
\par           for sending data.
\par 
\par     `ixoff or -ixoff'
\par           Enables (or disables) software flow-control for receiving
\par           data.
\par 
\par     `istrip or -istrip'
\par           Clear (or keep) the eight bit in each received byte.
\par 
\par      You may want to specify as many of these options as applicable.
\par      Unspecified options cause the terminal driver to make up the
\par      parameter values of the connection. These values are
\par      system-dependent and may be in defaults or values saved from a
\par      previous connection.
\par 
\par      For tty windows, the `info' command shows some of the modem
\par      control lines in the status line.  These may include `RTS', `CTS',
\par      `DTR', `CD' and more. This depends rather on on the available
\par      `ioctl()''s and system header files than on the physical
\par      capabilities of the serial board.  The name of a logical low
\par      (inactive) signal is preceded by an exclamation mark (`!'),
\par      otherwise the signal is logical high (active).  Unsupported but
\par      shown signals are usually shown low.  When the `CLOCAL' status bit
\par      is true, the whole set of modem signals is placed inside curly
\par      braces (`\{' and `\}').  When the `CRTSCTS' or `TIOCSOFTCAR' bit is
\par      true, the signals `CTS' or `CD' are shown in parenthesis,
\par      respectively.
\par 
\par      For tty windows, the command `break' causes the Data transmission
\par      line (TxD) to go low for a specified period of time. This is
\par      expected to be interpreted as break signal on the other side.  No
\par      data is sent and no modem control line is changed when a `break'
\par      is issued.
\par 
\par    * If the first parameter is `//telnet', the second parameter is
\par      expected to be a host name, and an optional third parameter may
\par      specify a TCP port number (default decimal 23). Screen will
\par      connect to a server listening on the remote host and use the
\par      telnet protocol to communicate with that server.
\par 
\par      For telnet windows, the command `info' shows details about the
\par      connection in square brackets (`[' and `]') at the end of the
\par      status line.
\par     `b'
\par           BINARY. The connection is in binary mode.
\par 
\par     `e'
\par           ECHO. Local echo is disabled.
\par 
\par     `c'
\par           SGA. The connection is in `character mode' (default: `line
\par           mode').
\par 
\par     `t'
\par           TTYPE. The terminal type has been requested by the remote
\par           host. Screen sends the name `screen' unless instructed
\par           otherwise (see also the command `term').
\par 
\par     `w'
\par           NAWS. The remote site is notified about window size changes.
\par 
\par     `f'
\par           LFLOW. The remote host will send flow control information.
\par           (Ignored at the moment.)
\par      Additional flags for debugging are `x', `t' and `n' (XDISPLOC,
\par      TSPEED and NEWENV).
\par 
\par      For telnet windows, the command `break' sends the telnet code `IAC
\par      BREAK' (decimal 243) to the remote host.
\par 
\par 
\par 7 Selecting a Window
\par ********************
\par 
\par This section describes the commands for switching between windows in an
\par `screen' session.  The windows are numbered from 0 to 9, and are created
\par in that order by default (*note New Window::).
\par 
\par 7.1 Moving Back and Forth
\par =========================
\par 
\par  -- Command: next
\par      (`C-a <SPC>', `C-a n', `C-a C-n')
\par      Switch to the next window.  This command can be used repeatedly to
\par      cycle through the list of windows.  (On some terminals, C-<SPC>
\par      generates a NUL character, so you must release the control key
\par      before pressing space.)
\par 
\par  -- Command: prev
\par      (`C-a p', `C-a C-p')
\par      Switch to the previous window (the opposite of `C-a n').
\par 
\par 7.2 Other Window
\par ================
\par 
\par  -- Command: other
\par      (`C-a C-a')
\par      Switch to the last window displayed.  Note that this command
\par      defaults to the command character typed twice, unless overridden.
\par      For instance, if you use the option `-e]x', this command becomes
\par      `]]' (*note Command Character::).
\par 
\par 7.3 Select
\par ==========
\par 
\par  -- Command: select [n]
\par      (`C-a N', `C-a '')
\par      Switch to the window with the number N.  If no window number is
\par      specified, you get prompted for an identifier. This can be a
\par      window name (title) or a number.  When a new window is
\par      established, the lowest available number is assigned to this
\par      window.  Thus, the first window can be activated by `select 0';
\par      there can be no more than 10 windows present simultaneously
\par      (unless screen is compiled with a higher MAXWIN setting).  There
\par      are two special arguments, `select -' switches to the internal
\par      blank window and `select .' switches to the current window. The
\par      latter is useful if used with screen's `-X' option.
\par 
\par 
\par 7.4 Windowlist
\par ==============
\par 
\par  -- Command: windowlist [-b] [-m]
\par  -- Command: windowlist string [STRING]
\par  -- Command: windowlist title [TITLE]
\par      (`C-a "')
\par      Display all windows in a table for visual window selection.  The
\par      desired window can be selected via the standard movement keys
\par      (*note Movement::) and activated via the return key.  If the `-b'
\par      option is given, screen will switch to the blank window before
\par      presenting the list, so that the current window is also selectable.
\par      The `-m' option changes the order of the windows, instead of
\par      sorting by window numbers screen uses its internal
\par      most-recently-used list.
\par 
\par      The table format can be changed with the string and title option,
\par      the title is displayed as table heading, while the lines are made
\par      by using the string setting.  The default setting is `Num
\par      Name%=Flags' for the title and `%3n %t%=%f' for the lines. See the
\par      string escapes chapter (*note String Escapes::) for more codes
\par      (e.g. color settings).
\par 
\par 
\par 8 Session Management Commands
\par *****************************
\par 
\par Perhaps the most useful feature of `screen' is the way it allows the
\par user to move a session between terminals, by detaching and reattaching.
\par This also makes life easier for modem users who have to deal with
\par unexpected loss of carrier.
\par 
\par 8.1 Detach
\par ==========
\par 
\par  -- Command: autodetach state
\par      (none)
\par      Sets whether `screen' will automatically detach upon hangup, which
\par      saves all your running programs until they are resumed with a
\par      `screen -r' command.  When turned off, a hangup signal will
\par      terminate `screen' and all the processes it contains. Autodetach is
\par      on by default.
\par 
\par  -- Command: detach
\par      (`C-a d', `C-a C-d')
\par      Detach the `screen' session (disconnect it from the terminal and
\par      put it into the background).  A detached `screen' can be resumed by
\par      invoking `screen' with the `-r' option (*note Invoking Screen::).
\par      The `-h' option tells screen to immediately close the connection
\par      to the terminal (`hangup').
\par 
\par  -- Command: password [crypted_pw]
\par      (none)
\par      Present a crypted password in your `.screenrc' file and screen will
\par      ask for it, whenever someone attempts to resume a detached
\par      session. This is useful, if you have privileged programs running
\par      under `screen' and you want to protect your session from reattach
\par      attempts by users that managed to assume your uid. (I.e. any
\par      superuser.)  If no crypted password is specified, screen prompts
\par      twice a password and places its encryption in the paste buffer.
\par      Default is `none', which disables password checking.
\par 
\par 8.2 Power Detach
\par ================
\par 
\par  -- Command: pow_detach
\par      (`C-a D D')
\par      Mainly the same as `detach', but also sends a HANGUP signal to the
\par      parent process of `screen'.
\par      _Caution_: This will result in a logout if `screen' was started
\par      from your login shell.
\par 
\par  -- Command: pow_detach_msg [message]
\par      (none)
\par      The MESSAGE specified here is output whenever a power detach is
\par      performed. It may be used as a replacement for a logout message or
\par      to reset baud rate, etc.  Without parameter, the current message
\par      is shown.
\par 
\par 8.3 Lock
\par ========
\par 
\par  -- Command: lockscreen
\par      (`C-a x', `C-a C-x')
\par      Call a screenlock program (`/local/bin/lck' or `/usr/bin/lock' or
\par      a builtin, if no other is available). Screen does not accept any
\par      command keys until this program terminates. Meanwhile processes in
\par      the windows may continue, as the windows are in the detached state.
\par      The screenlock program may be changed through the environment
\par      variable `$LOCKPRG' (which must be set in the shell from which
\par      `screen' is started) and is executed with the user's uid and gid.
\par 
\par      Warning: When you leave other shells unlocked and have no password
\par      set on `screen', the lock is void: One could easily re-attach from
\par      an unlocked shell. This feature should rather be called
\par      `lockterminal'.
\par 
\par 8.4 Multiuser Session
\par =====================
\par 
\par These commands allow other users to gain access to one single `screen'
\par session. When attaching to a multiuser `screen' the sessionname is
\par specified as `username/sessionname' to the `-S' command line option.
\par `Screen' must be compiled with multiuser support to enable features
\par described here.
\par 
\par 8.4.1 Multiuser
\par ---------------
\par 
\par  -- Command: multiuser STATE
\par      (none)
\par      Switch between single-user and multi-user mode. Standard screen
\par      operation is single-user. In multi-user mode the commands
\par      `acladd', `aclchg' and `acldel' can be used to enable (and
\par      disable) other users accessing this `screen'.
\par 
\par 8.4.2 Acladd
\par ------------
\par 
\par  -- Command: acladd USERNAMES
\par  -- Command: addacl USERNAMES
\par      (none)
\par      Enable users to fully access this screen session. USERNAMES can be
\par      one user or a comma separated list of users. This command enables
\par      to attach to the `screen' session and performs the equivalent of
\par      `aclchg USERNAMES +rwx "#?"'. To add a user with restricted access,
\par      use the `aclchg' command below.  `Addacl' is a synonym to `acladd'.
\par      Multi-user mode only.
\par 
\par 8.4.3 Aclchg
\par ------------
\par 
\par  -- Command: aclchg USERNAMES PERMBITS LIST
\par  -- Command: chacl USERNAMES PERMBITS LIST
\par      (none)
\par      Change permissions for a comma separated list of users.
\par      Permission bits are represented as `r', `w' and `x'.  Prefixing
\par      `+' grants the permission, `-' removes it. The third parameter is
\par      a comma separated list of commands or windows (specified either by
\par      number or title). The special list `#' refers to all windows, `?'
\par      to all commands. If USERNAMES consists of a single `*', all known
\par      users are affected.  A command can be executed when the user has
\par      the `x' bit for it. The user can type input to a window when he
\par      has its `w' bit set and no other user obtains a writelock for this
\par      window. Other bits are currently ignored.  To withdraw the
\par      writelock from another user in e.g. window 2: `aclchg USERNAME
\par      -w+w 2'. To allow read-only access to the session: `aclchg
\par      USERNAME -w "#"'. As soon as a user's name is known to screen, he
\par      can attach to the session and (per default) has full permissions
\par      for all command and windows. Execution permission for the acl
\par      commands, `at' and others should also be removed or the user may
\par      be able to regain write permission.  `Chacl' is a synonym to
\par      `aclchg'.  Multi-user mode only.
\par 
\par 8.4.4 Acldel
\par ------------
\par 
\par  -- Command: acldel USERNAME
\par      (none)
\par      Remove a user from screen's access control list. If currently
\par      attached, all the user's displays are detached from the session.
\par      He cannot attach again.  Multi-user mode only.
\par 
\par 8.4.5 Aclgrp
\par ------------
\par 
\par  -- Command: aclgrp USERNAME [GROUPNAME]
\par      (none)
\par      Creates groups of users that share common access rights. The name
\par      of the group is the username of the group leader. Each member of
\par      the  group  inherits  the  permissions  that  are granted  to the
\par      group leader. That means, if a user fails an access check, another
\par      check is made for the group leader.  A user is removed from all
\par      groups the special value `none' is used for GROUPNAME. If the
\par      second parameter is omitted all groups the user is in are listed.
\par 
\par 8.4.6 Displays
\par --------------
\par 
\par  -- Command: displays
\par      (`C-a *')
\par      Shows a tabular listing  of  all  currently  connected  user
\par      front-ends  (displays).   This  is most useful for multiuser
\par      sessions.
\par 
\par 8.4.7 aclumask
\par --------------
\par 
\par  -- Command: aclumask [USERS]+/-BITS ...
\par  -- Command: umask [USERS]+/-BITS ...
\par      (none)
\par      This specifies the access other users have to  windows  that will
\par      be  created  by  the caller of the command. USERS may be no, one
\par      or a comma separated list of known usernames.  If  no  users  are
\par      specified,  a  list of all currently known users is assumed.  BITS
\par      is any  combination  of  access  control  bits  allowed defined
\par      with the `aclchg' command. The special username `?' predefines the
\par      access that  not  yet  known  users  will  be granted  to any
\par      window initially.  The special username `??' predefines the access
\par      that not yet known users  are  granted to any command. Rights of
\par      the special username nobody cannot be changed (see the `su'
\par      command).  `Umask' is a synonym to `aclumask'.
\par 
\par 8.4.8 Wall
\par ----------
\par 
\par  -- Command: wall MESSAGE
\par      (none)
\par      Write a message to all displays. The message will appear in the
\par      terminal's status line.
\par 
\par 8.4.9 Writelock
\par ---------------
\par 
\par  -- Command: writelock ON|OFF|AUTO
\par      (none)
\par      In addition to access control lists, not all users may be able to
\par      write to the same window at once. Per default, writelock is in
\par      `auto' mode and grants exclusive input permission to the user who
\par      is the first to switch to the particular window. When he leaves
\par      the window, other users may obtain the writelock (automatically).
\par      The writelock of the current window is disabled by the command
\par      `writelock off'. If the user issues the command `writelock on' he
\par      keeps the exclusive write permission while switching to other
\par      windows.
\par 
\par  -- Command: defwritelock ON|OFF|AUTO
\par      (none)
\par      Sets the default writelock behavior for new windows. Initially all
\par      windows will be created with no writelocks.
\par 
\par 8.4.10 Su
\par ---------
\par 
\par  -- Command: su [USERNAME [PASSWORD [PASSWORD2]]]
\par      (none)
\par      Substitute the user of a display. The  command  prompts  for all
\par      parameters that are omitted. If passwords are specified as
\par      parameters, they have  to  be  specified  un-crypted.  The first
\par      password  is matched against the systems passwd database, the
\par      second password  is  matched  against  the `screen' password  as
\par      set  with the commands `acladd' or `password'.  `Su' may be useful
\par      for the `screen' administrator to test multiuser  setups.  When
\par      the  identification  fails,  the  user has access to the commands
\par      available for user `nobody'. These are `detach', `license',
\par      `version', `help' and `displays'.
\par 
\par 8.5 Session Name
\par ================
\par 
\par  -- Command: sessionname [NAME]
\par      (none)
\par      Rename the current session. Note that for `screen -list' the name
\par      shows up with the process-id prepended. If the argument NAME is
\par      omitted, the name of this session is displayed.
\par      _Caution_: The `$STY' environment variable still reflects the old
\par      name. This may result in confusion.  The default is constructed
\par      from the tty and host names.
\par 
\par 8.6 Suspend
\par ===========
\par 
\par  -- Command: suspend
\par      (`C-a z', `C-a C-z')
\par      Suspend `screen'.  The windows are in the detached state while
\par      `screen' is suspended.  This feature relies on the parent shell
\par      being able to do job control.
\par 
\par 8.7 Quit
\par ========
\par 
\par  -- Command: quit
\par      (`C-a C-\\')
\par      Kill all windows and terminate `screen'.  Note that on VT100-style
\par      terminals the keys `C-4' and `C-\\' are identical.  So be careful
\par      not to type `C-a C-4' when selecting window no. 4.  Use the empty
\par      bind command (as in `bind "^\\"') to remove a key binding (*note
\par      Key Binding::).
\par 
\par 9 Regions
\par *********
\par 
\par Screen has the ability to display more than one window on the user's
\par display. This is done by splitting the screen in regions, which can
\par contain different windows.
\par 
\par 9.1 Split
\par =========
\par 
\par  -- Command: split
\par      (`C-a S')
\par      Split the current region into two new ones. All regions on the
\par      display are resized to make room for the new region. The blank
\par      window is displayed on the new region.
\par 
\par 9.2 Focus
\par =========
\par 
\par  -- Command: focus
\par      (`C-a <Tab>')
\par      Move the input focus to the next region. This is done in a cyclic
\par      way so that the top region is selected after the bottom one. If no
\par      subcommand is given it defaults to `down'. `up' cycles in the
\par      opposite order, `top' and `bottom' go to the top and bottom region
\par      respectively. Useful bindings are (j and k as in vi)
\par           bind j focus down
\par           bind k focus up
\par           bind t focus top
\par           bind b focus bottom
\par 
\par 9.3 Only
\par ========
\par 
\par  -- Command: only
\par      (`C-a Q')
\par      Kill all regions but the current one.
\par 
\par 9.4 Remove
\par ==========
\par 
\par  -- Command: remove
\par      (`C-a X')
\par      Kill the current region. This is a no-op if there is only one
\par      region.
\par 
\par 9.5 Resize
\par ==========
\par 
\par  -- Command: resize [(+/-)LINES]
\par      (none)
\par      Resize the current region. The space will be removed from or added
\par      to the region below or if there's not enough space from the region
\par      above.
\par           resize +N       increase current region height by N
\par           resize -N       decrease current region height by N
\par           resize  N       set current region height to N
\par           resize  =       make all windows equally high
\par           resize  max     maximize current region height
\par           resize  min     minimize current region height
\par 
\par 9.6 Caption
\par ===========
\par 
\par  -- Command: caption `always'|`splitonly' [string]
\par  -- Command: caption `string' [string]
\par      (none)
\par      This command controls the display of the window captions. Normally
\par      a caption is only used if more than one window is shown on the
\par      display (split screen mode). But if the type is set to `always',
\par      `screen' shows a caption even if only one window is displayed. The
\par      default is `splitonly'.
\par 
\par      The second form changes the text used for the caption. You can use
\par      all string escapes (*note String Escapes::). `Screen' uses a
\par      default of `%3n %t'.
\par 
\par      You can mix both forms by providing the string as an additional
\par      argument.
\par 
\par 9.7 Fit
\par =======
\par 
\par  -- Command: fit
\par      (`C-a F')
\par      Change the window size to the size of the current region. This
\par      command is needed because screen doesn't adapt the window size
\par      automatically if the window is displayed more than once.
\par 
\par 10 Window Settings
\par ******************
\par 
\par These commands control the way `screen' treats individual windows in a
\par session.  *Note Virtual Terminal::, for commands to control the
\par terminal emulation itself.
\par 
\par 10.1 Naming Windows (Titles)
\par ============================
\par 
\par You can customize each window's name in the window display (viewed with
\par the `windows' command (*note Windows::) by setting it with one of the
\par title commands.  Normally the name displayed is the actual command name
\par of the program created in the window.  However, it is sometimes useful
\par to distinguish various programs of the same name or to change the name
\par on-the-fly to reflect the current state of the window.
\par 
\par    The default name for all shell windows can be set with the
\par `shelltitle' command (*note Shell::).  You can specify the name you
\par want for a window with the `-t' option to the `screen' command when the
\par window is created (*note Screen Command::).  To change the name after
\par the window has been created you can use the title-string escape-sequence
\par (`<ESC> k NAME <ESC> \\') and the `title' command (C-a A).  The former
\par can be output from an application to control the window's name under
\par software control, and the latter will prompt for a name when typed.
\par You can also bind predefined names to keys with the `title' command to
\par set things quickly without prompting.
\par 
\par 10.1.1 Title Command
\par --------------------
\par 
\par  -- Command: title [windowtitle]
\par      (`C-a A')
\par      Set the name of the current window to WINDOWTITLE. If no name is
\par      specified, screen prompts for one.
\par 
\par 10.1.2 Dynamic Titles
\par ---------------------
\par 
\par `screen' has a shell-specific heuristic that is enabled by setting the
\par window's name to SEARCH|NAME and arranging to have a null title
\par escape-sequence output as a part of your prompt.  The SEARCH portion
\par specifies an end-of-prompt search string, while the NAME portion
\par specifies the default shell name for the window.  If the NAME ends in a
\par `:' `screen' will add what it believes to be the current command
\par running in the window to the end of the specified name (e.g. NAME:CMD).
\par Otherwise the current command name supersedes the shell name while it
\par is running.
\par 
\par    Here's how it works: you must modify your shell prompt to output a
\par null title-escape-sequence (<ESC> k <ESC> \\) as a part of your prompt.
\par The last part of your prompt must be the same as the string you
\par specified for the SEARCH portion of the title.  Once this is set up,
\par `screen' will use the title-escape-sequence to clear the previous
\par command name and get ready for the next command.  Then, when a newline
\par is received from the shell, a search is made for the end of the prompt.
\par If found, it will grab the first word after the matched string and use
\par it as the command name.  If the command name begins with `!', `%', or
\par `^', `screen' will use the first word on the following line (if found)
\par in preference to the just-found name.  This helps csh users get more
\par accurate titles when using job control or history recall commands.
\par 
\par 10.1.3 Setting up your prompt for shell titles
\par ----------------------------------------------
\par 
\par One thing to keep in mind when adding a null title-escape-sequence to
\par your prompt is that some shells (like the csh) count all the non-control
\par characters as part of the prompt's length.  If these invisible
\par characters aren't a multiple of 8 then backspacing over a tab will
\par result in an incorrect display.  One way to get around this is to use a
\par prompt like this:
\par 
\par      set prompt='^[[0000m^[k^[\\% '
\par 
\par    The escape-sequence `^[[0000m' not only normalizes the character
\par attributes, but all the zeros round the length of the invisible
\par characters up to 8.
\par 
\par    Tcsh handles escape codes in the prompt more intelligently, so you
\par can specify your prompt like this:
\par 
\par      set prompt="%\{\\ek\\e\\\\%\}\\% "
\par 
\par    Bash users will probably want to echo the escape sequence in the
\par PROMPT_COMMAND:
\par 
\par      PROMPT_COMMAND='printf "\\033k\\033\\134"'
\par 
\par    (I used `\\134' to output a `\\' because of a bug in v1.04).
\par 
\par 10.1.4 Setting up shell titles in your `.screenrc'
\par --------------------------------------------------
\par 
\par Here are some .screenrc examples:
\par 
\par      screen -t top 2 nice top
\par 
\par    Adding this line to your .screenrc would start a niced version of the
\par `top' command in window 2 named `top' rather than `nice'.
\par 
\par      shelltitle '> |csh'
\par      screen 1
\par 
\par    This file would start a shell using the given shelltitle.  The title
\par specified is an auto-title that would expect the prompt and the typed
\par command to look something like the following:
\par 
\par      /usr/joe/src/dir> trn
\par 
\par    (it looks after the '> ' for the command name).  The window status
\par would show the name `trn' while the command was running, and revert to
\par `csh' upon completion.
\par 
\par      bind R screen -t '% |root:' su
\par 
\par    Having this command in your .screenrc would bind the key sequence
\par `C-a R' to the `su' command and give it an auto-title name of `root:'.
\par For this auto-title to work, the screen could look something like this:
\par 
\par      % !em
\par      emacs file.c
\par 
\par    Here the user typed the csh history command `!em' which ran the
\par previously entered `emacs' command.  The window status would show
\par `root:emacs' during the execution of the command, and revert to simply
\par `root:' at its completion.
\par 
\par      bind o title
\par      bind E title ""
\par      bind u title (unknown)
\par 
\par    The first binding doesn't have any arguments, so it would prompt you
\par for a title when you type `C-a o'.  The second binding would clear an
\par auto-titles current setting (C-a E).  The third binding would set the
\par current window's title to `(unknown)' (C-a u).
\par 
\par 10.2 Console
\par ============
\par 
\par  -- Command: console [STATE]
\par      (none)
\par      Grabs or un-grabs the machines console output to a window. When
\par      the argument is omitted the current state is displayed.  _Note_:
\par      Only the owner of `/dev/console' can grab the console output. This
\par      command is only available if the host supports the ioctl
\par      `TIOCCONS'.
\par 
\par 10.3 Kill
\par =========
\par 
\par  -- Command: kill
\par      (`C-a k', `C-a C-k')
\par      Kill the current window.
\par      If there is an `exec' command running (*note Exec::) then it is
\par      killed.  Otherwise the process (e.g. shell) running in the window
\par      receives a `HANGUP' condition, the window structure is removed and
\par      screen (your display) switches to another window. When the last
\par      window is destroyed, `screen' exits.  After a kill screen switches
\par      to the previously displayed window.
\par      _Caution_: `emacs' users may find themselves killing their `emacs'
\par      session when trying to delete the current line.  For this reason,
\par      it is probably wise to use a different command character (*note
\par      Command Character::) or rebind `kill' to another key sequence,
\par      such as `C-a K' (*note Key Binding::).
\par 
\par 10.4 Login
\par ==========
\par 
\par  -- Command: deflogin state
\par      (none)
\par      Same as the `login' command except that the default setting for new
\par      windows is changed.  This defaults to `on' unless otherwise
\par      specified at compile time (*note Installation::). Both commands
\par      are only present when `screen' has been compiled with utmp support.
\par 
\par  -- Command: login [state]
\par      (`C-a L')
\par      Adds or removes the entry in `/etc/utmp' for the current window.
\par      This controls whether or not the window is "logged in".  In
\par      addition to this toggle, it is convenient to have "log in" and
\par      "log out" keys.  For instance, `bind I login on' and `bind O login
\par      off' will map these keys to be `C-a I' and `C-a O' (*note Key
\par      Binding::).
\par 
\par 10.5 Mode
\par =========
\par 
\par  -- Command: defmode mode
\par      (none)
\par      The mode of each newly allocated pseudo-tty is set to MODE.  MODE
\par      is an octal number as used by chmod(1).  Defaults to 0622 for
\par      windows which are logged in, 0600 for others (e.g. when `-ln' was
\par      specified for creation, *note Screen Command::).
\par 
\par 10.6 Monitoring
\par ===============
\par 
\par  -- Command: activity message
\par      (none)
\par      When any activity occurs in a background window that is being
\par      monitored, `screen' displays a notification in the message line.
\par      The notification message can be redefined by means of the
\par      `activity' command.  Each occurrence of `%' in MESSAGE is replaced
\par      by the number of the window in which activity has occurred, and
\par      each occurrence of `^G' is replaced by the definition for bell in
\par      your termcap (usually an audible bell).  The default message is
\par 
\par           'Activity in window %n'
\par 
\par      Note that monitoring is off for all windows by default, but can be
\par      altered by use of the `monitor' command (`C-a M').
\par 
\par  -- Command: defmonitor state
\par      (none)
\par      Same as the `monitor' command except that the default setting for
\par      new windows is changed.  Initial setting is `off'.
\par 
\par  -- Command: monitor [state]
\par      (`C-a M')
\par      Toggles monitoring of the current window.  When monitoring is
\par      turned on and the affected window is switched into the background,
\par      the activity notification message will be displayed in the status
\par      line at the first sign of output, and the window will also be
\par      marked with an `@' in the window-status display (*note Windows::).
\par      Monitoring defaults to `off' for all windows.
\par 
\par 10.7 Windows
\par ============
\par 
\par  -- Command: windows
\par      (`C-a w', `C-a C-w')
\par      Uses the message line to display a list of all the windows.  Each
\par      window is listed by number with the name of the program running in
\par      the window (or its title).
\par 
\par      The current window is marked with a `*'; the previous window is
\par      marked with a `-'; all the windows that are logged in are marked
\par      with a `$' (*note Login::); a background window that has received
\par      a bell is marked with a `!'; a background window that is being
\par      monitored and has had activity occur is marked with an `@' (*note
\par      Monitor::); a window which has output logging turned on is marked
\par      with `(L)'; windows occupied by other users are marked with `&' or
\par      `&&' if the window is shared by other users; windows in the zombie
\par      state are marked with `Z'.
\par 
\par      If this list is too long to fit on the terminal's status line only
\par      the portion around the current window is displayed.
\par 
\par 10.8 Hardstatus
\par ===============
\par 
\par `Screen' maintains a hardstatus line for every window. If a window gets
\par selected, the display's hardstatus will be updated to match the
\par window's hardstatus line.  The hardstatus line can be changed with the
\par ANSI Application Program Command (APC): `ESC_<string>ESC\\'. As a
\par convenience for xterm users the sequence `ESC]0..2;<string>^G' is also
\par accepted.
\par 
\par  -- Command: defhstatus [status]
\par      (none)
\par      The hardstatus line that all new windows will get is set to STATUS.
\par      This command is useful to make the hardstatus of every window
\par      display the window number or title or the like.  STATUS may
\par      contain the same directives as in the window messages, but the
\par      directive escape character is `^E' (octal 005) instead of `%'.
\par      This was done to make a misinterpretation of program generated
\par      hardstatus lines impossible.  If the parameter STATUS is omitted,
\par      the current default string is displayed.  Per default the
\par      hardstatus line of new windows is empty.
\par 
\par  -- Command: hstatus status
\par      (none)
\par      Changes the current window's hardstatus line to STATUS.
\par 
\par 11 Virtual Terminal
\par *******************
\par 
\par Each window in a `screen' session emulates a VT100 terminal, with some
\par extra functions added. The VT100 emulator is hard-coded, no other
\par terminal types can be emulated.  The commands described here modify the
\par terminal emulation.
\par 
\par 11.1 Control Sequences
\par ======================
\par 
\par The following is a list of control sequences recognized by `screen'.
\par `(V)' and `(A)' indicate VT100-specific and ANSI- or ISO-specific
\par functions, respectively.
\par 
\par      ESC E                           Next Line
\par      ESC D                           Index
\par      ESC M                           Reverse Index
\par      ESC H                           Horizontal Tab Set
\par      ESC Z                           Send VT100 Identification String
\par      ESC 7                   (V)     Save Cursor and Attributes
\par      ESC 8                   (V)     Restore Cursor and Attributes
\par      ESC [s                  (A)     Save Cursor and Attributes
\par      ESC [u                  (A)     Restore Cursor and Attributes
\par      ESC c                           Reset to Initial State
\par      ESC g                           Visual Bell
\par      ESC Pn p                        Cursor Visibility (97801)
\par          Pn = 6                      Invisible
\par               7                      Visible
\par      ESC =                   (V)     Application Keypad Mode
\par      ESC >                   (V)     Numeric Keypad Mode
\par      ESC # 8                 (V)     Fill Screen with E's
\par      ESC \\                   (A)     String Terminator
\par      ESC ^                   (A)     Privacy Message String (Message Line)
\par      ESC !                           Global Message String (Message Line)
\par      ESC k                           Title Definition String
\par      ESC P                   (A)     Device Control String
\par                                      Outputs a string directly to the host
\par                                      terminal without interpretation.
\par      ESC _                   (A)     Application Program Command (Hardstatus)
\par      ESC ] 0 ; string ^G     (A)     Operating System Command (Hardstatus, xterm
\par                                      title hack)
\par      ESC ] 83 ; cmd ^G       (A)     Execute screen command. This only works if
\par                                      multi-user support is compiled into screen.
\par                                      The pseudo-user ":window:" is used to check
\par                                      the access control list. Use "addacl :window:
\par                                      -rwx #?" to create a user with no rights and
\par                                      allow only the needed commands.
\par      Control-N               (A)     Lock Shift G1 (SO)
\par      Control-O               (A)     Lock Shift G0 (SI)
\par      ESC n                   (A)     Lock Shift G2
\par      ESC o                   (A)     Lock Shift G3
\par      ESC N                   (A)     Single Shift G2
\par      ESC O                   (A)     Single Shift G3
\par      ESC ( Pcs               (A)     Designate character set as G0
\par      ESC ) Pcs               (A)     Designate character set as G1
\par      ESC * Pcs               (A)     Designate character set as G2
\par      ESC + Pcs               (A)     Designate character set as G3
\par      ESC [ Pn ; Pn H                 Direct Cursor Addressing
\par      ESC [ Pn ; Pn f                 same as above
\par      ESC [ Pn J                      Erase in Display
\par            Pn = None or 0            From Cursor to End of Screen
\par                 1                    From Beginning of Screen to Cursor
\par                 2                    Entire Screen
\par      ESC [ Pn K                      Erase in Line
\par            Pn = None or 0            From Cursor to End of Line
\par                 1                    From Beginning of Line to Cursor
\par                 2                    Entire Line
\par      ESC [ Pn X                      Erase character
\par      ESC [ Pn A                      Cursor Up
\par      ESC [ Pn B                      Cursor Down
\par      ESC [ Pn C                      Cursor Right
\par      ESC [ Pn D                      Cursor Left
\par      ESC [ Pn E                      Cursor next line
\par      ESC [ Pn F                      Cursor previous line
\par      ESC [ Pn G                      Cursor horizontal position
\par      ESC [ Pn `                      same as above
\par      ESC [ Pn d                      Cursor vertical position
\par      ESC [ Ps ;...; Ps m             Select Graphic Rendition
\par            Ps = None or 0            Default Rendition
\par                 1                    Bold
\par                 2            (A)     Faint
\par                 3            (A)     Standout Mode (ANSI: Italicized)
\par                 4                    Underlined
\par                 5                    Blinking
\par                 7                    Negative Image
\par                 22           (A)     Normal Intensity
\par                 23           (A)     Standout Mode off (ANSI: Italicized off)
\par                 24           (A)     Not Underlined
\par                 25           (A)     Not Blinking
\par                 27           (A)     Positive Image
\par                 30           (A)     Foreground Black
\par                 31           (A)     Foreground Red
\par                 32           (A)     Foreground Green
\par                 33           (A)     Foreground Yellow
\par                 34           (A)     Foreground Blue
\par                 35           (A)     Foreground Magenta
\par                 36           (A)     Foreground Cyan
\par                 37           (A)     Foreground White
\par                 39           (A)     Foreground Default
\par                 40           (A)     Background Black
\par                 ...                  ...
\par                 49           (A)     Background Default
\par      ESC [ Pn g                      Tab Clear
\par            Pn = None or 0            Clear Tab at Current Position
\par                 3                    Clear All Tabs
\par      ESC [ Pn ; Pn r         (V)     Set Scrolling Region
\par      ESC [ Pn I              (A)     Horizontal Tab
\par      ESC [ Pn Z              (A)     Backward Tab
\par      ESC [ Pn L              (A)     Insert Line
\par      ESC [ Pn M              (A)     Delete Line
\par      ESC [ Pn @              (A)     Insert Character
\par      ESC [ Pn P              (A)     Delete Character
\par      ESC [ Pn S                      Scroll Scrolling Region Up
\par      ESC [ Pn T                      Scroll Scrolling Region Down
\par      ESC [ Pn ^                      same as above
\par      ESC [ Ps ;...; Ps h             Set Mode
\par      ESC [ Ps ;...; Ps l             Reset Mode
\par            Ps = 4            (A)     Insert Mode
\par                 20           (A)     `Automatic Linefeed' Mode.
\par                 34                   Normal Cursor Visibility
\par                 ?1           (V)     Application Cursor Keys
\par                 ?3           (V)     Change Terminal Width to 132 columns
\par                 ?5           (V)     Reverse Video
\par                 ?6           (V)     `Origin' Mode
\par                 ?7           (V)     `Wrap' Mode
\par                 ?9                   X10 mouse tracking
\par                 ?25          (V)     Visible Cursor
\par                 ?47                  Alternate Screen (old xterm code)
\par                 ?1000        (V)     VT200 mouse tracking
\par                 ?1047                Alternate Screen (new xterm code)
\par                 ?1049                Alternate Screen (new xterm code)
\par      ESC [ 5 i               (A)     Start relay to printer (ANSI Media Copy)
\par      ESC [ 4 i               (A)     Stop relay to printer (ANSI Media Copy)
\par      ESC [ 8 ; Ph ; Pw t             Resize the window to `Ph' lines and
\par                                      `Pw' columns (SunView special)
\par      ESC [ c                         Send VT100 Identification String
\par      ESC [ x                 (V)     Send Terminal Parameter Report
\par      ESC [ > c                       Send Secondary Device Attributes String
\par      ESC [ 6 n                       Send Cursor Position Report
\par 
\par 11.2 Input Translation
\par ======================
\par 
\par In order to do a full VT100 emulation `screen' has to detect that a
\par sequence of characters in the input stream was generated by a keypress
\par on the user's keyboard and insert the VT100 style escape sequence.
\par `Screen' has a very flexible way of doing this by making it possible to
\par map arbitrary commands on arbitrary sequences of characters. For
\par standard VT100 emulation the command will always insert a string in the
\par input buffer of the window (see also command `stuff', *note Paste::).
\par Because the sequences generated by a keypress can change after a
\par reattach from a different terminal type, it is possible to bind
\par commands to the termcap name of the keys.  `Screen' will insert the
\par correct binding after each reattach. See *note Bindkey:: for further
\par details on the syntax and examples.
\par 
\par    Here is the table of the default key bindings. (A) means that the
\par command is executed if the keyboard is switched into application mode.
\par 
\par      Key name        Termcap name    Command
\par      -----------------------------------------------------
\par      Cursor up            ku         stuff \\033[A
\par                                      stuff \\033OA      (A)
\par      Cursor down          kd         stuff \\033[B
\par                                      stuff \\033OB      (A)
\par      Cursor right         kr         stuff \\033[C
\par                                      stuff \\033OC      (A)
\par      Cursor left          kl         stuff \\033[D
\par                                      stuff \\033OD      (A)
\par      Function key 0       k0         stuff \\033[10~
\par      Function key 1       k1         stuff \\033OP
\par      Function key 2       k2         stuff \\033OQ
\par      Function key 3       k3         stuff \\033OR
\par      Function key 4       k4         stuff \\033OS
\par      Function key 5       k5         stuff \\033[15~
\par      Function key 6       k6         stuff \\033[17~
\par      Function key 7       k7         stuff \\033[18~
\par      Function key 8       k8         stuff \\033[19~
\par      Function key 9       k9         stuff \\033[20~
\par      Function key 10      k;         stuff \\033[21~
\par      Function key 11      F1         stuff \\033[23~
\par      Function key 12      F2         stuff \\033[24~
\par      Home                 kh         stuff \\033[1~
\par      End                  kH         stuff \\033[4~
\par      Insert               kI         stuff \\033[2~
\par      Delete               kD         stuff \\033[3~
\par      Page up              kP         stuff \\033[5~
\par      Page down            kN         stuff \\033[6~
\par      Keypad 0             f0         stuff 0
\par                                      stuff \\033Op      (A)
\par      Keypad 1             f1         stuff 1
\par                                      stuff \\033Oq      (A)
\par      Keypad 2             f2         stuff 2
\par                                      stuff \\033Or      (A)
\par      Keypad 3             f3         stuff 3
\par                                      stuff \\033Os      (A)
\par      Keypad 4             f4         stuff 4
\par                                      stuff \\033Ot      (A)
\par      Keypad 5             f5         stuff 5
\par                                      stuff \\033Ou      (A)
\par      Keypad 6             f6         stuff 6
\par                                      stuff \\033Ov      (A)
\par      Keypad 7             f7         stuff 7
\par                                      stuff \\033Ow      (A)
\par      Keypad 8             f8         stuff 8
\par                                      stuff \\033Ox      (A)
\par      Keypad 9             f9         stuff 9
\par                                      stuff \\033Oy      (A)
\par      Keypad +             f+         stuff +
\par                                      stuff \\033Ok      (A)
\par      Keypad -             f-         stuff -
\par                                      stuff \\033Om      (A)
\par      Keypad *             f*         stuff *
\par                                      stuff \\033Oj      (A)
\par      Keypad /             f/         stuff /
\par                                      stuff \\033Oo      (A)
\par      Keypad =             fq         stuff =
\par                                      stuff \\033OX      (A)
\par      Keypad .             f.         stuff .
\par                                      stuff \\033On      (A)
\par      Keypad ,             f,         stuff ,
\par                                      stuff \\033Ol      (A)
\par      Keypad enter         fe         stuff \\015
\par                                      stuff \\033OM      (A)
\par 
\par 11.3 Digraph
\par ============
\par 
\par  -- Command: digraph [preset]
\par      (none)
\par      This command prompts the user for a digraph sequence. The next two
\par      characters typed are looked up in a builtin table and the
\par      resulting character is inserted in the input stream. For example,
\par      if the user enters `a"', an a-umlaut will be inserted. If the
\par      first character entered is a 0 (zero), `screen' will treat the
\par      following characters (up to three) as an octal number instead.
\par      The optional argument PRESET is treated as user input, thus one
\par      can create an "umlaut" key.  For example the command `bindkey ^K
\par      digraph '"'' enables the user to generate an a-umlaut by typing
\par      `CTRL-K a'.
\par 
\par 11.4 Bell
\par =========
\par 
\par  -- Command: bell_msg [message]
\par      (none)
\par      When a bell character is sent to a background window, `screen'
\par      displays a notification in the message line.  The notification
\par      message can be re-defined by this command.  Each occurrence of `%'
\par      in MESSAGE is replaced by the number of the window to which a bell
\par      has been sent, and each occurrence of `^G' is replaced by the
\par      definition for bell in your termcap (usually an audible bell).
\par      The default message is
\par 
\par           'Bell in window %n'
\par 
\par      An empty message can be supplied to the `bell_msg' command to
\par      suppress output of a message line (`bell_msg ""').  Without
\par      parameter, the current message is shown.
\par 
\par  -- Command: vbell [state]
\par      (`C-a C-g')
\par      Sets or toggles the visual bell setting for the current window. If
\par      `vbell' is switched to `on', but your terminal does not support a
\par      visual bell, the visual bell message is displayed in the status
\par      line when the bell character is received.  Visual bell support of
\par      a terminal is defined by the termcap variable `vb'. *Note Visual
\par      Bell: (termcap)Bell, for more information on visual bells.  The
\par      equivalent terminfo capability is `flash'.
\par 
\par      Per  default, `vbell' is `off', thus the audible bell is used.
\par 
\par  -- Command: vbell_msg [message]
\par      (none)
\par      Sets the visual bell message. MESSAGE is printed to the status
\par      line if the window receives a bell character (^G), `vbell' is set
\par      to `on' and the terminal does not support a visual bell.  The
\par      default message is `Wuff, Wuff!!'.  Without parameter, the current
\par      message is shown.
\par 
\par  -- Command: vbellwait sec
\par      (none)
\par      Define a delay in seconds after each display of `screen' 's visual
\par      bell message. The default is 1 second.
\par 
\par 11.5 Clear
\par ==========
\par 
\par  -- Command: clear
\par      (`C-a C')
\par      Clears the screen and saves its contents to the scrollback buffer.
\par 
\par 11.6 Info
\par =========
\par 
\par  -- Command: info
\par      (`C-a i', `C-a C-i')
\par      Uses the message line to display some information about the current
\par      window: the cursor position in the form `(COLUMN,ROW)' starting
\par      with `(1,1)', the terminal width and height plus the size of the
\par      scrollback buffer in lines, like in `(80,24)+50', the current
\par      state of window XON/XOFF flow control is shown like this (*note
\par      Flow Control::):
\par             +flow     automatic flow control, currently on.
\par             -flow     automatic flow control, currently off.
\par             +(+)flow  flow control enabled. Agrees with automatic control.
\par             -(+)flow  flow control disabled. Disagrees with automatic control.
\par             +(-)flow  flow control enabled. Disagrees with automatic control.
\par             -(-)flow  flow control disabled. Agrees with automatic control.
\par 
\par      The current line wrap setting (`+wrap' indicates enabled, `-wrap'
\par      not) is also shown. The flags `ins', `org', `app', `log', `mon'
\par      and `nored' are displayed when the window is in insert mode,
\par      origin mode, application-keypad mode, has output logging, activity
\par      monitoring or partial redraw enabled.
\par 
\par      The currently active character set (`G0', `G1', `G2', or `G3'),
\par      and in square brackets the terminal character sets that are
\par      currently designated as `G0' through `G3'.  If the window is in
\par      UTF-8 mode, the string `UTF-8' is shown instead.  Additional modes
\par      depending on the type of the window are displayed at the end of
\par      the status line (*note Window Types::).
\par 
\par      If the state machine of the terminal emulator is in a non-default
\par      state, the info line is started with a string identifying the
\par      current state.
\par 
\par      For system information use `time'.
\par 
\par  -- Command: dinfo
\par      (none)
\par      Show what screen thinks about your terminal. Useful if you want to
\par      know why features like color or the alternate charset don't work.
\par 
\par 11.7 Redisplay
\par ==============
\par 
\par  -- Command: allpartial state
\par      (none)
\par      If set to on, only the current cursor line is refreshed on window
\par      change.  This affects all windows and is useful for slow terminal
\par      lines. The previous setting of full/partial refresh for each
\par      window is restored with `allpartial off'. This is a global flag
\par      that immediately takes effect on all windows overriding the
\par      `partial' settings. It does not change the default redraw behavior
\par      of newly created windows.
\par 
\par  -- Command: altscreen state
\par      (none)
\par      If set to on, "alternate screen" support is enabled in virtual
\par      terminals, just like in xterm.  Initial setting is `off'.
\par 
\par  -- Command: partial state
\par      (none)
\par      Defines whether the display should be refreshed (as with
\par      `redisplay') after switching to the current window. This command
\par      only affects the current window.  To immediately affect all
\par      windows use the `allpartial' command.  Default is `off', of
\par      course.  This default is fixed, as there is currently no
\par      `defpartial' command.
\par 
\par  -- Command: redisplay
\par      (`C-a l', `C-a C-l')
\par      Redisplay the current window.  Needed to get a full redisplay in
\par      partial redraw mode.
\par 
\par 11.8 Wrap
\par =========
\par 
\par  -- Command: wrap state
\par      (`C-a r', `C-a C-r')
\par      Sets the line-wrap setting for the current window.  When line-wrap
\par      is on, the second consecutive printable character output at the
\par      last column of a line will wrap to the start of the following
\par      line.  As an added feature, backspace (^H) will also wrap through
\par      the left margin to the previous line.  Default is `on'.
\par 
\par  -- Command: defwrap state
\par      (none)
\par      Same as the `wrap' command except that the default setting for new
\par      windows is changed. Initially line-wrap is on and can be toggled
\par      with the `wrap' command (`C-a r') or by means of "C-a : wrap
\par      on|off".
\par 
\par 11.9 Reset
\par ==========
\par 
\par  -- Command: reset
\par      (`C-a Z')
\par      Reset the virtual terminal to its "power-on" values. Useful when
\par      strange settings (like scroll regions or graphics character set)
\par      are left over from an application.
\par 
\par 11.10 Window Size
\par =================
\par 
\par  -- Command: width [`-w'|`-d'] [cols [lines]]
\par      (`C-a W')
\par      Toggle the window width between 80 and 132 columns, or set it to
\par      COLS columns if an argument is specified.  This requires a capable
\par      terminal and the termcap entries `Z0' and `Z1'.  See the `termcap'
\par      command (*note Termcap::), for more information.  You can also
\par      specify a height if you want to change  both  values.  The `-w'
\par      option tells screen to leave the display size unchanged and just
\par      set the  window  size, `-d' vice versa.
\par 
\par  -- Command: height [`-w'|`-d'] [lines [cols]]
\par      (none)
\par      Set the display height to a specified number of lines. When no
\par      argument is given it toggles between 24 and 42 lines display.
\par 
\par 11.11 Character Processing
\par ==========================
\par 
\par  -- Command: c1 [state]
\par      (none)
\par      Change c1 code processing. `c1 on' tells screen to treat the input
\par      characters between 128 and 159 as control functions.  Such an
\par      8-bit code is normally the same as ESC followed by the
\par      corresponding 7-bit code. The default setting is to process c1
\par      codes and can be changed with the `defc1' command.  Users with
\par      fonts that have usable characters in the c1 positions may want to
\par      turn this off.
\par 
\par 
\par  -- Command: gr [state]
\par      (none)
\par      Turn GR charset switching on/off. Whenever screen sees an input
\par      char with an 8th bit set, it will use the charset stored in the GR
\par      slot and print the character with the 8th bit stripped. The
\par      default (see also `defgr') is not to process GR switching because
\par      otherwise the ISO88591 charset would not work.
\par 
\par  -- Command: bce [state]
\par      (none)
\par      Change background-color-erase setting. If `bce' is set to on, all
\par      characters cleared by an erase/insert/scroll/clear operation will
\par      be displayed in the current background color.  Otherwise the
\par      default background color is used.
\par 
\par  -- Command: encoding enc [denc]
\par      (none)
\par      Tell screen how to interpret the input/output. The first argument
\par      sets the encoding of the current window.  Each window can emulate
\par      a different encoding. The optional second parameter overwrites the
\par      encoding of the connected terminal.  It should never be needed as
\par      screen uses the locale setting to detect the encoding.  There is
\par      also a way to select a terminal encoding depending on the terminal
\par      type by using the `KJ' termcap entry. *Note Special Capabilities::.
\par 
\par      Supported encodings are `eucJP', `SJIS', `eucKR', `eucCN', `Big5',
\par      `GBK', `KOI8-R', `CP1251', `UTF-8', `ISO8859-2', `ISO8859-3',
\par      `ISO8859-4', `ISO8859-5', `ISO8859-6', `ISO8859-7', `ISO8859-8',
\par      `ISO8859-9', `ISO8859-10', `ISO8859-15', `jis'.
\par 
\par      See also `defencoding', which changes the default setting of a new
\par      window.
\par 
\par  -- Command: charset set
\par      (none)
\par      Change the current character set slot designation and charset
\par      mapping.  The first four character of SET are treated as charset
\par      designators while the fifth and sixth character must be in range
\par      `0' to `3' and set the GL/GR charset mapping. On every position a
\par      `.' may be used to indicate that the corresponding charset/mapping
\par      should not be changed (SET is padded to six characters internally
\par      by appending `.' chars). New windows have `BBBB02' as default
\par      charset, unless a `encoding' command is active.
\par 
\par      The current setting can be viewed with the *note Info:: command.
\par 
\par  -- Command: utf8 [state [dstate]]
\par      (none)
\par      Change the encoding used in the current window. If utf8 is
\par      enabled, the strings sent to the window will be UTF-8 encoded and
\par      vice versa.  Omitting the parameter toggles the setting. If a
\par      second parameter is given, the display's encoding is also changed
\par      (this should rather be done with screen's `-U' option).  See also
\par      `defutf8', which changes the default setting of a new window.
\par 
\par  -- Command: defc1 state
\par      (none)
\par      Same as the `c1' command except that the default setting for new
\par      windows is changed. Initial setting is `on'.
\par 
\par  -- Command: defgr state
\par      (none)
\par      Same as the `gr' command except that the default setting for new
\par      windows is changed. Initial setting is `off'.
\par 
\par  -- Command: defbce state
\par      (none)
\par      Same as the `bce' command except that the default setting for new
\par      windows is changed. Initial setting is `off'.
\par 
\par  -- Command: defencoding enc
\par      (none)
\par      Same as the `encoding' command except that the default setting for
\par      new windows is changed. Initial setting is the encoding taken from
\par      the terminal.
\par 
\par  -- Command: defcharset [set]
\par      Like the `charset' command except that the default setting for new
\par      windows is changed. Shows current default if called without
\par      argument.
\par 
\par  -- Command: defutf8 state
\par      (none)
\par      Same as the `utf8' command except that the default setting for new
\par      windows is changed. Initial setting is `on' if screen was started
\par      with `-U', otherwise `off'.
\par 
\par 12 Copy and Paste
\par *****************
\par 
\par For those confined to a hardware terminal, these commands provide a cut
\par and paste facility more powerful than those provided by most windowing
\par systems.
\par 
\par 12.1 Copying
\par ============
\par 
\par  -- Command: copy
\par      (`C-a [', `C-a C-[', `C-a <ESC>')
\par      Enter copy/scrollback mode. This allows you to copy text from the
\par      current window and its history into the paste buffer. In this mode
\par      a `vi'-like full screen editor is active, with controls as
\par      outlined below.
\par 
\par 12.1.1 CR/LF
\par ------------
\par 
\par  -- Command: crlf [state]
\par      (none)
\par      This affects the copying of text regions with the `C-a [' command.
\par      If it is set to `on', lines will be separated by the two character
\par      sequence `CR'/`LF'.  Otherwise only `LF' is used.  `crlf' is off
\par      by default.  When no parameter is given, the state is toggled.
\par 
\par 12.1.2 Scrollback
\par -----------------
\par 
\par  -- Command: defscrollback num
\par      (none)
\par      Same as the `scrollback' command except that the default setting
\par      for new windows is changed.  Defaults to 100.
\par 
\par  -- Command: scrollback num
\par      (none)
\par      Set the size of the scrollback buffer for the current window to
\par      NUM lines.  The default scrollback is 100 lines.  Use `C-a i' to
\par      view the current setting.
\par 
\par  -- Command: compacthist [state]
\par      (none)
\par      This tells screen whether to suppress trailing blank lines when
\par      scrolling up text into the history buffer. Turn compacting `on' to
\par      hold more useful lines in your scrollback buffer.
\par 
\par 12.1.3 markkeys
\par ---------------
\par 
\par  -- Command: markkeys string
\par      (none)
\par      This is a method of changing the keymap used for copy/history
\par      mode.  The string is made up of OLDCHAR=NEWCHAR pairs which are
\par      separated by `:'. Example: The command `markkeys h=^B:l=^F:$=^E'
\par      would set some keys to be more familiar to `emacs' users.  If your
\par      terminal sends characters, that cause you to abort copy mode, then
\par      this command may help by binding these characters to do nothing.
\par      The no-op character is `@' and is used like this: `markkeys @=L=H'
\par      if you do not want to use the `H' or `L' commands any longer.  As
\par      shown in this example, multiple keys can be assigned to one
\par      function in a single statement.
\par 
\par 12.1.4 Movement Keys
\par --------------------
\par 
\par `h', `j', `k', `l' move the cursor line by line or column by column.
\par 
\par `0', `^' and `$' move to the leftmost column or to the first or last
\par non-whitespace character on the line.
\par 
\par `H', `M' and `L' move the cursor to the leftmost column of the top,
\par center or bottom line of the window.
\par 
\par `+' and `-' move the cursor to the leftmost column of the next or
\par previous line.
\par 
\par `G' moves to the specified absolute line (default: end of buffer).
\par 
\par `|' moves to the specified absolute column.
\par 
\par `w', `b', `e' move the cursor word by word.
\par 
\par `B', `E' move the cursor WORD by WORD (as in vi).
\par 
\par `C-u' and `C-d' scroll the display up/down by the specified amount of
\par lines while preserving the cursor position. (Default: half screenful).
\par 
\par `C-b' and `C-f' move the cursor up/down a full screen.
\par 
\par `g' moves to the beginning of the buffer.
\par 
\par `%' jumps to the specified percentage of the buffer.
\par 
\par    Note that Emacs-style movement keys can be specified by a .screenrc
\par command. (`markkeys "h=^B:l=^F:$=^E"') There is no simple method for a
\par full emacs-style keymap, however, as this involves multi-character
\par codes.
\par 
\par 12.1.5 Marking
\par --------------
\par 
\par The copy range is specified by setting two marks. The text between these
\par marks will be highlighted. Press `space' to set the first or second
\par mark respectively.
\par 
\par `Y' and `y' can be used to mark one whole line or to mark from start of
\par line.
\par 
\par `W' marks exactly one word.
\par 
\par 12.1.6 Repeat Count
\par -------------------
\par 
\par Any command in copy mode can be prefixed with a number (by pressing
\par digits `0...9') which is taken as a repeat count. Example: `C-a C-[ H
\par 10 j 5 Y' will copy lines 11 to 15 into the paste buffer.
\par 
\par 12.1.7 Searching
\par ----------------
\par 
\par `/' `vi'-like search forward.
\par 
\par `?' `vi'-like search backward.
\par 
\par `C-a s' `emacs' style incremental search forward.
\par 
\par `C-r' `emacs' style reverse i-search.
\par 
\par  -- Command: ignorecase [state]
\par      (none)
\par      Tell screen to ignore the case of characters in searches. Default
\par      is `off'.
\par 
\par 12.1.8 Specials
\par ---------------
\par 
\par There are, however, some keys that act differently here from in `vi'.
\par `Vi' does not allow to yank rectangular blocks of text, but `screen'
\par does. Press
\par 
\par `c' or `C' to set the left or right margin respectively. If no repeat
\par count is given, both default to the current cursor position.
\par Example: Try this on a rather full text screen: `C-a [ M 20 l SPACE c
\par 10 l 5 j C SPACE'.
\par 
\par This moves one to the middle line of the screen, moves in 20 columns
\par left, marks the beginning of the paste buffer, sets the left column,
\par moves 5 columns down, sets the right column, and then marks the end of
\par the paste buffer. Now try:
\par `C-a [ M 20 l SPACE 10 l 5 j SPACE'
\par 
\par and notice the difference in the amount of text copied.
\par 
\par `J' joins lines. It toggles between 4 modes: lines separated by a
\par newline character (012), lines glued seamless, lines separated by a
\par single space or comma separated lines. Note that you can prepend the
\par newline character with a carriage return character, by issuing a `set
\par crlf on'.
\par 
\par `v' is for all the `vi' users who use `:set numbers' - it toggles the
\par left margin between column 9 and 1.
\par 
\par `a' before the final space key turns on append mode. Thus the contents
\par of the paste buffer will not be overwritten, but appended to.
\par 
\par `A' turns on append mode and sets a (second) mark.
\par 
\par `>' sets the (second) mark and writes the contents of the paste buffer
\par to the screen-exchange file (`/tmp/screen-exchange' per default) once
\par copy-mode is finished.  *Note Screen Exchange::.
\par This example demonstrates how to dump the whole scrollback buffer to
\par that file:
\par `C-a [ g SPACE G $ >'.
\par 
\par `C-g' gives information about the current line and column.
\par 
\par `x' exchanges the first mark and the current cursor position. You can
\par use this to adjust an already placed mark.
\par 
\par `@' does nothing.  Absolutely nothing.  Does not even exit copy mode.
\par 
\par All keys not described here exit copy mode.
\par 
\par 12.2 Paste
\par ==========
\par 
\par  -- Command: paste [registers [destination]]
\par      (`C-a ]', `C-a C-]')
\par      Write the (concatenated) contents of the specified registers to
\par      the stdin stream of the current window.  The register `.' is
\par      treated as the paste buffer. If no parameter is specified the user
\par      is prompted to enter a single register. The paste buffer can be
\par      filled with the `copy', `history' and `readbuf' commands.  Other
\par      registers can be filled with the `register', `readreg' and `paste'
\par      commands.  If `paste' is called with a second argument, the
\par      contents of the specified registers is pasted into the named
\par      destination register rather than the window. If `.' is used as the
\par      second argument, the display's paste buffer is the destination.
\par      Note, that `paste' uses a wide variety of resources: Usually both,
\par      a current window and a current display are required. But whenever
\par      a second argument is specified no current window is needed. When
\par      the source specification only contains registers (not the paste
\par      buffer) then there need not be a current display (terminal
\par      attached), as the registers are a global resource. The paste
\par      buffer exists once for every user.
\par 
\par  -- Command: stuff string
\par      (none)
\par      Stuff the string STRING in the input buffer of the current window.
\par      This is like the `paste' command, but with much less overhead.
\par      You cannot paste large buffers with the `stuff' command. It is most
\par      useful for key bindings. *Note Bindkey::.
\par 
\par  -- Command: pastefont [state]
\par      Tell screen to include font information in the paste buffer. The
\par      default is not to do so. This command is especially useful for
\par      multi character fonts like kanji.
\par 
\par  -- Command: slowpaste msec
\par  -- Command: defslowpaste msec
\par      (none)
\par      Define the speed text is inserted in the current window by the
\par      `paste' command. If the slowpaste value is nonzero text is written
\par      character by character.  `screen' will pause for MSEC milliseconds
\par      after each write to allow the application to process the input.
\par      only use `slowpaste' if your underlying system exposes flow
\par      control problems while pasting large amounts of text.
\par      `defslowpaste' specifies the default for new windows.
\par 
\par  -- Command: readreg [-e encoding] [register [filename]]
\par      (none)
\par      Does one of two things, dependent on number of arguments: with
\par      zero or one arguments it it duplicates the paste buffer contents
\par      into the register specified or entered at the prompt. With two
\par      arguments it reads the contents of the named file into the
\par      register, just as `readbuf' reads the screen-exchange file into
\par      the paste buffer.  You can tell screen the encoding of the file
\par      via the `-e' option.  The following example will paste the
\par      system's password file into the screen window (using register p,
\par      where a copy remains):
\par 
\par           C-a : readreg p /etc/passwd
\par           C-a : paste p
\par 
\par 12.3 Registers
\par ==============
\par 
\par  -- Command: copy_reg [key]
\par      (none)
\par      Removed. Use `readreg' instead.
\par 
\par  -- Command: ins_reg [key]
\par      (none)
\par      Removed. Use `paste' instead.
\par 
\par  -- Command: process [key]
\par      (none)
\par      Stuff the contents of the specified register into the `screen'
\par      input queue. If no argument is given you are prompted for a
\par      register name. The text is parsed as if it had been typed in from
\par      the user's keyboard. This command can be used to bind multiple
\par      actions to a single key.
\par 
\par  -- Command: register [-e encoding] key string
\par      (none)
\par      Save the specified STRING to the register KEY.  The encoding of
\par      the string can be specified via the `-e' option.
\par 
\par 12.4 Screen Exchange
\par ====================
\par 
\par  -- Command: bufferfile [EXCHANGE-FILE]
\par      (none)
\par      Change the filename used for reading and writing with the paste
\par      buffer.  If the EXCHANGE-FILE parameter is omitted, `screen'
\par      reverts to the default of `/tmp/screen-exchange'.  The following
\par      example will paste the system's password file into the screen
\par      window (using the paste buffer, where a copy remains):
\par 
\par           C-a : bufferfile /etc/passwd
\par           C-a < C-a ]
\par           C-a : bufferfile
\par 
\par  -- Command: readbuf [-e ENCODING] [FILENAME]
\par      (`C-a <')
\par      Reads the contents of the specified file into the paste buffer.
\par      You can tell screen the encoding of the file via the `-e' option.
\par      If no file is specified, the screen-exchange filename is used.
\par 
\par  -- Command: removebuf
\par      (`C-a =')
\par      Unlinks the screen-exchange file.
\par 
\par  -- Command: writebuf [-e ENCODING] [FILENAME]
\par      (`C-a >')
\par      Writes the contents of the paste buffer to the specified file, or
\par      the public accessible screen-exchange file if no filename is given.
\par      This is thought of as a primitive means of communication between
\par      `screen' users on the same host.  If an encoding is specified the
\par      paste buffer is recoded on the fly to match the encoding.  See also
\par      `C-a <ESC>' (*note Copy::).
\par 
\par 12.5 History
\par ============
\par 
\par  -- Command: history
\par      (`C-a \{')
\par      Usually users work with a shell that allows easy access to previous
\par      commands.  For example, `csh' has the command `!!' to repeat the
\par      last command executed.  `screen' provides a primitive way of
\par      recalling "the command that started ...": You just type the first
\par      letter of that command, then hit `C-a \{' and `screen' tries to
\par      find a previous line that matches with the prompt character to the
\par      left of the cursor. This line is pasted into this window's input
\par      queue.  Thus you have a crude command history (made up by the
\par      visible window and its scrollback buffer).
\par 
\par 13 Subprocess Execution
\par ***********************
\par 
\par Control Input or Output of a window by another filter process.  Use
\par with care!
\par 
\par 13.1 Exec
\par =========
\par 
\par  -- Command: exec [[FDPAT] NEWCOMMAND [ARGS ... ]]
\par      (none)
\par      Run a unix subprocess (specified by an executable path NEWCOMMAND
\par      and its optional arguments) in the current window. The flow of
\par      data between newcommands stdin/stdout/stderr, the process
\par      originally started (let us call it "application-process") and
\par      screen itself (window) is controlled by the file descriptor
\par      pattern FDPAT.  This pattern is basically a three character
\par      sequence representing stdin, stdout and stderr of newcommand. A
\par      dot (`.') connects the file descriptor to screen. An exclamation
\par      mark (`!') causes the file descriptor to be connected to the
\par      application-process. A colon (`:') combines both.
\par      User input will go to newcommand unless newcommand receives the
\par      application-process' output (FDPATs first character is `!' or `:')
\par      or a pipe symbol (`|') is added to the end of FDPAT.
\par      Invoking `exec' without arguments shows name and arguments of the
\par      currently running subprocess in this window. Only one subprocess
\par      can be running per window.
\par      When a subprocess is running the `kill' command will affect it
\par      instead of the windows process. Only one subprocess a time can be
\par      running in each window.
\par      Refer to the postscript file `doc/fdpat.ps' for a confusing
\par      illustration of all 21 possible combinations. Each drawing shows
\par      the digits 2, 1, 0 representing the three file descriptors of
\par      newcommand. The box marked `W' is usual pty that has the
\par      application-process on its slave side.  The box marked `P' is the
\par      secondary pty that now has screen at its master side.
\par 
\par 13.2 Using Exec
\par ===============
\par 
\par Abbreviations:
\par 
\par    * Whitespace between the word `exec' and FDPAT and the command name
\par      can be omitted.
\par 
\par    * Trailing dots and a FDPAT consisting only of dots can be omitted.
\par 
\par    * A simple `|' is synonymous for the `!..|' pattern.
\par 
\par    * The word `exec' can be omitted when the `|' abbreviation is used.
\par 
\par    * The word `exec' can always be replaced by leading `!'.
\par 
\par Examples:
\par 
\par `!/bin/sh'
\par `exec /bin/sh'
\par `exec ... /bin/sh'
\par      All of the above are equivalent.  Creates another shell in the
\par      same window, while the original shell is still running. Output of
\par      both shells is displayed and user input is sent to the new
\par      `/bin/sh'.
\par 
\par `!!stty 19200'
\par `exec!stty 19200'
\par `exec !.. stty 19200'
\par      All of the above are equivalent.  Set the speed of the window's
\par      tty. If your stty command operates on stdout, then add another
\par      `!'. This is a useful command, when a screen window is directly
\par      connected to a serial line that needs to be configured.
\par 
\par `|less'
\par `exec !..| less'
\par      Both are equivalent.  This adds a pager to the window output. The
\par      special character `|' is needed to give the user control over the
\par      pager although it gets its input from the window's process. This
\par      works, because `less' listens on stderr (a behavior that `screen'
\par      would not expect without the `|') when its stdin is not a tty.
\par      `Less' versions newer than 177 fail miserably here; good old `pg'
\par      still works.
\par 
\par `!:sed -n s/.*Error.*/\\007/p'
\par      Sends window output to both, the user and the sed command. The sed
\par      inserts an additional bell character (oct. 007) to the window
\par      output seen by screen.  This will cause 'Bell in window x'
\par      messages, whenever the string `Error' appears in the window.
\par 
\par 14 Key Binding
\par **************
\par 
\par You may disagree with some of the default bindings (I know I do).  The
\par `bind' command allows you to redefine them to suit your preferences.
\par 
\par 14.1 The `bind' command
\par =======================
\par 
\par  -- Command: bind [-c class] key [command [args]]
\par      (none)
\par      Bind a command to a key.  The KEY argument is either a single
\par      character, a two-character sequence of the form `^x' (meaning
\par      `C-x'), a backslash followed by an octal number (specifying the
\par      ASCII code of the character), or a backslash followed by a second
\par      character, such as `\\^' or `\\\\'.  The argument can also be quoted,
\par      if you like.  If no further argument is given, any previously
\par      established binding for this key is removed.  The COMMAND argument
\par      can be any command (*note Command Index::).
\par 
\par      If a command class is specified via the `-c' option, the key is
\par      bound for the specified class.  Use the `command' command to
\par      activate a class. Command classes can be used to create multiple
\par      command keys or multi-character bindings.
\par 
\par      By default, most suitable commands are bound to one or more keys
\par      (*note Default Key Bindings::; for instance, the command to create
\par      a new window is bound to `C-c' and `c'.  The `bind' command can be
\par      used to redefine the key bindings and to define new bindings.
\par 
\par 14.2 Examples of the `bind' command
\par ===================================
\par 
\par Some examples:
\par 
\par      bind ' ' windows
\par      bind ^f screen telnet foobar
\par      bind \\033 screen -ln -t root -h 1000 9 su
\par 
\par would bind the space key to the command that displays a list of windows
\par (so that the command usually invoked by `C-a C-w' would also be
\par available as `C-a space'), bind `C-f' to the command "create a window
\par with a TELNET connection to foobar", and bind <ESC> to the command that
\par creates an non-login window with title `root' in slot #9, with a
\par superuser shell and a scrollback buffer of 1000 lines.
\par 
\par      bind -c demo1 0 select 10
\par      bind -c demo1 1 select 11
\par      bind -c demo1 2 select 12
\par      bindkey "^B" command -c demo1
\par    makes `C-b 0' select window 10, `C-b 1' window 11, etc.
\par 
\par      bind -c demo2 0 select 10
\par      bind -c demo2 1 select 11
\par      bind -c demo2 2 select 12
\par      bind - command -c demo2
\par    makes `C-a - 0' select window 10, `C-a - 1' window 11, etc.
\par 
\par 14.3 Command Character
\par ======================
\par 
\par  -- Command: escape xy
\par      (none)
\par      Set the command character to X and the character generating a
\par      literal command character (by triggering the `meta' command) to Y
\par      (similar to the `-e' option).  Each argument is either a single
\par      character, a two-character sequence of the form `^x' (meaning
\par      `C-x'), a backslash followed by an octal number (specifying the
\par      ASCII code of the character), or a backslash followed by a second
\par      character, such as `\\^' or `\\\\'.  The default is `^Aa', but ```'
\par      is recommended by one of the authors.
\par 
\par  -- Command: defescape xy
\par      (none)
\par      Set the default command characters. This is equivalent to the
\par      command `escape' except that it is useful for multiuser sessions
\par      only.  In a multiuser session `escape' changes the command
\par      character of the calling user, where `defescape' changes the
\par      default command characters for users that will be added later.
\par 
\par  -- Command: meta
\par      (`C-a a')
\par      Send the command character (`C-a') to the process in the current
\par      window.  The keystroke for this command is the second parameter to
\par      the `-e' command line switch (*note Invoking Screen::), or the
\par      `escape' .screenrc directive.
\par 
\par  -- Command: command [-c CLASS]
\par      (none)
\par      This command has the same effect as typing the screen escape
\par      character (`C-a'). It is probably only useful for key bindings.
\par      If the `-c' option is given, select the specified command class.
\par      *Note Bind::, *Note Bindkey::.
\par 
\par 14.4 Help
\par =========
\par 
\par  -- Command: help
\par      (`C-a ?')
\par      Displays a help screen showing you all the key bindings.  The first
\par      pages list all the internal commands followed by their bindings.
\par      Subsequent pages will display the custom commands, one command per
\par      key.  Press space when you're done reading each page, or return to
\par      exit early.  All other characters are ignored.  If the `-c' option
\par      is given, display all bound commands for the specified command
\par      class.  *Note Default Key Bindings::.
\par 
\par 14.5 Bindkey
\par ============
\par 
\par  -- Command: bindkey [OPTS] [STRING [CMD ARGS]]
\par      (none)
\par      This command manages screen's input translation tables. Every
\par      entry in one of the tables tells screen how to react if a certain
\par      sequence of characters is encountered. There are three tables: one
\par      that should contain actions programmed by the user, one for the
\par      default actions used for terminal emulation and one for screen's
\par      copy mode to do cursor movement. See *note Input Translation:: for
\par      a list of default key bindings.
\par 
\par      If the `-d' option is given, bindkey modifies the default table,
\par      `-m' changes the copy mode table and with neither option the user
\par      table is selected. The argument `string' is the sequence of
\par      characters to which an action is bound. This can either be a fixed
\par      string or a termcap keyboard capability name (selectable with the
\par      `-k' option).
\par 
\par      Some keys on a VT100 terminal can send a different string if
\par      application mode is turned on (e.g. the cursor keys).  Such keys
\par      have two entries in the translation table. You can select the
\par      application mode entry by specifying the `-a' option.
\par 
\par      The `-t' option tells screen not to do inter-character timing. One
\par      cannot turn off the timing if a termcap capability is used.
\par 
\par      `cmd' can be any of screen's commands with an arbitrary number of
\par      `args'. If `cmd' is omitted the key-binding is removed from the
\par      table.
\par 
\par 14.6 Bindkey Examples
\par =====================
\par 
\par Here are some examples of keyboard bindings:
\par 
\par      bindkey -d
\par    Show all of the default key bindings. The application mode entries
\par are marked with [A].
\par 
\par      bindkey -k k1 select 1
\par    Make the "F1" key switch to window one.
\par 
\par      bindkey -t foo stuff barfoo
\par    Make `foo' an abbreviation of the word `barfoo'. Timeout is disabled
\par so that users can type slowly.
\par 
\par      bindkey "\\024" mapdefault
\par    This key-binding makes `C-t' an escape character for key-bindings. If
\par you did the above `stuff barfoo' binding, you can enter the word `foo'
\par by typing `C-t foo'. If you want to insert a `C-t' you have to press
\par the key twice (i.e., escape the escape binding).
\par 
\par      bindkey -k F1 command
\par    Make the F11 (not F1!) key an alternative screen escape (besides
\par `C-a').
\par 
\par 14.7 Bindkey Control
\par ====================
\par 
\par  -- Command: mapdefault
\par      (none)
\par      Tell screen that the next input character should only be looked up
\par      in the default bindkey table.
\par 
\par  -- Command: mapnotnext
\par      (none)
\par      Like mapdefault, but don't even look in the default bindkey table.
\par 
\par  -- Command: maptimeout timo
\par      (none)
\par      Set the inter-character timer for input sequence detection to a
\par      timeout of TIMO ms. The default timeout is 300ms. Maptimeout with
\par      no arguments shows the current setting.
\par 
\par 15 Flow Control
\par ***************
\par 
\par `screen' can trap flow control characters or pass them to the program,
\par as you see fit.  This is useful when your terminal wants to use
\par XON/XOFF flow control and you are running a program which wants to use
\par ^S/^Q for other purposes (i.e. `emacs').
\par 
\par 15.1 About `screen' flow control settings
\par =========================================
\par 
\par Each window has a flow-control setting that determines how screen deals
\par with the XON and XOFF characters (and perhaps the interrupt character).
\par When flow-control is turned off, screen ignores the XON and XOFF
\par characters, which allows the user to send them to the current program by
\par simply typing them (useful for the `emacs' editor, for instance).  The
\par trade-off is that it will take longer for output from a "normal"
\par program to pause in response to an XOFF.  With flow-control turned on,
\par XON and XOFF characters are used to immediately pause the output of the
\par current window.  You can still send these characters to the current
\par program, but you must use the appropriate two-character screen commands
\par (typically `C-a q' (xon) and `C-a s' (xoff)).  The xon/xoff commands
\par are also useful for typing C-s and C-q past a terminal that intercepts
\par these characters.
\par 
\par    Each window has an initial flow-control value set with either the
\par `-f' option or the `defflow' command.  By default the windows are set
\par to automatic flow-switching.  It can then be toggled between the three
\par states 'fixed on', 'fixed off' and 'automatic' interactively with the
\par `flow' command bound to `C-a f'.
\par 
\par    The automatic flow-switching mode deals with flow control using the
\par TIOCPKT mode (like `rlogin' does). If the tty driver does not support
\par TIOCPKT, screen tries to determine the right mode based on the current
\par setting of the application keypad -- when it is enabled, flow-control
\par is turned off and visa versa.  Of course, you can still manipulate
\par flow-control manually when needed.
\par 
\par    If you're running with flow-control enabled and find that pressing
\par the interrupt key (usually C-c) does not interrupt the display until
\par another 6-8 lines have scrolled by, try running screen with the
\par `interrupt' option (add the `interrupt' flag to the `flow' command in
\par your .screenrc, or use the `-i' command-line option).  This causes the
\par output that `screen' has accumulated from the interrupted program to be
\par flushed.  One disadvantage is that the virtual terminal's memory
\par contains the non-flushed version of the output, which in rare cases can
\par cause minor inaccuracies in the output.  For example, if you switch
\par screens and return, or update the screen with `C-a l' you would see the
\par version of the output you would have gotten without `interrupt' being
\par on.  Also, you might need to turn off flow-control (or use auto-flow
\par mode to turn it off automatically) when running a program that expects
\par you to type the interrupt character as input, as the `interrupt'
\par parameter only takes effect when flow-control is enabled.  If your
\par program's output is interrupted by mistake, a simple refresh of the
\par screen with `C-a l' will restore it.  Give each mode a try, and use
\par whichever mode you find more comfortable.
\par 
\par 15.2 Flow
\par =========
\par 
\par  -- Command: defflow fstate [interrupt]
\par      (none)
\par      Same as the `flow' command except that the default setting for new
\par      windows is changed. Initial setting is `auto'.  Specifying `flow
\par      auto interrupt' has the same effect as the command-line options
\par      `-fa' and `-i'.  Note that if `interrupt' is enabled, all existing
\par      displays are changed immediately to forward interrupt signals.
\par 
\par  -- Command: flow [fstate]
\par      (`C-a f', `C-a C-f')
\par      Sets the flow-control mode for this window to FSTATE, which can be
\par      `on', `off' or `auto'.  Without parameters it cycles the current
\par      window's flow-control setting.  Default is set by `defflow'.
\par 
\par 15.3 XON and XOFF
\par =================
\par 
\par  -- Command: xon
\par      (`C-a q', `C-a C-q')
\par      Send a ^Q (ASCII XON) to the program in the current window.
\par      Redundant if flow control is set to `off' or `auto'.
\par 
\par  -- Command: xoff
\par      (`C-a s', `C-a C-s')
\par      Send a ^S (ASCII XOFF) to the program in the current window.
\par 
\par 16 Termcap
\par **********
\par 
\par `screen' demands the most out of your terminal so that it can perform
\par its VT100 emulation most efficiently.  These functions provide means
\par for tweaking the termcap entries for both your physical terminal and
\par the one simulated by `screen'.
\par 
\par 16.1 Choosing the termcap entry for a window
\par ============================================
\par 
\par Usually `screen' tries to emulate as much of the VT100/ANSI standard as
\par possible. But if your terminal lacks certain capabilities the emulation
\par may not be complete. In these cases `screen' has to tell the
\par applications that some of the features are missing. This is no problem
\par on machines using termcap, because `screen' can use the `$TERMCAP'
\par variable to customize the standard screen termcap.
\par 
\par    But if you do a rlogin on another machine or your machine supports
\par only terminfo this method fails. Because of this `screen' offers a way
\par to deal with these cases. Here is how it works:
\par 
\par    When `screen' tries to figure out a terminal name for itself, it
\par first looks for an entry named `screen.TERM', where TERM is the
\par contents of your `$TERM' variable.  If no such entry exists, `screen'
\par tries `screen' (or `screen-w', if the terminal is wide (132 cols or
\par more)).  If even this entry cannot be found, `vt100' is used as a
\par substitute.
\par 
\par    The idea is that if you have a terminal which doesn't support an
\par important feature (e.g. delete char or clear to EOS) you can build a new
\par termcap/terminfo entry for `screen' (named `screen.DUMBTERM') in which
\par this capability has been disabled.  If this entry is installed on your
\par machines you are able to do a rlogin and still keep the correct
\par termcap/terminfo entry.  The terminal name is put in the `$TERM'
\par variable of all new windows.  `screen' also sets the `$TERMCAP'
\par variable reflecting the capabilities of the virtual terminal emulated.
\par Furthermore, the variable `$WINDOW' is set to the window number of each
\par window.
\par 
\par    The actual set of capabilities supported by the virtual terminal
\par depends on the capabilities supported by the physical terminal.  If, for
\par instance, the physical terminal does not support underscore mode,
\par `screen' does not put the `us' and `ue' capabilities into the window's
\par `$TERMCAP' variable, accordingly.  However, a minimum number of
\par capabilities must be supported by a terminal in order to run `screen';
\par namely scrolling, clear screen, and direct cursor addressing (in
\par addition, `screen' does not run on hardcopy terminals or on terminals
\par that over-strike).
\par 
\par    Also, you can customize the `$TERMCAP' value used by `screen' by
\par using the `termcap' command, or by defining the variable `$SCREENCAP'
\par prior to startup.  When the latter defined, its value will be copied
\par verbatim into each window's `$TERMCAP' variable.  This can either be
\par the full terminal definition, or a filename where the terminal `screen'
\par (and/or `screen-w') is defined.
\par 
\par    Note that `screen' honors the `terminfo' command if the system uses
\par the terminfo database rather than termcap.  On such machines the
\par `$TERMCAP' variable has no effect and you must use the `dumptermcap'
\par command (*note Dump Termcap::) and the `tic' program to generate
\par terminfo entries for `screen' windows.
\par 
\par    When the boolean `G0' capability is present in the termcap entry for
\par the terminal on which `screen' has been called, the terminal emulation
\par of `screen' supports multiple character sets.  This allows an
\par application to make use of, for instance, the VT100 graphics character
\par set or national character sets.  The following control functions from
\par ISO 2022 are supported: `lock shift G0' (`SI'), `lock shift G1' (`SO'),
\par `lock shift G2', `lock shift G3', `single shift G2', and `single shift
\par G3'.  When a virtual terminal is created or reset, the ASCII character
\par set is designated as `G0' through `G3'.  When the `G0' capability is
\par present, screen evaluates the capabilities `S0', `E0', and `C0' if
\par present. `S0' is the sequence the terminal uses to enable and start the
\par graphics character set rather than `SI'.  `E0' is the corresponding
\par replacement for `SO'. `C0' gives a character by character translation
\par string that is used during semi-graphics mode.  This string is built
\par like the `acsc' terminfo capability.
\par 
\par    When the `po' and `pf' capabilities are present in the terminal's
\par termcap entry, applications running in a `screen' window can send
\par output to the printer port of the terminal.  This allows a user to have
\par an application in one window sending output to a printer connected to
\par the terminal, while all other windows are still active (the printer
\par port is enabled and disabled again for each chunk of output).  As a
\par side-effect, programs running in different windows can send output to
\par the printer simultaneously.  Data sent to the printer is not displayed
\par in the window. The `info' command displays a line starting with `PRIN'
\par while the printer is active.
\par 
\par    Some capabilities are only put into the `$TERMCAP' variable of the
\par virtual terminal if they can be efficiently implemented by the physical
\par terminal.  For instance, `dl' (delete line) is only put into the
\par `$TERMCAP' variable if the terminal supports either delete line itself
\par or scrolling regions. Note that this may provoke confusion, when the
\par session is reattached on a different terminal, as the value of
\par `$TERMCAP' cannot be modified by parent processes.  You can force
\par `screen' to include all capabilities in `$TERMCAP' with the `-a'
\par command-line option (*note Invoking Screen::).
\par 
\par    The "alternate screen" capability is not enabled by default.  Set
\par the `altscreen' `.screenrc' command to enable it.
\par 
\par 16.2 Write out the window's termcap entry
\par =========================================
\par 
\par  -- Command: dumptermcap
\par      (`C-a .')
\par      Write the termcap entry for the virtual terminal optimized for the
\par      currently active window to the file `.termcap' in the user's
\par      `$HOME/.screen' directory (or wherever `screen' stores its
\par      sockets. *note Files::).  This termcap entry is identical to the
\par      value of the environment variable `$TERMCAP' that is set up by
\par      `screen' for each window. For terminfo based systems you will need
\par      to run a converter like `captoinfo' and then compile the entry with
\par      `tic'.
\par 
\par 16.3 The `termcap' command
\par ==========================
\par 
\par  -- Command: termcap term terminal-tweaks [window-tweaks]
\par  -- Command: terminfo term terminal-tweaks [window-tweaks]
\par  -- Command: termcapinfo term terminal-tweaks [window-tweaks]
\par      (none)
\par      Use this command to modify your terminal's termcap entry without
\par      going through all the hassles involved in creating a custom
\par      termcap entry.  Plus, you can optionally customize the termcap
\par      generated for the windows.  You have to place these commands in
\par      one of the screenrc startup files, as they are meaningless once
\par      the terminal emulator is booted.
\par 
\par      If your system uses the terminfo database rather than termcap,
\par      `screen' will understand the `terminfo' command, which has the
\par      same effects as the `termcap' command.   Two separate commands are
\par      provided, as there are subtle syntactic differences, e.g. when
\par      parameter interpolation (using `%') is required. Note that the
\par      termcap names of the capabilities should also be used with the
\par      `terminfo' command.
\par 
\par      In many cases, where the arguments are valid in both terminfo and
\par      termcap syntax, you can use the command `termcapinfo', which is
\par      just a shorthand for a pair of `termcap' and `terminfo' commands
\par      with identical arguments.
\par 
\par    The first argument specifies which terminal(s) should be affected by
\par this definition.  You can specify multiple terminal names by separating
\par them with `|'s.  Use `*' to match all terminals and `vt*' to match all
\par terminals that begin with `vt'.
\par 
\par    Each TWEAK argument contains one or more termcap defines (separated
\par by `:'s) to be inserted at the start of the appropriate termcap entry,
\par enhancing it or overriding existing values.  The first tweak modifies
\par your terminal's termcap, and contains definitions that your terminal
\par uses to perform certain functions.  Specify a null string to leave this
\par unchanged (e.g. "").  The second (optional) tweak modifies all the
\par window termcaps, and should contain definitions that screen understands
\par (*note Virtual Terminal::).
\par 
\par 16.4 Termcap Examples
\par =====================
\par 
\par Some examples:
\par 
\par      termcap xterm*  xn:hs@
\par 
\par Informs `screen' that all terminals that begin with `xterm' have firm
\par auto-margins that allow the last position on the screen to be updated
\par (xn), but they don't really have a status line (no 'hs' - append `@' to
\par turn entries off).  Note that we assume `xn' for all terminal names
\par that start with `vt', but only if you don't specify a termcap command
\par for that terminal.
\par 
\par      termcap vt*  xn
\par      termcap vt102|vt220  Z0=\\E[?3h:Z1=\\E[?3l
\par 
\par Specifies the firm-margined `xn' capability for all terminals that
\par begin with `vt', and the second line will also add the escape-sequences
\par to switch into (Z0) and back out of (Z1) 132-character-per-line mode if
\par this is a VT102 or VT220.  (You must specify Z0 and Z1 in your termcap
\par to use the width-changing commands.)
\par 
\par      termcap vt100  ""  l0=PF1:l1=PF2:l2=PF3:l3=PF4
\par 
\par This leaves your vt100 termcap alone and adds the function key labels to
\par each window's termcap entry.
\par 
\par      termcap h19|z19  am@:im=\\E@:ei=\\EO  dc=\\E[P
\par 
\par Takes a h19 or z19 termcap and turns off auto-margins (am@) and enables
\par the insert mode (im) and end-insert (ei) capabilities (the `@' in the
\par `im' string is after the `=', so it is part of the string).  Having the
\par `im' and `ei' definitions put into your terminal's termcap will cause
\par screen to automatically advertise the character-insert capability in
\par each window's termcap.  Each window will also get the delete-character
\par capability (dc) added to its termcap, which screen will translate into
\par a line-update for the terminal (we're pretending it doesn't support
\par character deletion).
\par 
\par    If you would like to fully specify each window's termcap entry, you
\par should instead set the `$SCREENCAP' variable prior to running `screen'.
\par *Note Virtual Terminal::, for the details of the `screen' terminal
\par emulation.  *Note Termcap: (termcap)Top, for more information on
\par termcap definitions.
\par 
\par 16.5 Special Terminal Capabilities
\par ==================================
\par 
\par The following table describes all terminal capabilities that are
\par recognized by `screen' and are not in the termcap manual (*note
\par Termcap: (termcap)Top.).  You can place these capabilities in your
\par termcap entries (in `/etc/termcap') or use them with the commands
\par `termcap', `terminfo' and `termcapinfo' in your `screenrc' files. It is
\par often not possible to place these capabilities in the terminfo database.
\par `LP'
\par      (bool)
\par      Terminal has VT100 style margins (`magic margins'). Note that this
\par      capability is obsolete -- `screen' now uses the standard `xn'
\par      instead.
\par 
\par `Z0'
\par      (str)
\par      Change width to 132 columns.
\par 
\par `Z1'
\par      (str)
\par      Change width to 80 columns.
\par 
\par `WS'
\par      (str)
\par      Resize display. This capability has the desired width and height as
\par      arguments.  SunView(tm) example: `\\E[8;%d;%dt'.
\par 
\par `NF'
\par      (bool)
\par      Terminal doesn't need flow control. Send ^S and ^Q direct to the
\par      application. Same as `flow off'. The opposite of this capability
\par      is `nx'.
\par 
\par `G0'
\par      (bool)
\par      Terminal can deal with ISO 2022 font selection sequences.
\par 
\par `S0'
\par      (str)
\par      Switch charset `G0' to the specified charset. Default is `\\E(%.'.
\par 
\par `E0'
\par      (str)
\par      Switch charset `G0' back to standard charset. Default is `\\E(B'.
\par 
\par `C0'
\par      (str)
\par      Use the string as a conversion table for font 0. See the `ac'
\par      capability for more details.
\par 
\par `CS'
\par      (str)
\par      Switch cursor-keys to application mode.
\par 
\par `CE'
\par      (str)
\par      Switch cursor-keys to cursor mode.
\par 
\par `AN'
\par      (bool)
\par      Enable autonuke for displays of this terminal type.  (*note
\par      Autonuke::).
\par 
\par `OL'
\par      (num)
\par      Set the output buffer limit. See the `obuflimit' command (*note
\par      Obuflimit::) for more details.
\par 
\par `KJ'
\par      (str)
\par      Set the encoding of the terminal. See the `encoding' command
\par      (*note Character Processing::) for valid encodings.
\par 
\par `AF'
\par      (str)
\par      Change character foreground color in an ANSI conform way. This
\par      capability will almost always be set to `\\E[3%dm' (`\\E[3%p1%dm' on
\par      terminfo machines).
\par 
\par `AB'
\par      (str)
\par      Same as `AF', but change background color.
\par 
\par `AX'
\par      (bool)
\par      Does understand ANSI set default fg/bg color (`\\E[39m / \\E[49m').
\par 
\par `XC'
\par      (str)
\par      Describe a translation of characters to strings depending on the
\par      current font.  (*note Character Translation::).
\par 
\par `XT'
\par      (bool)
\par      Terminal understands special xterm sequences (OSC, mouse tracking).
\par 
\par `C8'
\par      (bool)
\par      Terminal needs bold to display high-intensity colors (e.g. Eterm).
\par 
\par `TF'
\par      (bool)
\par      Add missing capabilities to the termcap/info entry. (Set by
\par      default).
\par 
\par 16.6 Autonuke
\par =============
\par 
\par  -- Command: autonuke STATE
\par      (none)
\par      Sets whether a clear screen sequence should nuke all the output
\par      that has not been written to the terminal. *Note Obuflimit::.
\par      This property is set per display, not per window.
\par 
\par  -- Command: defautonuke STATE
\par      (none)
\par      Same as the `autonuke' command except that the default setting for
\par      new displays is also changed. Initial setting is `off'.  Note that
\par      you can use the special `AN' terminal capability if you want to
\par      have a terminal type dependent setting.
\par 
\par 16.7 Obuflimit
\par ==============
\par 
\par  -- Command: obuflimit [LIMIT]
\par      (none)
\par      If the output buffer contains more bytes than the specified limit,
\par      no more data will be read from the windows. The default value is
\par      256. If you have a fast display (like `xterm'), you can set it to
\par      some higher value. If no argument is specified, the current
\par      setting is displayed.  This property is set per display, not per
\par      window.
\par 
\par  -- Command: defobuflimit LIMIT
\par      (none)
\par      Same as the `obuflimit' command except that the default setting
\par      for new displays is also changed. Initial setting is 256 bytes.
\par      Note that you can use the special `OL' terminal capability if you
\par      want to have a terminal type dependent limit.
\par 
\par 16.8 Character Translation
\par ==========================
\par 
\par `Screen' has a powerful mechanism to translate characters to arbitrary
\par strings depending on the current font and terminal type.  Use this
\par feature if you want to work with a common standard character set (say
\par ISO8851-latin1) even on terminals that scatter the more unusual
\par characters over several national language font pages.
\par 
\par    Syntax:
\par 
\par          XC=<CHARSET-MAPPING>\{,,<CHARSET-MAPPING>\}
\par          <CHARSET-MAPPING> := <DESIGNATOR><TEMPLATE>\{,<MAPPING>\}
\par          <MAPPING> := <CHAR-TO-BE-MAPPED><TEMPLATE-ARG>
\par 
\par    The things in braces may be repeated any number of times.
\par 
\par    A <CHARSET-MAPPING> tells screen how to map characters in font
\par <DESIGNATOR> (`B': Ascii, `A': UK, `K': german, etc.)  to strings.
\par Every <MAPPING> describes to what string a single character will be
\par translated. A template mechanism is used, as most of the time the codes
\par have a lot in common (for example strings to switch to and from another
\par charset). Each occurrence of `%' in <TEMPLATE> gets substituted with the
\par TEMPLATE-ARG specified together with the character. If your strings are
\par not similar at all, then use `%' as a template and place the full
\par string in <TEMPLATE-ARG>. A quoting mechanism was added to make it
\par possible to use a real `%'. The `\\' character quotes the special
\par characters `\\', `%', and `,'.
\par 
\par    Here is an example:
\par 
\par          termcap hp700 'XC=B\\E(K%\\E(B,\\304[,\\326\\\\\\\\,\\334]'
\par 
\par    This tells `screen', how to translate ISOlatin1 (charset `B') upper
\par case umlaut characters on a `hp700' terminal that has a German charset.
\par `\\304' gets translated to `\\E(K[\\E(B' and so on.  Note that this line
\par gets parsed *three* times before the internal lookup table is built,
\par therefore a lot of quoting is needed to create a single `\\'.
\par 
\par    Another extension was added to allow more emulation: If a mapping
\par translates the unquoted `%' char, it will be sent to the terminal
\par whenever screen switches to the corresponding <DESIGNATOR>.  In this
\par special case the template is assumed to be just `%' because the charset
\par switch sequence and the character mappings normally haven't much in
\par common.
\par 
\par    This example shows one use of the extension:
\par          termcap xterm 'XC=K%,%\\E(B,[\\304,\\\\\\\\\\326,]\\334'
\par 
\par    Here, a part of the German (`K') charset is emulated on an xterm.
\par If screen has to change to the `K' charset, `\\E(B' will be sent to the
\par terminal, i.e. the ASCII charset is used instead. The template is just
\par `%', so the mapping is straightforward: `[' to `\\304', `\\' to `\\326',
\par and `]' to `\\334'.
\par 
\par 17 The Message Line
\par *******************
\par 
\par `screen' displays informational messages and other diagnostics in a
\par "message line" at the bottom of the screen.  If your terminal has a
\par status line defined in its termcap, screen will use this for displaying
\par its messages, otherwise the last line of the screen will be temporarily
\par overwritten and output will be momentarily interrupted.  The message
\par line is automatically removed after a few seconds delay, but it can also
\par be removed early (on terminals without a status line) by beginning to
\par type.
\par 
\par 17.1 Using the message line from your program
\par =============================================
\par 
\par The message line facility can be used by an application running in the
\par current window by means of the ANSI "Privacy message" control sequence.
\par For instance, from within the shell, try something like:
\par 
\par      echo "^[^Hello world from window $WINDOW^[\\"
\par 
\par    where `^[' is ASCII ESC and the `^' that follows it is a literal
\par caret or up-arrow.
\par 
\par 17.2 Hardware Status Line
\par =========================
\par 
\par  -- Command: hardstatus [state]
\par  -- Command: hardstatus [`always']`lastline'|`message'|`ignore' [string]
\par  -- Command: hardstatus `string' [string]
\par      (none)
\par      This command configures the use and emulation of the terminal's
\par      hardstatus line. The first form toggles whether `screen' will use
\par      the hardware status line to display messages. If the flag is set
\par      to `off', these messages are overlaid in reverse video mode at the
\par      display line. The default setting is `on'.
\par 
\par      The second form tells screen what to do if the terminal doesn't
\par      have a hardstatus line (i.e. the termcap/terminfo capabilities
\par      "hs", "ts", "fs" and "ds" are not set). If the type `lastline' is
\par      used, screen will reserve the last line of the display for the
\par      hardstatus. `message' uses `screen''s message mechanism and
\par      `ignore' tells `screen' never to display the hardstatus.  If you
\par      prepend the word `always' to the type (e.g., `alwayslastline'),
\par      `screen' will use the type even if the terminal supports a
\par      hardstatus line.
\par 
\par      The third form specifies the contents of the hardstatus line.
\par      `%h' is used as default string, i.e., the stored hardstatus of the
\par      current window (settable via `ESC]0;^G' or `ESC_\\\\') is displayed.
\par      You can customize this to any string you like including string
\par      escapes (*note String Escapes::).  If you leave out the argument
\par      STRING, the current string is displayed.
\par 
\par      You can mix the second and third form by providing the string as
\par      additional argument.
\par 
\par 17.3 Display Last Message
\par =========================
\par 
\par  -- Command: lastmsg
\par      (`C-a m', `C-a C-m')
\par      Repeat the last message displayed in the message line.  Useful if
\par      you're typing when a message appears, because (unless your
\par      terminal has a hardware status line) the message goes away when
\par      you press a key.
\par 
\par 17.4 Message Wait
\par =================
\par 
\par  -- Command: msgminwait sec
\par      (none)
\par      Defines the time `screen' delays a new message when another is
\par      currently displayed.  Defaults to 1 second.
\par 
\par  -- Command: msgwait sec
\par      (none)
\par      Defines the time a message is displayed, if `screen' is not
\par      disturbed by other activity.  Defaults to 5 seconds.
\par 
\par 18 Logging
\par **********
\par 
\par This section describes the commands for keeping a record of your
\par session.
\par 
\par 18.1 hardcopy
\par =============
\par 
\par  -- Command: hardcopy [-h] [FILE]
\par      (`C-a h', `C-a C-h')
\par      Writes out the currently displayed image to the file FILE, or, if
\par      no filename is specified, to `hardcopy.N' in the default
\par      directory, where N is the number of the current window.  This
\par      either appends or overwrites the file if it exists, as determined
\par      by the `hardcopy_append' command.  If the option `-h' is
\par      specified, dump also the contents of the scrollback buffer.
\par 
\par  -- Command: hardcopy_append state
\par      (none)
\par      If set to `on', `screen' will append to the `hardcopy.N' files
\par      created by the command `hardcopy'; otherwise, these files are
\par      overwritten each time.
\par 
\par  -- Command: hardcopydir directory
\par      (none)
\par      Defines a directory where hardcopy files will be placed.  If
\par      unset, hardcopys are dumped in screen's current working directory.
\par 
\par 18.2 log
\par ========
\par 
\par  -- Command: deflog state
\par      (none)
\par      Same as the `log' command except that the default setting for new
\par      windows is changed.  Initial setting is `off'.
\par 
\par  -- Command: log [state]
\par      (`C-a H')
\par      Begins/ends logging of the current window to the file
\par      `screenlog.N' in the window's default directory, where N is the
\par      number of the current window.  This filename can be changed with
\par      the `logfile' command.  If no parameter is given, the logging
\par      state is toggled.  The session log is appended to the previous
\par      contents of the file if it already exists.  The current contents
\par      and the contents of the scrollback history are not included in the
\par      session log.  Default is `off'.
\par 
\par  -- Command: logfile filename
\par  -- Command: logfile flush secs
\par      (none)
\par      Defines the name the log files will get. The default is
\par      `screenlog.%n'.  The second form changes the number of seconds
\par      `screen' will wait before flushing the logfile buffer to the
\par      file-system. The default value is 10 seconds.
\par 
\par  -- Command: logtstamp [state]
\par  -- Command: logtstamp `after' secs
\par  -- Command: logtstamp `string' string
\par      (none)
\par      This command controls logfile time-stamp mechanism of screen. If
\par      time-stamps are turned `on', screen adds a string containing the
\par      current time to the logfile after two minutes of inactivity.  When
\par      output continues and more than another two minutes have passed, a
\par      second time-stamp is added to document the restart of the output.
\par      You can change this timeout with the second form of the command.
\par      The third form is used for customizing the time-stamp string (`--
\par      %n:%t -- time-stamp -- %M/%d/%y %c:%s --\\n' by default).
\par 
\par 19 Startup
\par **********
\par 
\par This section describes commands which are only useful in the
\par `.screenrc' file, for use at startup.
\par 
\par 19.1 echo
\par =========
\par 
\par  -- Command: echo [`-n'] message
\par      (none)
\par      The echo command may be used to annoy `screen' users with a
\par      'message of the day'. Typically installed in a global screenrc.
\par      The option `-n' may be used to suppress the line feed.  See also
\par      `sleep'.  Echo is also useful for online checking of environment
\par      variables.
\par 
\par 19.2 sleep
\par ==========
\par 
\par  -- Command: sleep num
\par      (none)
\par      This command will pause the execution of a .screenrc file for NUM
\par      seconds.  Keyboard activity will end the sleep.  It may be used to
\par      give users a chance to read the messages output by `echo'.
\par 
\par 19.3 Startup Message
\par ====================
\par 
\par  -- Command: startup_message state
\par      (none)
\par      Select whether you want to see the copyright notice during startup.
\par      Default is `on', as you probably noticed.
\par 
\par 20 Miscellaneous commands
\par *************************
\par 
\par The commands described here do not fit well under any of the other
\par categories.
\par 
\par 20.1 At
\par =======
\par 
\par  -- Command: at [identifier][#|*|%] command [args]
\par      (none)
\par      Execute a command at other displays or windows as if it had been
\par      entered there.  `At' changes the context (the `current window' or
\par      `current display' setting) of the command. If the first parameter
\par      describes a non-unique context, the command will be executed
\par      multiple times. If the first parameter is of the form
\par      `IDENTIFIER*' then identifier is matched against user names.  The
\par      command is executed once for each display of the selected user(s).
\par      If the first parameter is of the form `IDENTIFIER%' identifier is
\par      matched against displays. Displays are named after the ttys they
\par      attach. The prefix `/dev/' or `/dev/tty' may be omitted from the
\par      identifier.  If IDENTIFIER has a `#' or nothing appended it is
\par      matched against window numbers and titles. Omitting an identifier
\par      in front of the `#', `*' or `%' character selects all users,
\par      displays or windows because a prefix-match is performed. Note that
\par      on the affected display(s) a short message will describe what
\par      happened.  Note that the `#' character works as a comment
\par      introducer when it is preceded by whitespace. This can be escaped
\par      by prefixing `#' with a `\\'.  Permission is checked for the
\par      initiator of the `at' command, not for the owners of the affected
\par      display(s).  Caveat: When matching against windows, the command is
\par      executed at least once per window. Commands that change the
\par      internal arrangement of windows (like `other') may be called
\par      again. In shared windows the command will be repeated for each
\par      attached display. Beware, when issuing toggle commands like
\par      `login'!  Some commands (e.g. `\\*Qprocess') require that a display
\par      is associated with the target windows.  These commands may not
\par      work correctly under `at' looping over windows.
\par 
\par 20.2 Break
\par ==========
\par 
\par  -- Command: break [duration]
\par      (none)
\par      Send a break signal for DURATION*0.25 seconds to this window.  For
\par      non-Posix systems the time interval is rounded up to full seconds.
\par      Most useful if a character device is attached to the window rather
\par      than a shell process (*note Window Types::). The maximum duration
\par      of a break signal is limited to 15 seconds.
\par 
\par  -- Command: pow_break
\par      (none)
\par      Reopen the window's terminal line and send a break condition.
\par 
\par  -- Command: breaktype [tcsendbreak|TIOCSBRK|TCSBRK]
\par      (none)
\par      Choose one of the available methods of generating a break signal
\par      for terminal devices. This command should affect the current
\par      window only.  But it still behaves identical to `defbreaktype'.
\par      This will be changed in the future.  Calling `breaktype' with no
\par      parameter displays the break setting for the current window.
\par 
\par  -- Command: defbreaktype [tcsendbreak|TIOCSBRK|TCSBRK]
\par      (none)
\par      Choose one of the available methods of generating a break signal
\par      for terminal devices opened afterwards. The preferred methods are
\par      `tcsendbreak' and `TIOCSBRK'. The third, `TCSBRK', blocks the
\par      complete `screen' session for the duration of the break, but it
\par      may be the only way to generate long breaks. `tcsendbreak' and
\par      `TIOCSBRK' may or may not produce long breaks with spikes (e.g. 4
\par      per second). This is not only system dependent, this also differs
\par      between serial board drivers.  Calling `defbreaktype' with no
\par      parameter displays the current setting.
\par 
\par 20.3 Debug
\par ==========
\par 
\par  -- Command: debug [on|off]
\par      (none)
\par      Turns runtime debugging on or off. If `screen' has been compiled
\par      with option `-DDEBUG' debugging is available and is turned on per
\par      default.  Note that this command only affects debugging output
\par      from the main `SCREEN' process correctly. Debug output from
\par      attacher processes can only be turned off once and forever.
\par 
\par 20.4 License
\par ============
\par 
\par  -- Command: license
\par      (none)
\par      Display the disclaimer page. This is done whenever `screen' is
\par      started without options, which should be often enough.
\par 
\par 20.5 Nethack
\par ============
\par 
\par  -- Command: nethack state
\par      (none)
\par      Changes the kind of error messages used by `screen'.  When you are
\par      familiar with the game `nethack', you may enjoy the nethack-style
\par      messages which will often blur the facts a little, but are much
\par      funnier to read. Anyway, standard messages often tend to be
\par      unclear as well.
\par 
\par      This option is only available if `screen' was compiled with the
\par      NETHACK flag defined (*note Installation::). The default setting
\par      is then determined by the presence of the environment variable
\par      `$NETHACKOPTIONS'.
\par 
\par 20.6 Nonblock
\par =============
\par 
\par  -- Command: nonblock [STATE|NUMSECS]
\par      Tell screen how to deal with user interfaces (displays) that cease
\par      to accept output. This can happen if a user presses ^S or a
\par      TCP/modem connection gets cut but no hangup is received. If
\par      nonblock is `off' (this is the default) screen waits until the
\par      display restarts to accept the output. If nonblock is `on', screen
\par      waits until the timeout is reached (`on' is treated as 1s). If the
\par      display still doesn't receive characters, screen will consider it
\par      "blocked" and stop sending characters to it. If at some time it
\par      restarts to accept characters, screen will unblock the display and
\par      redisplay the updated window contents.
\par 
\par  -- Command: defnonblock STATE|NUMSECS
\par      Same as the `nonblock' command except that the default setting for
\par      displays is changed. Initial setting is `off'.
\par 
\par 20.7 Number
\par ===========
\par 
\par  -- Command: number [N]
\par      (`C-a N')
\par      Change the current window's number. If the given number N is
\par      already used by another window, both windows exchange their
\par      numbers. If no argument is specified, the current window number
\par      (and title) is shown.
\par 
\par 20.8 Silence
\par ============
\par 
\par  -- Command: silence [STATE|SEC]
\par      (none)
\par      Toggles silence monitoring of windows. When silence is turned on
\par      and an affected window is switched into the background, you will
\par      receive the silence notification message in the status line after
\par      a specified period of inactivity (silence). The default timeout
\par      can be changed with the `silencewait' command or by specifying a
\par      number of seconds instead of `on' or `off'. Silence is initially
\par      off for all windows.
\par 
\par  -- Command: defsilence state
\par      (none)
\par      Same as the `silence' command except that the default setting for
\par      new windows is changed.  Initial setting is `off'.
\par 
\par  -- Command: silencewait SECONDS
\par      (none)
\par      Define the time that all windows monitored for silence should wait
\par      before displaying a message. Default is 30 seconds.
\par 
\par 20.9 Time
\par =========
\par 
\par  -- Command: time [STRING]
\par      (`C-a t', `C-a C-t')
\par      Uses the message line to display the time of day, the host name,
\par      and the load averages over 1, 5, and 15 minutes (if this is
\par      available on your system).  For window-specific information use
\par      `info' (*note Info::).  If a STRING is specified, it changes the
\par      format of the time report like it is described in the string
\par      escapes chapter (*note String Escapes::). Screen uses a default of
\par      `%c:%s %M %d %H%? %l%?'.
\par 
\par 20.10 Verbose
\par =============
\par 
\par  -- Command: verbose [on|off]
\par      If verbose is switched on, the command name is echoed, whenever a
\par      window is created (or resurrected from zombie state). Default is
\par      off.  Without parameter, the current setting is shown.
\par 
\par 20.11 Version
\par =============
\par 
\par  -- Command: version
\par      (`C-a v')
\par      Display the version and modification date in the message line.
\par 
\par 20.12 Zombie
\par ============
\par 
\par  -- Command: zombie [KEYS [onerror] ]
\par  -- Command: defzombie [KEYS]
\par      (none)
\par      Per default windows are removed from the window list as soon as the
\par      windows process (e.g. shell) exits. When a string of two keys is
\par      specified to the zombie command, `dead' windows will remain in the
\par      list.  The `kill' command may be used to remove the window.
\par      Pressing the first key in the dead window has the same effect.
\par      Pressing the second key, however, screen will attempt to resurrect
\par      the window. The process that was initially running in the window
\par      will be launched again. Calling `zombie' without parameters will
\par      clear the zombie setting, thus making windows disappear when the
\par      process terminates.
\par 
\par      As the zombie setting is affected globally for all windows, this
\par      command should only be called `defzombie'. Until we need this as a
\par      per window setting, the commands `zombie' and `defzombie' are
\par      synonymous.
\par 
\par      Optionally you can put the word `onerror' after the keys. This will
\par      cause screen to monitor exit status of the process running in the
\par      window.  If it exits normally ('0'), the window disappears. Any
\par      other exit value causes the window to become a zombie.
\par 
\par 20.13 Printcmd
\par ==============
\par 
\par  -- Command: printcmd [CMD]
\par      (none)
\par      If CMD is not an empty string, screen will not use the terminal
\par      capabilities `po/pf' for printing if it detects an ansi print
\par      sequence `ESC [ 5 i', but pipe the output into CMD.  This should
\par      normally be a command like `lpr' or `cat > /tmp/scrprint'.
\par      `Printcmd' without an argument displays the current setting.  The
\par      ansi sequence `ESC \\' ends printing and closes the pipe.
\par 
\par      Warning: Be careful with this command! If other user have write
\par      access to your terminal, they will be able to fire off print
\par      commands.
\par 
\par 20.14 Sorendition
\par =================
\par 
\par  -- Command: sorendition [ATTR [COLOR]]
\par      (none)
\par      Change the way screen does highlighting for text marking and
\par      printing messages.  See the chapter about string escapes (*note
\par      String Escapes::) for the syntax of the modifiers. The default is
\par      currently `=s dd' (standout, default colors).
\par 
\par 20.15 Attrcolor
\par ===============
\par 
\par  -- Command: attrcolor ATTRIB [ATTRIBUTE/COLOR-MODIFIER]
\par      (none)
\par      This command can be used to highlight attributes by changing the
\par      color of the text. If the attribute ATTRIB is in use, the
\par      specified attribute/color modifier is also applied. If no modifier
\par      is given, the current one is deleted. See the chapter about string
\par      escapes (*note String Escapes::) for the syntax of the modifier.
\par      Screen understands two pseudo-attributes, `i' stands for
\par      high-intensity foreground color and `I' for high-intensity
\par      background color.
\par 
\par      Examples:
\par     `attrcolor b "R"'
\par           Change the color to bright red if bold text is to be printed.
\par 
\par     `attrcolor u "-u b"'
\par           Use blue text instead of underline.
\par 
\par     `attrcolor b ".I"'
\par           Use bright colors for bold text. Most terminal emulators do
\par           this already.
\par 
\par     `attrcolor i "+b"'
\par           Make bright colored text also bold.
\par 
\par 20.16 Setsid
\par ============
\par 
\par  -- Command: setsid state
\par      (none)
\par      Normally screen uses different sessions and process groups for the
\par      windows. If setsid is turned `off', this is not done anymore and
\par      all windows will be in the same process group as the screen
\par      backend process. This also breaks job-control, so be careful.  The
\par      default is `on', of course. This command is probably useful only
\par      in rare circumstances.
\par 
\par 20.17 Eval
\par ==========
\par 
\par  -- Command: eval COMMAND1 [COMMAND2 ...]
\par      (none)
\par      Parses and executes each argument as separate command.
\par 
\par 20.18 Maxwin
\par ============
\par 
\par  -- Command: maxwin N
\par      (none)
\par      Set the maximum window number screen will create. Doesn't affect
\par      already existing windows. The number may only be decreased.
\par 
\par 20.19 Backtick
\par ==============
\par 
\par  -- Command: backtick ID LIFESPAN AUTOREFRESH COMMAND [ARGS]
\par  -- Command: backtick ID
\par      (none)
\par      Program the backtick command with the numerical id ID.  The output
\par      of such a command is used for substitution of the `%`' string
\par      escape (*note String Escapes::).  The specified LIFESPAN is the
\par      number of seconds the output is considered valid. After this time,
\par      the command is run again if a corresponding string escape is
\par      encountered.  The AUTOREFRESH parameter triggers an automatic
\par      refresh for caption and hardstatus strings after the specified
\par      number of seconds. Only the last line of output is used for
\par      substitution.
\par 
\par      If both the LIFESPAN and the AUTOREFRESH parameters are zero, the
\par      backtick program is expected to stay in the background and
\par      generate output once in a while.  In this case, the command is
\par      executed right away and screen stores the last line of output. If
\par      a new line gets printed screen will automatically refresh the
\par      hardstatus or the captions.
\par 
\par      The second form of the command deletes the backtick command with
\par      the numerical id ID.
\par 
\par 20.20 Screen Saver
\par ==================
\par 
\par  -- Command: idle [TIMEOUT [CMD ARGS]]
\par      (none)
\par      Sets a command that is run after the specified number of seconds
\par      inactivity is reached. This command will normally be the `blanker'
\par      command to create a screen blanker, but it can be any screen
\par      command. If no command is specified, only the timeout is set. A
\par      timeout of zero (ot the special timeout `off') disables the timer.
\par      If no arguments are given, the current settings are displayed.
\par 
\par  -- Command: blanker
\par      (none)
\par      Activate the screen blanker. First the screen is cleared.  If no
\par      blanker program is defined, the cursor is turned off, otherwise,
\par      the program is started and it's output is written to the screen.
\par      The screen blanker is killed with the first keypress, the read key
\par      is discarded.
\par 
\par      This command is normally used together with the `idle' command.
\par 
\par  -- Command: blankerprg [PROGRAM ARGS]
\par      Defines a blanker program. Disables the blanker program if no
\par      arguments are given.
\par 
\par 20.21 Zmodem
\par ============
\par 
\par  -- Command: zmodem [off|auto|catch|pass]
\par  -- Command: zmodem sendcmd [string]
\par  -- Command: zmodem recvcmd [string]
\par      (none)
\par      Define zmodem support for screen. Screen understands two different
\par      modes when it detects a zmodem request: `pass' and `catch'. If the
\par      mode is set to `pass', screen will relay all data to the attacher
\par      until the end of the transmission is reached. In `catch' mode
\par      screen acts as a zmodem endpoint and starts the corresponding
\par      rz/sz commands.  If the mode is set to `auto', screen will use
\par      `catch' if the window is a tty (e.g. a serial line), otherwise it
\par      will use `pass'.
\par 
\par      You can define the templates screen uses in `catch' mode via the
\par      second and the third form.
\par 
\par      Note also that this is an experimental feature.
\par 
\par 21 String Escapes
\par *****************
\par 
\par Screen provides an escape mechanism to insert information like the
\par current time into messages or file names. The escape character is `%'
\par with one exception: inside of a window's hardstatus `^%' (`^E') is used
\par instead.
\par 
\par    Here is the full list of supported escapes:
\par 
\par `%'
\par      the escape character itself
\par 
\par `a'
\par      either `am' or `pm'
\par 
\par `A'
\par      either `AM' or `PM'
\par 
\par `c'
\par      current time `HH:MM' in 24h format
\par 
\par `C'
\par      current time `HH:MM' in 12h format
\par 
\par `d'
\par      day number
\par 
\par `D'
\par      weekday name
\par 
\par `f'
\par      flags of the window
\par 
\par `F'
\par      sets %? to true if the window has the focus
\par 
\par `h'
\par      hardstatus of the window
\par 
\par `H'
\par      hostname of the system
\par 
\par `l'
\par      current load of the system
\par 
\par `m'
\par      month number
\par 
\par `M'
\par      month name
\par 
\par `n'
\par      window number
\par 
\par `s'
\par      seconds
\par 
\par `S'
\par      session name
\par 
\par `t'
\par      window title
\par 
\par `u'
\par      all other users on this window
\par 
\par `w'
\par      all window numbers and names. With `-' qualifier: up to the current
\par      window; with `+' qualifier: starting with the window after the
\par      current one.
\par 
\par `W'
\par      all window numbers and names except the current one
\par 
\par `y'
\par      last two digits of the year number
\par 
\par `Y'
\par      full year number
\par 
\par `?'
\par      the part to the next `%?' is displayed only if a `%' escape inside
\par      the part expands to a non-empty string
\par 
\par `:'
\par      else part of `%?'
\par 
\par `='
\par      pad the string to the display's width (like TeX's hfill). If a
\par      number is specified, pad to the percentage of the window's width.
\par      A `0' qualifier tells screen to treat the number as absolute
\par      position.  You can specify to pad relative to the last absolute
\par      pad position by adding a `+' qualifier or to pad relative to the
\par      right margin by using `-'. The padding truncates the string if the
\par      specified position lies before the current position. Add the `L'
\par      qualifier to change this.
\par 
\par `<'
\par      same as `%=' but just do truncation, do not fill with spaces
\par 
\par `>'
\par      mark the current text position for the next truncation. When
\par      screen needs to do truncation, it tries to do it in a way that the
\par      marked position gets moved to the specified percentage of the
\par      output area. (The area starts from the last absolute pad position
\par      and ends with the position specified by the truncation operator.)
\par      The `L' qualifier tells screen to mark the truncated parts with
\par      `...'.
\par 
\par `\{'
\par      attribute/color modifier string terminated by the next `\}'
\par 
\par ``'
\par      Substitute with the output of a `backtick' command. The length
\par      qualifier is misused to identify one of the commands. *Note
\par      Backtick::.
\par    The `c' and `C' escape may be qualified with a `0' to make screen use
\par zero instead of space as fill character.  The `n' and `=' escapes
\par understand a length qualifier (e.g. `%3n'), `D' and `M' can be prefixed
\par with `L' to generate long names, `w' and `W' also show the window flags
\par if `L' is given.
\par 
\par    An attribute/color modifier is is used to change the attributes or
\par the color settings. Its format is `[attribute modifier] [color
\par description]'. The attribute modifier must be prefixed by a change type
\par indicator if it can be confused with a color description. The following
\par change types are known:
\par `+'
\par      add the specified set to the current attributes
\par 
\par `-'
\par      remove the set from the current attributes
\par 
\par `!'
\par      invert the set in the current attributes
\par 
\par `='
\par      change the current attributes to the specified set
\par    The attribute set can either be specified as a hexadecimal number or
\par a combination of the following letters:
\par `d'
\par      dim
\par 
\par `u'
\par      underline
\par 
\par `b'
\par      bold
\par 
\par `r'
\par      reverse
\par 
\par `s'
\par      standout
\par 
\par `B'
\par      blinking
\par    Colors are coded either as a hexadecimal number or two letters
\par specifying the desired background and foreground color (in that order).
\par The following colors are known:
\par `k'
\par      black
\par 
\par `r'
\par      red
\par 
\par `g'
\par      green
\par 
\par `y'
\par      yellow
\par 
\par `b'
\par      blue
\par 
\par `m'
\par      magenta
\par 
\par `c'
\par      cyan
\par 
\par `w'
\par      white
\par 
\par `d'
\par      default color
\par 
\par `.'
\par      leave color unchanged
\par    The capitalized versions of the letter specify bright colors. You
\par can also use the pseudo-color `i' to set just the brightness and leave
\par the color unchanged.
\par 
\par    A one digit/letter color description is treated as foreground or
\par background color dependent on the current attributes: if reverse mode is
\par set, the background color is changed instead of the foreground color.
\par If you don't like this, prefix the color with a `.'. If you want the
\par same behavior for two-letter color descriptions, also prefix them with
\par a `.'.
\par 
\par    As a special case, `%\{-\}' restores the attributes and colors that
\par were set before the last change was made (i.e. pops one level of the
\par color-change stack).
\par 
\par Examples:
\par `G'
\par      set color to bright green
\par 
\par `+b r'
\par      use bold red
\par 
\par `= yd'
\par      clear all attributes, write in default color on yellow background.
\par 
\par `%-Lw%\{= BW\}%50>%n%f* %t%\{-\}%+Lw%<'
\par      The available windows centered at the current win dow and
\par      truncated to the available width. The current window is displayed
\par      white on blue.  This can be used with `hardstatus alwayslastline'.
\par 
\par `%?%F%\{.R.\}%?%3n %t%? [%h]%?'
\par      The window number and title and the window's hardstatus, if one is
\par      set.  Also use a red background if this is the active focus.
\par      Useful for `caption string'.
\par 
\par 22 Environment Variables
\par ************************
\par 
\par `COLUMNS'
\par      Number of columns on the terminal (overrides termcap entry).
\par 
\par `HOME'
\par      Directory in which to look for .screenrc.
\par 
\par `LINES'
\par      Number of lines on the terminal (overrides termcap entry).
\par 
\par `LOCKPRG'
\par      Screen lock program.
\par 
\par `NETHACKOPTIONS'
\par      Turns on `nethack' option.
\par 
\par `PATH'
\par      Used for locating programs to run.
\par 
\par `SCREENCAP'
\par      For customizing a terminal's `TERMCAP' value.
\par 
\par `SCREENDIR'
\par      Alternate socket directory.
\par 
\par `SCREENRC'
\par      Alternate user screenrc file.
\par 
\par `SHELL'
\par      Default shell program for opening windows (default `/bin/sh').
\par 
\par `STY'
\par      Alternate socket name. If `screen' is invoked, and the environment
\par      variable `STY' is set, then it creates only a window in the
\par      running `screen' session rather than starting a new session.
\par 
\par `SYSSCREENRC'
\par      Alternate system screenrc file.
\par 
\par `TERM'
\par      Terminal name.
\par 
\par `TERMCAP'
\par      Terminal description.
\par 
\par `WINDOW'
\par      Window number of a window (at creation time).
\par 
\par 23 Files Referenced
\par *******************
\par 
\par `.../screen-4.?.??/etc/screenrc'
\par `.../screen-4.?.??/etc/etcscreenrc'
\par      Examples in the `screen' distribution package for private and
\par      global initialization files.
\par 
\par ``$SYSSCREENRC''
\par `/local/etc/screenrc'
\par      `screen' initialization commands
\par 
\par ``$SCREENRC''
\par ``$HOME'/.iscreenrc'
\par ``$HOME'/.screenrc'
\par      Read in after /local/etc/screenrc
\par 
\par ``$SCREENDIR'/S-LOGIN'
\par 
\par `/local/screens/S-LOGIN'
\par      Socket directories (default)
\par 
\par `/usr/tmp/screens/S-LOGIN'
\par      Alternate socket directories.
\par 
\par `SOCKET DIRECTORY/.termcap'
\par      Written by the `dumptermcap' command
\par 
\par `/usr/tmp/screens/screen-exchange or'
\par `/tmp/screen-exchange'
\par      `screen' interprocess communication buffer
\par 
\par `hardcopy.[0-9]'
\par      Screen images created by the hardcopy command
\par 
\par `screenlog.[0-9]'
\par      Output log files created by the log command
\par 
\par `/usr/lib/terminfo/?/* or'
\par `/etc/termcap'
\par      Terminal capability databases
\par 
\par `/etc/utmp'
\par      Login records
\par 
\par ``$LOCKPRG''
\par      Program for locking the terminal.
\par 
\par 24 Credits
\par **********
\par 
\par Authors
\par =======
\par 
\par    Originally created by Oliver Laumann, this latest version was
\par produced by Wayne Davison, Juergen Weigert and Michael Schroeder.
\par 
\par Contributors
\par ============
\par 
\par           Ken Beal (kbeal@amber.ssd.csd.harris.com),
\par           Rudolf Koenig (rfkoenig@informatik.uni-erlangen.de),
\par           Toerless Eckert (eckert@informatik.uni-erlangen.de),
\par           Wayne Davison (davison@borland.com),
\par           Patrick Wolfe (pat@kai.com, kailand!pat),
\par           Bart Schaefer (schaefer@cse.ogi.edu),
\par           Nathan Glasser (nathan@brokaw.lcs.mit.edu),
\par           Larry W. Virden (lvirden@cas.org),
\par           Howard Chu (hyc@hanauma.jpl.nasa.gov),
\par           Tim MacKenzie (tym@dibbler.cs.monash.edu.au),
\par           Markku Jarvinen (mta@\{cc,cs,ee\}.tut.fi),
\par           Marc Boucher (marc@CAM.ORG),
\par           Doug Siebert (dsiebert@isca.uiowa.edu),
\par           Ken Stillson (stillson@tsfsrv.mitre.org),
\par           Ian Frechett (frechett@spot.Colorado.EDU),
\par           Brian Koehmstedt (bpk@gnu.ai.mit.edu),
\par           Don Smith (djs6015@ultb.isc.rit.edu),
\par           Frank van der Linden (vdlinden@fwi.uva.nl),
\par           Martin Schweikert (schweik@cpp.ob.open.de),
\par           David Vrona (dave@sashimi.lcu.com),
\par           E. Tye McQueen (tye%spillman.UUCP@uunet.uu.net),
\par           Matthew Green (mrg@eterna.com.au),
\par           Christopher Williams (cgw@pobox.com),
\par           Matt Mosley (mattm@access.digex.net),
\par           Gregory Neil Shapiro (gshapiro@wpi.WPI.EDU),
\par           Jason Merrill (jason@jarthur.Claremont.EDU),
\par           Johannes Zellner (johannes@zellner.org),
\par           Pablo Averbuj (pablo@averbuj.com).
\par 
\par Version
\par =======
\par 
\par    This manual describes version 4.1.0 of the `screen' program. Its
\par roots are a merge of a custom version 2.3PR7 by Wayne Davison and
\par several enhancements to Oliver Laumann's version 2.0.  Note that all
\par versions numbered 2.x are copyright by Oliver Laumann.
\par 
\par    See also *Note Availability::.
\par 
\par 25 Bugs
\par *******
\par 
\par Just like any other significant piece of software, `screen' has a few
\par bugs and missing features.  Please send in a bug report if you have
\par found a bug not mentioned here.
\par 
\par 25.1 Known Bugs
\par ===============
\par 
\par    * `dm' (delete mode) and `xs' are not handled correctly (they are
\par      ignored).  `xn' is treated as a magic-margin indicator.
\par 
\par    * `screen' has no clue about double-high or double-wide characters.
\par      But this is the only area where `vttest' is allowed to fail.
\par 
\par    * It is not possible to change the environment variable `$TERMCAP'
\par      when reattaching under a different terminal type.
\par 
\par    * The support of terminfo based systems is very limited. Adding extra
\par      capabilities to `$TERMCAP' may not have any effects.
\par 
\par    * `screen' does not make use of hardware tabs.
\par 
\par    * `screen' must be installed setuid root on most systems in order to
\par      be able to correctly change the owner of the tty device file for
\par      each window.  Special permission may also be required to write the
\par      file `/etc/utmp'.
\par 
\par    * Entries in `/etc/utmp' are not removed when `screen' is killed
\par      with SIGKILL.  This will cause some programs (like "w" or "rwho")
\par      to advertise that a user is logged on who really isn't.
\par 
\par    * `screen' may give a strange warning when your tty has no utmp
\par      entry.
\par 
\par    * When the modem line was hung up, `screen' may not automatically
\par      detach (or quit) unless the device driver sends a HANGUP signal.
\par      To detach such a `screen' session use the -D or -d command line
\par      option.
\par 
\par    * If a password is set, the command line options -d and -D still
\par      detach a session without asking.
\par 
\par    * Both `breaktype' and `defbreaktype' change the break generating
\par      method used by all terminal devices. The first should change a
\par      window specific setting, where the latter should change only the
\par      default for new windows.
\par 
\par    * When attaching to a multiuser session, the user's `.screenrc' file
\par      is not sourced. Each users personal settings have to be included
\par      in the `.screenrc' file from which the session is booted, or have
\par      to be changed manually.
\par 
\par    * A weird imagination is most useful to gain full advantage of all
\par      the features.
\par 
\par 25.2 Reporting Bugs
\par ===================
\par 
\par If you find a bug in `Screen', please send electronic mail to
\par `screen@uni-erlangen.de', and also to `bug-gnu-utils@prep.ai.mit.edu'.
\par Include the version number of `Screen' which you are using.  Also
\par include in your message the hardware and operating system, the compiler
\par used to compile, a description of the bug behavior, and the conditions
\par that triggered the bug. Please recompile `screen' with the `-DDEBUG'
\par options enabled, reproduce the bug, and have a look at the debug output
\par written to the directory `/tmp/debug'. If necessary quote suspect
\par passages from the debug output and show the contents of your `config.h'
\par if it matters.
\par 
\par 25.3 Availability
\par =================
\par 
\par `Screen' is available under the `GNU' copyleft.
\par 
\par    The latest official release of `screen' available via anonymous ftp
\par from `prep.ai.mit.edu', `nic.funet.fi' or any other `GNU' distribution
\par site.  The home site of `screen' is `ftp.uni-erlangen.de
\par (131.188.3.71)', in the directory `pub/utilities/screen'.  The
\par subdirectory `private' contains the latest beta testing release.  If
\par you want to help, send a note to screen@uni-erlangen.de.
\par 
\par 26 Installation
\par ***************
\par 
\par Since `screen' uses pseudo-ttys, the select system call, and
\par UNIX-domain sockets/named pipes, it will not run under a system that
\par does not include these features of 4.2 and 4.3 BSD UNIX.
\par 
\par 26.1 Socket Directory
\par =====================
\par 
\par The socket directory defaults either to `$HOME/.screen' or simply to
\par `/tmp/screens' or preferably to `/usr/local/screens' chosen at
\par compile-time. If `screen' is installed setuid root, then the
\par administrator should compile screen with an adequate (not NFS mounted)
\par `SOCKDIR'. If `screen' is not running setuid-root, the user can specify
\par any mode 700 directory in the environment variable `$SCREENDIR'.
\par 
\par 26.2 Compiling Screen
\par =====================
\par 
\par To compile and install screen:
\par 
\par    The `screen' package comes with a `GNU Autoconf' configuration
\par script. Before you compile the package run
\par 
\par                            `sh ./configure'
\par 
\par    This will create a `config.h' and `Makefile' for your machine.  If
\par `configure' fails for some reason, then look at the examples and
\par comments found in the `Makefile.in' and `config.h.in' templates.
\par Rename `config.status' to `config.status.MACHINE' when you want to keep
\par configuration data for multiple architectures. Running `sh
\par ./config.status.MACHINE' recreates your configuration significantly
\par faster than rerunning `configure'.
\par Read through the "User Configuration" section of `config.h', and verify
\par that it suits your needs.  A comment near the top of this section
\par explains why it's best to install screen setuid to root.  Check for the
\par place for the global `screenrc'-file and for the socket directory.
\par Check the compiler used in `Makefile', the prefix path where to install
\par `screen'. Then run
\par 
\par                                 `make'
\par 
\par    If `make' fails to produce one of the files `term.h', `comm.h' or
\par `tty.c', then use `FILENAME.X.dist' instead.  For additional
\par information about installation of `screen' refer to the file
\par `INSTALLATION', coming with this package.
\par 
\par Concept Index
\par *************
\par 
\par .screenrc:                                     See 4.1.      (line  341)
\par availability:                                  See 25.3.     (line 4718)
\par binding:                                       See 14.       (line 3051)
\par bug report:                                    See 25.2.     (line 4704)
\par bugs:                                          See 25.       (line 4647)
\par capabilities:                                  See 16.5.     (line 3524)
\par command character:                             See 14.2.     (line 3106)
\par command line options:                          See 3.        (line  128)
\par command summary:                               See 5.2.      (line  687)
\par compiling screen:                              See 26.2.     (line 4747)
\par control sequences:                             See 11.1.     (line 2141)
\par copy and paste:                                See 12.       (line 2646)
\par customization:                                 See 4.        (line  334)
\par environment:                                   See 22.       (line 4498)
\par escape character:                              See 14.2.     (line 3106)
\par files:                                         See 23.       (line 4548)
\par flow control:                                  See 15.       (line 3234)
\par input translation:                             See 11.2.     (line 2274)
\par installation:                                  See 26.       (line 4730)
\par introduction:                                  See 2.        (line   95)
\par invoking:                                      See 3.        (line  128)
\par key binding:                                   See 14.       (line 3051)
\par marking:                                       See 12.1.     (line 2653)
\par message line:                                  See 17.       (line 3720)
\par multiuser session:                             See 8.4.      (line 1588)
\par options:                                       See 3.        (line  128)
\par overview:                                      See 1.        (line   28)
\par regions:                                       See 9.        (line 1770)
\par screenrc:                                      See 4.1.      (line  341)
\par scrollback:                                    See 12.1.     (line 2653)
\par socket directory:                              See 26.1.     (line 4737)
\par string escapes:                                See 21.       (line 4273)
\par terminal capabilities:                         See 16.5.     (line 3524)
\par title:                                         See 10.1.     (line 1866)
\par window types:                                  See 6.6.      (line 1342)
\par Command Index
\par *************
\par 
\par This is a list of all the commands supported by `screen'.
\par 
\par acladd:                                        See 8.4.2.    (line 1608)
\par aclchg:                                        See 8.4.3.    (line 1621)
\par acldel:                                        See 8.4.4.    (line 1646)
\par aclgrp:                                        See 8.4.5.    (line 1655)
\par aclumask:                                      See 8.4.7.    (line 1677)
\par activity:                                      See 10.6.     (line 2054)
\par addacl:                                        See 8.4.2.    (line 1609)
\par allpartial:                                    See 11.7.     (line 2469)
\par altscreen:                                     See 11.7.     (line 2479)
\par at:                                            See 20.1.     (line 3910)
\par attrcolor:                                     See 20.15.    (line 4146)
\par autodetach:                                    See 8.1.      (line 1524)
\par autonuke:                                      See 16.6.     (line 3631)
\par backtick:                                      See 20.19.    (line 4201)
\par bce:                                           See 11.11.    (line 2565)
\par bell_msg:                                      See 11.4.     (line 2376)
\par bind:                                          See 14.1.     (line 3058)
\par bindkey:                                       See 14.5.     (line 3159)
\par blanker:                                       See 20.20.    (line 4236)
\par blankerprg:                                    See 20.20.    (line 4246)
\par break:                                         See 20.2.     (line 3943)
\par breaktype:                                     See 20.2.     (line 3955)
\par bufferfile:                                    See 12.4.     (line 2916)
\par c1:                                            See 11.11.    (line 2546)
\par caption:                                       See 9.6.      (line 1832)
\par chacl:                                         See 8.4.3.    (line 1622)
\par charset:                                       See 11.11.    (line 2590)
\par chdir:                                         See 6.1.      (line 1239)
\par clear:                                         See 11.5.     (line 2420)
\par colon:                                         See 4.3.      (line  388)
\par command:                                       See 14.3.     (line 3136)
\par compacthist:                                   See 12.1.2.   (line 2685)
\par console:                                       See 10.2.     (line 1996)
\par copy:                                          See 12.1.     (line 2654)
\par copy_reg:                                      See 12.3.     (line 2892)
\par crlf:                                          See 12.1.1.   (line 2664)
\par debug:                                         See 20.3.     (line 3978)
\par defautonuke:                                   See 16.6.     (line 3637)
\par defbce:                                        See 11.11.    (line 2622)
\par defbreaktype:                                  See 20.2.     (line 3963)
\par defc1:                                         See 11.11.    (line 2612)
\par defcharset:                                    See 11.11.    (line 2633)
\par defencoding:                                   See 11.11.    (line 2627)
\par defescape:                                     See 14.3.     (line 3121)
\par defflow:                                       See 15.2.     (line 3292)
\par defgr:                                         See 11.11.    (line 2617)
\par defhstatus:                                    See 10.8.     (line 2115)
\par deflog:                                        See 18.2.     (line 3830)
\par deflogin:                                      See 10.4.     (line 2025)
\par defmode:                                       See 10.5.     (line 2044)
\par defmonitor:                                    See 10.6.     (line 2069)
\par defnonblock:                                   See 20.6.     (line 4025)
\par defobuflimit:                                  See 16.7.     (line 3656)
\par defscrollback:                                 See 12.1.2.   (line 2674)
\par defshell:                                      See 6.4.      (line 1308)
\par defsilence:                                    See 20.8.     (line 4052)
\par defslowpaste:                                  See 12.2.     (line 2864)
\par defutf8:                                       See 11.11.    (line 2638)
\par defwrap:                                       See 11.8.     (line 2509)
\par defwritelock:                                  See 8.4.9.    (line 1715)
\par defzombie:                                     See 20.12.    (line 4094)
\par detach:                                        See 8.1.      (line 1532)
\par digraph:                                       See 11.3.     (line 2360)
\par dinfo:                                         See 11.6.     (line 2461)
\par displays:                                      See 8.4.6.    (line 1668)
\par dumptermcap:                                   See 16.2.     (line 3424)
\par echo:                                          See 19.1.     (line 3876)
\par encoding:                                      See 11.11.    (line 2572)
\par escape:                                        See 14.3.     (line 3110)
\par eval:                                          See 20.17.    (line 4186)
\par exec:                                          See 13.1.     (line 2971)
\par fit:                                           See 9.7.      (line 1851)
\par flow:                                          See 15.2.     (line 3300)
\par focus:                                         See 9.2.      (line 1787)
\par gr:                                            See 11.11.    (line 2557)
\par hardcopy:                                      See 18.1.     (line 3807)
\par hardcopy_append:                               See 18.1.     (line 3816)
\par hardcopydir:                                   See 18.1.     (line 3822)
\par hardstatus:                                    See 17.2.     (line 3745)
\par height:                                        See 11.10.    (line 2538)
\par help:                                          See 14.4.     (line 3146)
\par history:                                       See 12.5.     (line 2950)
\par hstatus:                                       See 10.8.     (line 2127)
\par idle:                                          See 20.20.    (line 4227)
\par ignorecase:                                    See 12.1.7.   (line 2773)
\par info:                                          See 11.6.     (line 2427)
\par ins_reg:                                       See 12.3.     (line 2896)
\par kill:                                          See 10.3.     (line 2007)
\par lastmsg:                                       See 17.3.     (line 3778)
\par license:                                       See 20.4.     (line 3989)
\par lockscreen:                                    See 8.3.      (line 1571)
\par log:                                           See 18.2.     (line 3835)
\par logfile:                                       See 18.2.     (line 3846)
\par login:                                         See 10.4.     (line 2032)
\par logtstamp:                                     See 18.2.     (line 3854)
\par mapdefault:                                    See 14.7.     (line 3217)
\par mapnotnext:                                    See 14.7.     (line 3222)
\par maptimeout:                                    See 14.7.     (line 3226)
\par markkeys:                                      See 12.1.3.   (line 2694)
\par maxwin:                                        See 20.18.    (line 4193)
\par meta:                                          See 14.3.     (line 3129)
\par monitor:                                       See 10.6.     (line 2074)
\par msgminwait:                                    See 17.4.     (line 3788)
\par msgwait:                                       See 17.4.     (line 3793)
\par multiuser:                                     See 8.4.1.    (line 1598)
\par nethack:                                       See 20.5.     (line 3997)
\par next:                                          See 7.1.      (line 1451)
\par nonblock:                                      See 20.6.     (line 4013)
\par number:                                        See 20.7.     (line 4032)
\par obuflimit:                                     See 16.7.     (line 3647)
\par only:                                          See 9.3.      (line 1802)
\par other:                                         See 7.2.      (line 1465)
\par partial:                                       See 11.7.     (line 2484)
\par password:                                      See 8.1.      (line 1540)
\par paste:                                         See 12.2.     (line 2831)
\par pastefont:                                     See 12.2.     (line 2858)
\par pow_break:                                     See 20.2.     (line 3951)
\par pow_detach:                                    See 8.2.      (line 1554)
\par pow_detach_msg:                                See 8.2.      (line 1561)
\par prev:                                          See 7.1.      (line 1458)
\par printcmd:                                      See 20.13.    (line 4120)
\par process:                                       See 12.3.     (line 2900)
\par quit:                                          See 8.7.      (line 1760)
\par readbuf:                                       See 12.4.     (line 2928)
\par readreg:                                       See 12.2.     (line 2874)
\par redisplay:                                     See 11.7.     (line 2493)
\par register:                                      See 12.3.     (line 2908)
\par remove:                                        See 9.4.      (line 1809)
\par removebuf:                                     See 12.4.     (line 2934)
\par reset:                                         See 11.9.     (line 2519)
\par resize:                                        See 9.5.      (line 1817)
\par screen:                                        See 6.2.      (line 1257)
\par scrollback:                                    See 12.1.2.   (line 2679)
\par select:                                        See 7.3.      (line 1475)
\par sessionname:                                   See 8.5.      (line 1739)
\par setenv:                                        See 6.3.      (line 1292)
\par setsid:                                        See 20.16.    (line 4174)
\par shell:                                         See 6.4.      (line 1307)
\par shelltitle:                                    See 6.4.      (line 1318)
\par silence:                                       See 20.8.     (line 4042)
\par silencewait:                                   See 20.8.     (line 4057)
\par sleep:                                         See 19.2.     (line 3887)
\par slowpaste:                                     See 12.2.     (line 2863)
\par sorendition:                                   See 20.14.    (line 4136)
\par source:                                        See 4.2.      (line  370)
\par split:                                         See 9.1.      (line 1778)
\par startup_message:                               See 19.3.     (line 3896)
\par stuff:                                         See 12.2.     (line 2851)
\par su:                                            See 8.4.10.   (line 1723)
\par suspend:                                       See 8.6.      (line 1751)
\par term:                                          See 6.5.      (line 1327)
\par termcap:                                       See 16.3.     (line 3438)
\par termcapinfo:                                   See 16.3.     (line 3440)
\par terminfo:                                      See 16.3.     (line 3439)
\par time:                                          See 20.9.     (line 4065)
\par title:                                         See 10.1.1.   (line 1888)
\par umask:                                         See 8.4.7.    (line 1678)
\par unsetenv:                                      See 6.3.      (line 1300)
\par utf8:                                          See 11.11.    (line 2603)
\par vbell:                                         See 11.4.     (line 2392)
\par vbell_msg:                                     See 11.4.     (line 2404)
\par vbellwait:                                     See 11.4.     (line 2412)
\par verbose:                                       See 20.10.    (line 4078)
\par version:                                       See 20.11.    (line 4086)
\par wall:                                          See 8.4.8.    (line 1695)
\par width:                                         See 11.10.    (line 2528)
\par windowlist:                                    See 7.4.      (line 1492)
\par windows:                                       See 10.7.     (line 2086)
\par wrap:                                          See 11.8.     (line 2501)
\par writebuf:                                      See 12.4.     (line 2938)
\par writelock:                                     See 8.4.9.    (line 1703)
\par xoff:                                          See 15.3.     (line 3314)
\par xon:                                           See 15.3.     (line 3309)
\par zmodem:                                        See 20.21.    (line 4253)
\par zombie:                                        See 20.12.    (line 4093)
\par Keystroke Index
\par ***************
\par 
\par This is a list of the default key bindings.
\par 
\par    The leading escape character (*note Command Character::) has been
\par omitted from the key sequences, since it is the same for all bindings.
\par 
\par ":                                             See 7.4.      (line 1491)
\par ':                                             See 7.3.      (line 1474)
\par *:                                             See 8.4.6.    (line 1667)
\par .:                                             See 16.2.     (line 3423)
\par 0...9:                                         See 7.3.      (line 1474)
\par ::                                             See 4.3.      (line  387)
\par <:                                             See 12.4.     (line 2927)
\par =:                                             See 12.4.     (line 2933)
\par >:                                             See 12.4.     (line 2937)
\par ?:                                             See 14.4.     (line 3145)
\par [:                                             See 12.1.     (line 2653)
\par ]:                                             See 12.2.     (line 2830)
\par a:                                             See 14.3.     (line 3128)
\par A:                                             See 10.1.1.   (line 1887)
\par C:                                             See 11.5.     (line 2419)
\par c:                                             See 6.2.      (line 1256)
\par C-[:                                           See 12.1.     (line 2653)
\par C-\\:                                           See 8.7.      (line 1759)
\par C-]:                                           See 12.2.     (line 2830)
\par C-a:                                           See 7.2.      (line 1464)
\par C-c:                                           See 6.2.      (line 1256)
\par C-d:                                           See 8.1.      (line 1531)
\par C-f:                                           See 15.2.     (line 3299)
\par C-g:                                           See 11.4.     (line 2391)
\par C-h:                                           See 18.1.     (line 3806)
\par C-i:                                           See 11.6.     (line 2426)
\par C-k:                                           See 10.3.     (line 2006)
\par C-l:                                           See 11.7.     (line 2492)
\par C-m:                                           See 17.3.     (line 3777)
\par C-n:                                           See 7.1.      (line 1450)
\par C-p:                                           See 7.1.      (line 1457)
\par C-q:                                           See 15.3.     (line 3308)
\par C-r:                                           See 11.8.     (line 2500)
\par C-s:                                           See 15.3.     (line 3313)
\par C-t:                                           See 20.9.     (line 4064)
\par C-v:                                           See 11.3.     (line 2359)
\par C-w:                                           See 10.7.     (line 2085)
\par C-x:                                           See 8.3.      (line 1570)
\par C-z:                                           See 8.6.      (line 1750)
\par D:                                             See 8.2.      (line 1553)
\par d:                                             See 8.1.      (line 1531)
\par ESC:                                           See 12.1.     (line 2653)
\par f:                                             See 15.2.     (line 3299)
\par F:                                             See 9.7.      (line 1850)
\par H:                                             See 18.2.     (line 3834)
\par h:                                             See 18.1.     (line 3806)
\par i:                                             See 11.6.     (line 2426)
\par k:                                             See 10.3.     (line 2006)
\par l:                                             See 11.7.     (line 2492)
\par L:                                             See 10.4.     (line 2031)
\par m:                                             See 17.3.     (line 3777)
\par M:                                             See 10.6.     (line 2073)
\par N:                                             See 20.7.     (line 4031)
\par n:                                             See 7.1.      (line 1450)
\par p:                                             See 7.1.      (line 1457)
\par q:                                             See 15.3.     (line 3308)
\par Q:                                             See 9.3.      (line 1801)
\par r:                                             See 11.8.     (line 2500)
\par s:                                             See 15.3.     (line 3313)
\par S:                                             See 9.1.      (line 1777)
\par SPC:                                           See 7.1.      (line 1450)
\par t:                                             See 20.9.     (line 4064)
\par TAB:                                           See 9.2.      (line 1786)
\par v:                                             See 20.11.    (line 4085)
\par W:                                             See 11.10.    (line 2527)
\par w:                                             See 10.7.     (line 2085)
\par X:                                             See 9.4.      (line 1808)
\par x:                                             See 8.3.      (line 1570)
\par Z:                                             See 11.9.     (line 2518)
\par z:                                             See 8.6.      (line 1750)
\par \{:                                             See 12.5.     (line 2949)
\par Short Contents
\par **************
\par 
\par Screen
\par 1 Overview
\par 2 Getting Started
\par 3 Invoking `Screen'
\par 4 Customizing `Screen'
\par 5 Commands
\par 6 New Window
\par 7 Selecting a Window
\par 8 Session Management Commands
\par 9 Regions
\par 10 Window Settings
\par 11 Virtual Terminal
\par 12 Copy and Paste
\par 13 Subprocess Execution
\par 14 Key Binding
\par 15 Flow Control
\par 16 Termcap
\par 17 The Message Line
\par 18 Logging
\par 19 Startup
\par 20 Miscellaneous commands
\par 21 String Escapes
\par 22 Environment Variables
\par 23 Files Referenced
\par 24 Credits
\par 25 Bugs
\par 26 Installation
\par Concept Index
\par Command Index
\par Keystroke Index
\par 
\par 
\par Table of Contents
\par *****************
\par 
\par Screen
\par 1 Overview
\par 2 Getting Started
\par 3 Invoking `Screen'
\par 4 Customizing `Screen'
\par   4.1 The `.screenrc' file
\par   4.2 Source
\par   4.3 Colon
\par 5 Commands
\par   5.1 Default Key Bindings
\par   5.2 Command Summary
\par 6 New Window
\par   6.1 Chdir
\par   6.2 Screen Command
\par   6.3 Setenv
\par   6.4 Shell
\par   6.5 Term
\par   6.6 Window Types
\par 7 Selecting a Window
\par   7.1 Moving Back and Forth
\par   7.2 Other Window
\par   7.3 Select
\par   7.4 Windowlist
\par 8 Session Management Commands
\par   8.1 Detach
\par   8.2 Power Detach
\par   8.3 Lock
\par   8.4 Multiuser Session
\par     8.4.1 Multiuser
\par     8.4.2 Acladd
\par     8.4.3 Aclchg
\par     8.4.4 Acldel
\par     8.4.5 Aclgrp
\par     8.4.6 Displays
\par     8.4.7 aclumask
\par     8.4.8 Wall
\par     8.4.9 Writelock
\par     8.4.10 Su
\par   8.5 Session Name
\par   8.6 Suspend
\par   8.7 Quit
\par 9 Regions
\par   9.1 Split
\par   9.2 Focus
\par   9.3 Only
\par   9.4 Remove
\par   9.5 Resize
\par   9.6 Caption
\par   9.7 Fit
\par 10 Window Settings
\par   10.1 Naming Windows (Titles)
\par     10.1.1 Title Command
\par     10.1.2 Dynamic Titles
\par     10.1.3 Setting up your prompt for shell titles
\par     10.1.4 Setting up shell titles in your `.screenrc'
\par   10.2 Console
\par   10.3 Kill
\par   10.4 Login
\par   10.5 Mode
\par   10.6 Monitoring
\par   10.7 Windows
\par   10.8 Hardstatus
\par 11 Virtual Terminal
\par   11.1 Control Sequences
\par   11.2 Input Translation
\par   11.3 Digraph
\par   11.4 Bell
\par   11.5 Clear
\par   11.6 Info
\par   11.7 Redisplay
\par   11.8 Wrap
\par   11.9 Reset
\par   11.10 Window Size
\par   11.11 Character Processing
\par 12 Copy and Paste
\par   12.1 Copying
\par     12.1.1 CR/LF
\par     12.1.2 Scrollback
\par     12.1.3 markkeys
\par     12.1.4 Movement Keys
\par     12.1.5 Marking
\par     12.1.6 Repeat Count
\par     12.1.7 Searching
\par     12.1.8 Specials
\par   12.2 Paste
\par   12.3 Registers
\par   12.4 Screen Exchange
\par   12.5 History
\par 13 Subprocess Execution
\par   13.1 Exec
\par   13.2 Using Exec
\par 14 Key Binding
\par   14.1 The `bind' command
\par   14.2 Examples of the `bind' command
\par   14.3 Command Character
\par   14.4 Help
\par   14.5 Bindkey
\par   14.6 Bindkey Examples
\par   14.7 Bindkey Control
\par 15 Flow Control
\par   15.1 About `screen' flow control settings
\par   15.2 Flow
\par   15.3 XON and XOFF
\par 16 Termcap
\par   16.1 Choosing the termcap entry for a window
\par   16.2 Write out the window's termcap entry
\par   16.3 The `termcap' command
\par   16.4 Termcap Examples
\par   16.5 Special Terminal Capabilities
\par   16.6 Autonuke
\par   16.7 Obuflimit
\par   16.8 Character Translation
\par 17 The Message Line
\par   17.1 Using the message line from your program
\par   17.2 Hardware Status Line
\par   17.3 Display Last Message
\par   17.4 Message Wait
\par 18 Logging
\par   18.1 hardcopy
\par   18.2 log
\par 19 Startup
\par   19.1 echo
\par   19.2 sleep
\par   19.3 Startup Message
\par 20 Miscellaneous commands
\par   20.1 At
\par   20.2 Break
\par   20.3 Debug
\par   20.4 License
\par   20.5 Nethack
\par   20.6 Nonblock
\par   20.7 Number
\par   20.8 Silence
\par   20.9 Time
\par   20.10 Verbose
\par   20.11 Version
\par   20.12 Zombie
\par   20.13 Printcmd
\par   20.14 Sorendition
\par   20.15 Attrcolor
\par   20.16 Setsid
\par   20.17 Eval
\par   20.18 Maxwin
\par   20.19 Backtick
\par   20.20 Screen Saver
\par   20.21 Zmodem
\par 21 String Escapes
\par 22 Environment Variables
\par 23 Files Referenced
\par 24 Credits
\par 25 Bugs
\par   25.1 Known Bugs
\par   25.2 Reporting Bugs
\par   25.3 Availability
\par 26 Installation
\par   26.1 Socket Directory
\par   26.2 Compiling Screen
\par Concept Index
\par Command Index
\par Keystroke Index\par}