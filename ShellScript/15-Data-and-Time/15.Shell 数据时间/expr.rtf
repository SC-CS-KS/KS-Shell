{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red255\green0\blue0;\red128\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1856857206\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1827164754}
}
{\*\listoverridetable
{\listoverride\listid1827164754\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf4 expr
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par 
\par \plain \f1\fs20 NAME
\par        expr - \plain \f1\fs20\cf1 evaluate(\uc2\u35780 \'c6\'c0\u20215 \'bc\'db\u65292 \'a3\'ac\u35780 \'c6\'c0\u20272 \'b9\'c0\u65292 \'a3\'ac\u27714 \'c7\'f3...\u20540 \'d6\'b5) \uc1\plain \f1\fs20 expressions
\par 
\par SYNOPSIS
\par \plain \f1\fs20\cf1        expr EXPRESSION
\par        expr OPTION
\par \plain \f1\fs20 
\par DESCRIPTION
\par        --help display this help and exit
\par 
\par        --version
\par               output version information and exit
\par 
\par       \plain \f1\fs20\cf1  Print the value of EXPRESSION to standard output.  \plain \f1\fs20 A blank line below separates increasing precedence groups.  
\par \plain \f1\b\fs20        EXPRESSION may be:
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1        ARG1 | ARG2
\par \plain \f1\fs20               ARG1 if it is neither null nor 0, otherwise ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 & ARG2
\par \plain \f1\fs20               ARG1 if neither argument is null or 0, otherwise 0
\par 
\par \plain \f1\fs20\cf1        ARG1 < ARG2
\par \plain \f1\fs20               ARG1 is less than ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 <= ARG2
\par \plain \f1\fs20               ARG1 is less than or equal to ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 = ARG2
\par \plain \f1\fs20               ARG1 is equal to ARG2
\par 
\par  \plain \f1\fs20\cf1       ARG1 != ARG2
\par \plain \f1\fs20               ARG1 is unequal to ARG2
\par 
\par        \plain \f1\fs20\cf1 ARG1 >= ARG2
\par \plain \f1\fs20               ARG1 is greater than or equal to ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 > ARG2
\par \plain \f1\fs20               ARG1 is greater than ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 + ARG2
\par \plain \f1\fs20               arithmetic sum of ARG1 and ARG2
\par \plain \f1\fs20\cf1 
\par        ARG1 - ARG2
\par \plain \f1\fs20               arithmetic difference of ARG1 and ARG2
\par 
\par   \plain \f1\fs20\cf1      ARG1 * ARG2
\par \plain \f1\fs20               arithmetic product of ARG1 and ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 / ARG2
\par \plain \f1\fs20               arithmetic quotient of ARG1 divided by ARG2
\par 
\par \plain \f1\fs20\cf1        ARG1 % ARG2
\par \plain \f1\fs20               arithmetic remainder of ARG1 divided by ARG2
\par 
\par \plain \f1\fs20\cf2        STRING : REGEXP
\par \plain \f1\fs20               anchored pattern match of REGEXP in STRING
\par 
\par \plain \f1\fs20\cf2        match STRING REGEXP
\par \plain \f1\fs20               same as STRING : REGEXP
\par 
\par \plain \f1\fs20\cf2        substr STRING POS LENGTH
\par \plain \f1\fs20               substring of STRING, POS counted from 1
\par 
\par \plain \f1\fs20\cf2        index STRING CHARS
\par \plain \f1\fs20               index in STRING where any CHARS is found, or 0
\par 
\par \plain \f1\fs20\cf2        length STRING
\par \plain \f1\fs20               length of STRING
\par 
\par \plain \f1\fs20\cf3        + TOKEN
\par \plain \f1\fs20               interpret TOKEN as a string, even if it is a keyword like `match' or an operator like `/'
\par 
\par \plain \f1\fs20\cf3        ( EXPRESSION )
\par \plain \f1\fs20               value of EXPRESSION
\par 
\par \plain \f1\fs20\cf3 Beware that many operators need to be escaped or quoted for shells\plain \f1\fs20 .  
\par Comparisons are arithmetic if both ARGs are numbers, else \plain \f1\fs20\cf3  \plain \f1\fs20\cf1 lexicographical\uc2\u65288 \'a3\'a8\u23383 \'d7\'d6\u20856 \'b5\'e4\u24207 \'d0\'f2\u30340 \'b5\'c4\u65289 \'a3\'a9\uc1\plain \f1\fs20 .   
\par Pattern  matches return the string matched between \\( and \\) or null; if \\( and \\) are not used, they return the number of characters matched or 0.
\par 
\par \plain \f1\b\fs20 Exit status is 
\par \plain \f1\fs20 0 if EXPRESSION is neither null nor 0, 
\par 1 if EXPRESSION is null or 0,  
\par 2  if  EXPRESSION  is  syntactically invalid,  
\par 3 if an error occurred.\par}