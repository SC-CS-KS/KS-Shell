{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green128\blue128;\red255\green0\blue0;\red0\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid1321290312\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1314658156}
}
{\*\listoverridetable
{\listoverride\listid1314658156\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf4 30.GREP
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\b\fs20 grep (global search regular expression(RE) and print out the line\uc2\u65289 \'a3\'a9\uc1
\par \plain \f1\fs20 \uc2\u20840 \'c8\'ab\u38754 \'c3\'e6\u25628 \'cb\'d1\u32034 \'cb\'f7\u27491 \'d5\'fd\u21017 \'d4\'f2\u34920 \'b1\'ed\u36798 \'b4\'ef\u24335 \'ca\'bd\u24182 \'b2\'a2\u25226 \'b0\'d1\u34892 \'d0\'d0\u25171 \'b4\'f2\u21360 \'d3\'a1\u20986 \'b3\'f6\u26469 \'c0\'b4)\u26159 \'ca\'c7\u19968 \'d2\'bb\u31181 \'d6\'d6\u24378 \'c7\'bf\u22823 \'b4\'f3\u30340 \'b5\'c4\u25991 \'ce\'c4\u26412 \'b1\'be\u25628 \'cb\'d1\u32034 \'cb\'f7\u24037 \'b9\'a4\u20855 \'be\'df\u65292 \'a3\'ac\u23427 \'cb\'fc\u33021 \'c4\'dc\u20351 \'ca\'b9\u29992 \'d3\'c3\u27491 \'d5\'fd\u21017 \'d4\'f2\u34920 \'b1\'ed\u36798 \'b4\'ef\u24335 \'ca\'bd\u25628 \'cb\'d1\u32034 \'cb\'f7\u25991 \'ce\'c4\u26412 \'b1\'be\u65292 \'a3\'ac\u24182 \'b2\'a2\u25226 \'b0\'d1\u21305 \'c6\'a5\u37197 \'c5\'e4\u30340 \'b5\'c4\u34892 \'d0\'d0\u25171 \'b4\'f2\u21360 \'d3\'a1\u20986 \'b3\'f6\u26469 \'c0\'b4\u12290 \'a1\'a3\uc1
\par 
\par grep\uc2\u30340 \'b5\'c4\u24037 \'b9\'a4\u20316 \'d7\'f7\u26041 \'b7\'bd\u24335 \'ca\'bd\u26159 \'ca\'c7\u36825 \'d5\'e2\u26679 \'d1\'f9\u30340 \'b5\'c4\u65292 \'a3\'ac\u23427 \'cb\'fc\u22312 \'d4\'da\u19968 \'d2\'bb\u20010 \'b8\'f6\u25110 \'bb\'f2\u22810 \'b6\'e0\u20010 \'b8\'f6\u25991 \'ce\'c4\u20214 \'bc\'fe\u20013 \'d6\'d0\u25628 \'cb\'d1\u32034 \'cb\'f7\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\u27169 \'c4\'a3\u26495 \'b0\'e5\u12290 \'a1\'a3\u22914 \'c8\'e7\u26524 \'b9\'fb\u27169 \'c4\'a3\u26495 \'b0\'e5\u21253 \'b0\'fc\u25324 \'c0\'a8\u31354 \'bf\'d5\u26684 \'b8\'f1\u65292 \'a3\'ac\u21017 \'d4\'f2\u24517 \'b1\'d8\u39035 \'d0\'eb\u34987 \'b1\'bb\u24341 \'d2\'fd\u29992 \'d3\'c3\u65292 \'a3\'ac\u27169 \'c4\'a3\u26495 \'b0\'e5\u21518 \'ba\'f3\u30340 \'b5\'c4\u25152 \'cb\'f9\u26377 \'d3\'d0\u23383 \'d7\'d6\u31526 \'b7\'fb\u20018 \'b4\'ae\u34987 \'b1\'bb\u30475 \'bf\'b4\u20316 \'d7\'f7\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf1 \uc2\u25628 \'cb\'d1\u32034 \'cb\'f7\u30340 \'b5\'c4\u32467 \'bd\'e1\u26524 \'b9\'fb\u34987 \'b1\'bb\u36865 \'cb\'cd\u21040 \'b5\'bd\u23631 \'c6\'c1\u24149 \'c4\'bb\u65292 \'a3\'ac\u19981 \'b2\'bb\u24433 \'d3\'b0\u21709 \'cf\'ec\u21407 \'d4\'ad\u25991 \'ce\'c4\u20214 \'bc\'fe\u20869 \'c4\'da\u23481 \'c8\'dd\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf3 
\par grep\uc2\u21487 \'bf\'c9\u29992 \'d3\'c3\u20110 \'d3\'dashell\u33050 \'bd\'c5\u26412 \'b1\'be\u65292 \'a3\'ac\u22240 \'d2\'f2\u20026 \'ce\'aagrep\u36890 \'cd\'a8\u36807 \'b9\'fd\u36820 \'b7\'b5\u22238 \'bb\'d8\u19968 \'d2\'bb\u20010 \'b8\'f6\u29366 \'d7\'b4\u24577 \'cc\'ac\u20540 \'d6\'b5\u26469 \'c0\'b4\u35828 \'cb\'b5\u26126 \'c3\'f7\u25628 \'cb\'d1\u32034 \'cb\'f7\u30340 \'b5\'c4\u29366 \'d7\'b4\u24577 \'cc\'ac\u12290 \'a1\'a3\uc1
\par \uc2\u22914 \'c8\'e7\u26524 \'b9\'fb\u27169 \'c4\'a3\u26495 \'b0\'e5\u25628 \'cb\'d1\u32034 \'cb\'f7\u25104 \'b3\'c9\u21151 \'b9\'a6\u65292 \'a3\'ac\u21017 \'d4\'f2\u36820 \'b7\'b5\u22238 \'bb\'d80\u65292 \'a3\'ac\u22914 \'c8\'e7\u26524 \'b9\'fb\u25628 \'cb\'d1\u32034 \'cb\'f7\u19981 \'b2\'bb\u25104 \'b3\'c9\u21151 \'b9\'a6\u65292 \'a3\'ac\u21017 \'d4\'f2\u36820 \'b7\'b5\u22238 \'bb\'d81\u65292 \'a3\'ac\u22914 \'c8\'e7\u26524 \'b9\'fb\u25628 \'cb\'d1\u32034 \'cb\'f7\u30340 \'b5\'c4\u25991 \'ce\'c4\u20214 \'bc\'fe\u19981 \'b2\'bb\u23384 \'b4\'e6\u22312 \'d4\'da\u65292 \'a3\'ac\u21017 \'d4\'f2\u36820 \'b7\'b5\u22238 \'bb\'d82\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20 \uc2\u25105 \'ce\'d2\u20204 \'c3\'c7\u21033 \'c0\'fb\u29992 \'d3\'c3\u36825 \'d5\'e2\u20123 \'d0\'a9\u36820 \'b7\'b5\u22238 \'bb\'d8\u20540 \'d6\'b5\u23601 \'be\'cd\u21487 \'bf\'c9\u36827 \'bd\'f8\u34892 \'d0\'d0\u19968 \'d2\'bb\u20123 \'d0\'a9\u33258 \'d7\'d4\u21160 \'b6\'af\u21270 \'bb\'af\u30340 \'b5\'c4\u25991 \'ce\'c4\u26412 \'b1\'be\u22788 \'b4\'a6\u29702 \'c0\'ed\u24037 \'b9\'a4\u20316 \'d7\'f7\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf2 
\par \plain \f1\b\fs20 \uc2\u35821 \'d3\'ef\u27861 \'b7\'a8: \uc1
\par \plain \f1\fs20\cf1 grep [options] PATTERN [FILE...]
\par \plain \f1\fs20 grep\uc2\u29992 \'d3\'c3\u20197 \'d2\'d4\u22312 \'d4\'dafile\u20869 \'c4\'da\u25991 \'ce\'c4\u20013 \'d6\'d0\u27604 \'b1\'c8\u23545 \'b6\'d4\u30456 \'cf\'e0\u23545 \'b6\'d4\u24212 \'d3\'a6\u30340 \'b5\'c4\u37096 \'b2\'bf\u20998 \'b7\'d6\u65292 \'a3\'ac\u25110 \'bb\'f2\u26159 \'ca\'c7\u24403 \'b5\'b1\u27809 \'c3\'bb\u26377 \'d3\'d0\u25351 \'d6\'b8\u23450 \'b6\'a8\u26723 \'b5\'b5\u26696 \'b0\'b8\u26102 \'ca\'b1\u65292 \'a3\'ac\u30001 \'d3\'c9\u26631 \'b1\'ea\u20934 \'d7\'bc\u36755 \'ca\'e4\u20837 \'c8\'eb\u20013 \'d6\'d0\u21435 \'c8\'a5\u27604 \'b1\'c8\u23545 \'b6\'d4\u12290 \'a1\'a3\uc1
\par \uc2\u22312 \'d4\'da\u39044 \'d4\'a4\u35774 \'c9\'e8\u30340 \'b5\'c4\u24773 \'c7\'e9\u20917 \'bf\'f6\u19979 \'cf\'c2\u65292 \'a3\'acgrep\u20250 \'bb\'e1\u23558 \'bd\'ab\u31526 \'b7\'fb\u21512 \'ba\'cf\u26679 \'d1\'f9\u24335 \'ca\'bd\u30340 \'b5\'c4\u37027 \'c4\'c7\u19968 \'d2\'bb\u34892 \'d0\'d0\u21015 \'c1\'d0\u20986 \'b3\'f6\u12290 \'a1\'a3\uc1
\par \uc2\u27492 \'b4\'cb\u22806 \'cd\'e2\u65292 \'a3\'ac\uc1\plain \f1\fs20\cf1 \uc2\u36824 \'bb\'b9\u26377 \'d3\'d0\u20004 \'c1\'bd\u20010 \'b8\'f6\u31243 \'b3\'cc\u24207 \'d0\'f2\u26159 \'ca\'c7grep\u30340 \'b5\'c4\u21464 \'b1\'e4\u21270 \'bb\'af\u22411 \'d0\'cd\u65292 \'a3\'acegrep\u21450 \'bc\'b0fgrep\u12290 \'a1\'a3\u20854 \'c6\'e4\u20013 \'d6\'d0egrep\u23601 \'be\'cd\u31561 \'b5\'c8\u21516 \'cd\'ac\u20110 \'d3\'dagrep -E \u65292 \'a3\'acfgrep\u31561 \'b5\'c8\u21516 \'cd\'ac\u20110 \'d3\'dagrep -F\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf2 -----------------------------------------------------------------------------------------------------------------
\par \pard\fi420\li0\ql\ri0\sb0\sa0\itap0 \plain \f1\fs20 NAME
\par \plain \f1\fs20\cf1        grep, egrep, fgrep - print lines matching a pattern
\par \plain \f1\fs20 
\par SYNOPSIS
\par \plain \f1\fs20\cf1        grep [OPTIONS] PATTERN [FILE...]
\par        grep [OPTIONS] [-e PATTERN | -f FILE] [FILE...]
\par \plain \f1\fs20 
\par DESCRIPTION
\par        grep searches the named input FILEs (or standard input if no files are named, or if a single hyphen-minus (-) is given as
\par        file name) for lines containing a match to the given PATTERN.  By default, grep prints the matching lines.
\par 
\par        In addition, two variant programs egrep and fgrep are available.  egrep is the same as grep -E.  fgrep  is  the  same  as
\par        grep -F.  Direct invocation as either egrep or fgrep is deprecated, but is provided to allow historical applications that
\par        rely on them to run unmodified.
\par 
\par OPTIONS
\par \plain \f1\b\fs20\cf1    Generic Program Information
\par \plain \f1\fs20        --help Print a usage message briefly summarizing these command-line options and the bug-reporting address, then exit.
\par 
\par        -V, --version
\par               Print the version number of grep to the standard output stream.  This version number should be included in all bug
\par               reports (see below).
\par 
\par \plain \f1\b\fs20 REGULAR EXPRESSIONS
\par \plain \f1\fs20        A  regular  expression  is a pattern that describes a set of strings.  Regular expressions are constructed analogously to
\par        arithmetic expressions, by using various operators to combine smaller expressions.
\par 
\par        grep understands two different versions of regular expression syntax: "basic" and "extended."  In GNU grep, there  is  no
\par        difference  in available functionality using either syntax.  In other implementations, basic regular expressions are less
\par        powerful.  The following description applies to extended regular expressions; differences for basic  regular  expressions
\par        are summarized afterwards.
\par 
\par        The  fundamental  building  blocks are the regular expressions that match a single character.  Most characters, including
\par        all letters and digits, are regular expressions that match themselves.  Any meta-character with special  meaning  may  be
\par        quoted by preceding it with a backslash.
\par 
\par        The period . matches any single character.
\par \plain \f1\b\fs20 
\par    Character Classes and Bracket Expressions
\par \plain \f1\fs20        A  bracket  expression is a list of characters enclosed by [ and ].  It matches any single character in that list; if the
\par        first character of the list is the caret ^ then it matches any character not in  the  list.   For  example,  the  regular
\par        expression [0123456789] matches any single digit.
\par 
\par        Within  a bracket expression, a range expression consists of two characters separated by a hyphen.  It matches any single
\par        character that sorts between the two characters, inclusive, using the locale's collating sequence and character set.  For
\par        example,  in  the default C locale, [a-d] is equivalent to [abcd].  Many locales sort characters in dictionary order, and
\par        in these locales [a-d] is typically not equivalent to [abcd]; it might be  equivalent  to  [aBbCcDd],  for  example.   To
\par        obtain  the traditional interpretation of bracket expressions, you can use the C locale by setting the LC_ALL environment
\par        variable to the value C.
\par 
\par        Finally, certain named classes of characters are predefined within bracket expressions, as follows.  Their names are self
\par        explanatory,  and  they  are  [:alnum:],  [:alpha:],  [:cntrl:],  [:digit:],  [:graph:], [:lower:], [:print:], [:punct:],
\par        [:space:], [:upper:], and [:xdigit:].  For example, [[:alnum:]] means [0-9A-Za-z], except the latter  form  depends  upon
\par        the C locale and the ASCII character encoding, whereas the former is independent of locale and character set.  (Note that
\par        the brackets in these class names are part of the symbolic names, and must  be  included  in  addition  to  the  brackets
\par        delimiting  the  bracket  expression.)   Most  meta-characters lose their special meaning inside bracket expressions.  To
\par        include a literal ] place it first in the list.  Similarly, to include a literal ^ place it anywhere but first.  Finally,
\par        to include a literal - place it last.
\par \plain \f1\b\fs20 
\par    Anchoring
\par \plain \f1\fs20        The  caret  ^ and the dollar sign $ are meta-characters that respectively match the empty string at the beginning and end
\par        of a line.
\par 
\par \plain \f1\b\fs20    The Backslash Character and Special Expressions
\par \plain \f1\fs20        The symbols \\< and \\> respectively match the empty string at the beginning and end of a word.  The symbol \\b matches  the
\par        empty  string at the edge of a word, and \\B matches the empty string provided it's not at the edge of a word.  The symbol
\par        \\w is a synonym for [[:alnum:]] and \\W is a synonym for [^[:alnum:]].
\par 
\par \plain \f1\b\fs20    Repetition
\par \plain \f1\fs20        A regular expression may be followed by one of several repetition operators:
\par        ?      The preceding item is optional and matched at most once.
\par        *      The preceding item will be matched zero or more times.
\par        +      The preceding item will be matched one or more times.
\par        \{n\}    The preceding item is matched exactly n times.
\par        \{n,\}   The preceding item is matched n or more times.
\par        \{,m\}   The preceding item is matched at most m times.
\par        \{n,m\}  The preceding item is matched at least n times, but not more than m times.
\par 
\par \plain \f1\b\fs20    Concatenation(\plain \f1\fs20 n. \uc2\u20018 \'b4\'ae\u32852 \'c1\'aa\u65292 \'a3\'ac\u36830 \'c1\'ac\u32467 \'bd\'e1\uc1\plain \f1\b\fs20 )
\par \plain \f1\fs20        Two regular expressions may be concatenated; the resulting regular expression matches any string formed by  concatenating
\par        two substrings that respectively match the concatenated expressions.
\par 
\par \plain \f1\b\fs20    Alternation
\par \plain \f1\fs20        Two  regular  expressions  may  be  joined  by  the infix operator |; the resulting regular expression matches any string
\par        matching either alternate expression.
\par 
\par \plain \f1\b\fs20    Precedence
\par \plain \f1\fs20        Repetition takes precedence over concatenation, which in turn takes precedence over alternation.  A whole expression  may
\par        be enclosed in parentheses to override these precedence rules and form a subexpression.
\par 
\par \plain \f1\b\fs20    Back References and Subexpressions
\par \plain \f1\fs20        The  back-reference  \\n,  where  n  is  a single digit, matches the substring previously matched by the nth parenthesized
\par        subexpression of the regular expression.
\par 
\par \plain \f1\b\fs20    Basic vs Extended Regular Expressions
\par \plain \f1\fs20        In basic regular expressions the meta-characters ?, +, \{, |, (, and  )  lose  their  special  meaning;  instead  use  the
\par        backslashed versions \\?, \\+, \\\{, \\|, \\(, and \\).
\par 
\par        Traditional  egrep  did  not support the \{ meta-character, and some egrep implementations support \\\{ instead, so portable
\par        scripts should avoid \{ in grep -E patterns and should use [\{] to match a literal \{.
\par 
\par        GNU grep -E attempts to support traditional usage by assuming that \{ is not special if  it  would  be  the  start  of  an
\par        invalid  interval  specification.  For example, the command grep -E '\{1' searches for the two-character string \{1 instead
\par        of reporting a syntax error in the regular expression.  POSIX.2 allows  this  behavior  as  an  extension,  but  portable
\par        scripts should avoid it.
\par 
\par \plain \f1\b\fs20 ENVIRONMENT VARIABLES
\par \plain \f1\fs20        The behavior of grep is affected by the following environment variables.
\par 
\par        The  locale  for  category LC_foo is specified by examining the three environment variables LC_ALL, LC_foo, LANG, in that
\par        order.  The first of these variables that is set  specifies  the  locale.   For  example,  if  LC_ALL  is  not  set,  but
\par        LC_MESSAGES  is set to pt_BR, then the Brazilian Portuguese locale is used for the LC_MESSAGES category.  The C locale is
\par        used if none of these environment variables are set, if the locale catalog is not installed, or if grep was not  compiled
\par        with national language support (NLS).
\par 
\par        GREP_OPTIONS
\par               This  variable  specifies  default  options  to  be  placed  in  front  of  any explicit options.  For example, if
\par               GREP_OPTIONS  is  '--binary-files=without-match  --directories=skip',  grep  behaves  as  if   the   two   options
\par               --binary-files=without-match  and  --directories=skip  had  been  specified  before  any explicit options.  Option
\par               specifications are separated by whitespace.  A backslash escapes the next character, so it can be used to  specify
\par               an option containing whitespace or a backslash.
\par 
\par        GREP_COLOR
\par               This  variable  specifies  the  color  used  to  highlight matched (non-empty) text.  It is deprecated in favor of
\par               GREP_COLORS, but still supported.  The mt, ms, and mc capabilities of GREP_COLORS have priority over it.   It  can
\par               only  specify  the  color used to highlight the matching non-empty text in any matching line (a selected line when
\par               the -v command-line option is omitted, or a context line when -v is specified).  The default is 01;31, which means
\par               a bold red foreground text on the terminal's default background.
\par 
\par        GREP_COLORS
\par               Specifies  the  colors  and other attributes used to highlight various parts of the output.  Its value is a colon-
\par               separated list of capabilities that defaults to ms=01;31:mc=01;31:sl=:cx=:fn=35:ln=32:bn=32:se=36 with the rv  and
\par               ne boolean capabilities omitted (i.e., false).  Supported capabilities are as follows.
\par 
\par               sl=    SGR substring for whole selected lines (i.e., matching lines when the -v command-line option is omitted, or
\par                      non-matching lines when -v is specified).  If however the boolean rv capability  and  the  -v  command-line
\par                      option  are  both specified, it applies to context matching lines instead.  The default is empty (i.e., the
\par                      terminal's default color pair).
\par 
\par               cx=    SGR substring for whole context lines (i.e., non-matching lines when the -v command-line option is omitted,
\par                      or  matching  lines  when  -v  is specified).  If however the boolean rv capability and the -v command-line
\par                      option are both specified, it applies to selected non-matching lines instead.  The default is empty  (i.e.,
\par                      the terminal's default color pair).
\par 
\par               rv     Boolean  value  that reverses (swaps) the meanings of the sl= and cx= capabilities when the -v command-line
\par                      option is specified.  The default is false (i.e., the capability is omitted).
\par 
\par               mt=01;31
\par                      SGR substring for matching non-empty text in any matching line (i.e., a selected line when the -v  command-
\par                      line  option  is  omitted,  or a context line when -v is specified).  Setting this is equivalent to setting
\par                      both ms= and mc= at once to the same value.  The default is a bold red text  foreground  over  the  current
\par                      line background.
\par 
\par               ms=01;31
\par                      SGR  substring for matching non-empty text in a selected line.  (This is only used when the -v command-line
\par                      option is omitted.)  The effect of the sl= (or cx= if rv) capability remains active  when  this  kicks  in.
\par                      The default is a bold red text foreground over the current line background.
\par 
\par               mc=01;31
\par                      SGR  substring  for matching non-empty text in a context line.  (This is only used when the -v command-line
\par                      option is specified.)  The effect of the cx= (or sl= if rv) capability remains active when this  kicks  in.
\par                      The default is a bold red text foreground over the current line background.
\par 
\par               fn=35  SGR substring for file names prefixing any content line.  The default is a magenta text foreground over the
\par                      terminal's default background.
\par 
\par               ln=32  SGR substring for line numbers prefixing any content line.  The default is a green text foreground over the
\par                      terminal's default background.
\par 
\par               bn=32  SGR substring for byte offsets prefixing any content line.  The default is a green text foreground over the
\par                      terminal's default background.
\par 
\par               se=36  SGR substring for separators that are inserted between selected  line  fields  (:),  between  context  line
\par                      fields, (-), and between groups of adjacent lines when nonzero context is specified (--).  The default is a
\par                      cyan text foreground over the terminal's default background.
\par 
\par               ne     Boolean value that prevents clearing to the end of line using Erase in Line (EL) to Right (\\33[K) each time
\par                      a  colorized  item ends.  This is needed on terminals on which EL is not supported.  It is otherwise useful
\par                      on terminals for which the back_color_erase (bce) boolean terminfo capability  does  not  apply,  when  the
\par                      chosen  highlight  colors  do not affect the background, or when EL is too slow or causes too much flicker.
\par                      The default is false (i.e., the capability is omitted).
\par 
\par               Note that boolean capabilities have no =...  part.  They are omitted (i.e., false) by default and become true when
\par               specified.
\par 
\par               See  the  Select  Graphic  Rendition  (SGR)  section  in  the  documentation of the text terminal that is used for
\par               permitted values and their meaning as character attributes.   These  substring  values  are  integers  in  decimal
\par               representation  and can be concatenated with semicolons.  grep takes care of assembling the result into a complete
\par               SGR sequence (\\33[...m).  Common values to concatenate include 1 for bold, 4 for underline, 5  for  blink,  7  for
\par               inverse,  39  for  default foreground color, 30 to 37 for foreground colors, 90 to 97 for 16-color mode foreground
\par               colors, 38;5;0 to 38;5;255 for 88-color and 256-color modes foreground colors, 49 for default background color, 40
\par               to  47  for background colors, 100 to 107 for 16-color mode background colors, and 48;5;0 to 48;5;255 for 88-color
\par               and 256-color modes background colors.
\par 
\par        LC_ALL, LC_COLLATE, LANG
\par               These variables specify the locale for the LC_COLLATE category, which determines the collating  sequence  used  to
\par               interpret range expressions like [a-z].
\par 
\par        LC_ALL, LC_CTYPE, LANG
\par               These variables specify the locale for the LC_CTYPE category, which determines the type of characters, e.g., which
\par               characters are whitespace.
\par 
\par        LC_ALL, LC_MESSAGES, LANG
\par               These variables specify the locale for the LC_MESSAGES category, which determines the language that grep uses  for
\par               messages.  The default C locale uses American English messages.
\par 
\par        POSIXLY_CORRECT
\par               If  set, grep behaves as POSIX.2 requires; otherwise, grep behaves more like other GNU programs.  POSIX.2 requires
\par               that options that follow file names must be treated as file names; by default, such options are  permuted  to  the
\par               front  of  the  operand  list  and  are  treated  as options.  Also, POSIX.2 requires that unrecognized options be
\par               diagnosed as "illegal", but since they are not really  against  the  law  the  default  is  to  diagnose  them  as
\par               "invalid".  POSIXLY_CORRECT also disables _N_GNU_nonoption_argv_flags_, described below.
\par 
\par        _N_GNU_nonoption_argv_flags_
\par               (Here  N  is  grep's  numeric process ID.)  If the ith character of this environment variable's value is 1, do not
\par               consider the ith operand of grep to be an option, even if it appears to be one.  A shell can put this variable  in
\par               the  environment  for  each  command  it  runs,  specifying  which  operands are the results of file name wildcard
\par               expansion and therefore should not be treated as options.  This behavior is available only with the GNU C library,
\par               and only when POSIXLY_CORRECT is not set.
\par 
\par \plain \f1\b\fs20 EXIT STATUS
\par \plain \f1\fs20        \plain \f1\fs20\cf3 Normally,  the  exit  status  is  0  if  selected  lines are found and 1 otherwise.\plain \f1\fs20   But \plain \f1\fs20\cf3 the exit status is 2 if an error
\par        occurred\plain \f1\fs20 , \plain \f1\fs20\cf3 unless the -q or --quiet or --silent option is used and a selected line is found\plain \f1\fs20 .  Note,  however,  that  POSIX
\par        only  mandates,  for programs such as grep, cmp, and diff, that the exit status in case of error be greater than 1; it is
\par        therefore advisable, \plain \f1\fs20\cf3 for the sake of portability, to use logic that tests for this general condition  instead  of  strict
\par        equality with 2.
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 \plain \f1\fs20\cf2 -----------------------------------------------------------------------------------------------------------------------------------------\par}