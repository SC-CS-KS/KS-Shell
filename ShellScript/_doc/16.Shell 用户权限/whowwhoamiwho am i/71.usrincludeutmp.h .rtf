{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red255\green0\blue0;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1196262204\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1645954611}
}
{\*\listoverridetable
{\listoverride\listid1645954611\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 71./usr/include/utmp.h 
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 /* Copyright (C) 1993, 1996, 1997, 1998, 1999 Free Software Foundation, Inc.
\par    This file is part of the GNU C Library.
\par 
\par    The GNU C Library is free software; you can redistribute it and/or
\par    modify it under the terms of the GNU Lesser General Public
\par    License as published by the Free Software Foundation; either
\par    version 2.1 of the License, or (at your option) any later version.
\par 
\par    The GNU C Library is distributed in the hope that it will be useful,
\par    but WITHOUT ANY WARRANTY; without even the implied warranty of
\par    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
\par    Lesser General Public License for more details.
\par 
\par    You should have received a copy of the GNU Lesser General Public
\par    License along with the GNU C Library; if not, write to the Free
\par    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
\par    02111-1307 USA.  */
\par \plain \f1\fs20\cf1 
\par #ifndef _UTMP_H
\par #define _UTMP_H 1
\par 
\par #include <features.h>
\par 
\par #include <sys/types.h>
\par \plain \f1\fs20 
\par 
\par __BEGIN_DECLS
\par 
\par \plain \f1\fs20\cf2 /* Get system dependent values and data structures.  */
\par \plain \f1\fs20\cf1 #include <bits/utmp.h>
\par \plain \f1\fs20 
\par /* Compatibility names for the strings of the \plain \f1\fs20\cf1 canonical file(\uc2\u35268 \'b9\'e6\u33539 \'b7\'b6\u25991 \'ce\'c4\u20214 \'bc\'fe) \uc1\plain \f1\fs20 names.  */
\par \plain \f1\fs20\cf1 #define UTMP_FILE       _PATH_UTMP
\par \plain \f1\fs20 #define UTMP_FILENAME   _PATH_UTMP
\par #define WTMP_FILE       _PATH_WTMP
\par #define WTMP_FILENAME   _PATH_WTMP
\par 
\par 
\par 
\par /* Make FD be the controlling terminal, stdin, stdout, and stderr;
\par    then close FD.  Returns 0 on success, nonzero on error.  */
\par extern int login_tty (int __fd) __THROW;
\par 
\par 
\par /* Write the given entry into utmp and wtmp.  */
\par extern void login (__const struct utmp *__entry) __THROW;
\par 
\par /* Write the utmp entry to say the user on UT_LINE has logged out.  */
\par extern int logout (__const char *__ut_line) __THROW;
\par 
\par /* Append to wtmp an entry for the current time and the given info.  */
\par extern void logwtmp (__const char *__ut_line, __const char *__ut_name,
\par                      __const char *__ut_host) __THROW;
\par 
\par /* Append entry UTMP to the wtmp-like file WTMP_FILE.  */
\par extern void updwtmp (__const char *__wtmp_file, __const struct utmp *__utmp)
\par      __THROW;
\par 
\par /* Change name of the utmp file to be examined.  */
\par extern int utmpname (__const char *__file) __THROW;
\par 
\par /* Read next entry from a utmp-like file.  */
\par extern struct utmp *getutent (void) __THROW;
\par 
\par /* Reset the input stream to the beginning of the file.  */
\par extern void setutent (void) __THROW;
\par 
\par /* Close the current open file.  */
\par extern void endutent (void) __THROW;
\par 
\par /* Search forward from the current point in the utmp file until the
\par    next entry with a ut_type matching ID->ut_type.  */
\par extern struct utmp *getutid (__const struct utmp *__id) __THROW;
\par 
\par /* Search forward from the current point in the utmp file until the
\par    next entry with a ut_line matching LINE->ut_line.  */
\par extern struct utmp *getutline (__const struct utmp *__line) __THROW;
\par 
\par /* Write out entry pointed to by UTMP_PTR into the utmp file.  */
\par extern struct utmp *pututline (__const struct utmp *__utmp_ptr) __THROW;
\par 
\par 
\par #ifdef  __USE_MISC
\par /* Reentrant versions of the file for handling utmp files.  */
\par extern int getutent_r (struct utmp *__buffer, struct utmp **__result) __THROW;
\par 
\par extern int getutid_r (__const struct utmp *__id, struct utmp *__buffer,
\par                       struct utmp **__result) __THROW;
\par 
\par extern int getutline_r (__const struct utmp *__line,
\par                         struct utmp *__buffer, struct utmp **__result) __THROW;
\par 
\par #endif  /* Use misc.  */
\par 
\par __END_DECLS
\par 
\par #endif /* utmp.h  */\par}