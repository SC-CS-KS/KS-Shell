{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}{\f4\fnil\fcharset2 Symbol;}{\f5\fnil\fcharset0 Courier New;}}{\colortbl;\red0\green0\blue255;\red255\green0\blue0;\red0\green0\blue0;\red235\green245\blue245;}{\*\listtable{\list\listtemplateid1266444574\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid1620707738}
{\list\listtemplateid2027052553\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f4\fs24\lang1024}
\listid350813746}
{\list\listtemplateid288555260\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f4\fs24\lang1024}
\listid308902129}
{\list\listtemplateid301458103
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f4\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
\listid8277400}
{\list\listtemplateid1396581882
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f4\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
\listid866396647}
{\list\listtemplateid856436613
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f4\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
\listid1944978845}
}
{\*\listoverridetable
{\listoverride\listid1620707738\listoverridecount0\ls1}
{\listoverride\listid350813746\listoverridecount0\ls2}
{\listoverride\listid308902129\listoverridecount0\ls3}
{\listoverride\listid8277400\listoverridecount0\ls4}
{\listoverride\listid866396647\listoverridecount0\ls5}
{\listoverride\listid1944978845\listoverridecount0\ls6}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf3 01.ps
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 NAME
\par \plain \f1\fs20\cf1 ps - report a snapshot of the current processes.
\par 
\par \plain \f1\fs20 SYNOPSIS
\par ps [options]
\par 
\par DESCRIPTION
\par ps displays information about a selection of the active processes. If you want a repetitive update of the selection and the
\par displayed information, use top(1) instead.
\par 
\par This version of ps accepts several kinds of options:
\par 1   UNIX options, which may be grouped and must be preceded by a dash.
\par 2   BSD options, which may be grouped and must not be used with a dash.
\par 3   GNU long options, which are preceded by two dashes.
\par 
\par Options of different types may be freely mixed, but conflicts can appear. There are some synonymous options, which are
\par functionally identical, due to the many standards and ps implementations that this ps is compatible with.
\par 
\par Note that "ps -aux" is distinct from "ps aux". The POSIX and UNIX standards require that "ps -aux" print all processes owned by
\par a user named "x", as well as printing all processes that would be selected by the -a option. If the user named "x" does not
\par exist, this ps may interpret the command as "ps aux" instead and print a warning. This behavior is intended to aid in
\par transitioning old scripts and habits. It is fragile, subject to change, and thus should not be relied upon.
\par 
\par By default, ps selects all processes with the same effective user ID (euid=EUID) as the current user and associated with the
\par same terminal as the invoker. It displays the process ID (pid=PID), the terminal associated with the process (tname=TTY), the
\par cumulated CPU time in [dd-]hh:mm:ss format (time=TIME), and the executable name (ucmd=CMD). Output is unsorted by default.
\par 
\par The use of BSD-style options will add process state (stat=STAT) to the default display and show the command args (args=COMMAND)
\par instead of the executable name. You can override this with the PS_FORMAT environment variable. The use of BSD-style options will
\par also change the process selection to include processes on other terminals (TTYs) that are owned by you; alternately, this may be
\par described as setting the selection to be the set of all processes filtered to exclude processes owned by other users or not on a
\par terminal. These effects are not considered when options are described as being "identical" below, so -M will be considered
\par identical to Z and so on.
\par 
\par Except as described below, process selection options are additive. The default selection is discarded, and then the selected
\par processes are added to the set of processes to be displayed. A process will thus be shown if it meets any of the given selection
\par criteria.
\par 
\par \plain \f1\b\fs20 EXAMPLES
\par \plain \f1\fs20\cf1 To see every process on the system using standard syntax:
\par \plain \f1\fs20    ps -e
\par    ps -ef
\par    ps -eF
\par    ps -ely
\par 
\par To see every process on the system \plain \f1\fs20\cf1 using BSD syntax:
\par \plain \f1\fs20    ps ax
\par    ps axu
\par 
\par \plain \f1\fs20\cf1 To print a process tree:
\par \plain \f1\fs20    ps -ejH
\par    ps axjf
\par 
\par \plain \f1\fs20\cf1 To get info about threads:
\par \plain \f1\fs20    ps -eLf
\par    ps axms
\par 
\par \plain \f1\fs20\cf1 To get security info:
\par \plain \f1\fs20    ps -eo euser,ruser,suser,fuser,f,comm,label
\par    ps axZ
\par    ps -eM
\par 
\par \plain \f1\fs20\cf1 To see every process running as root (real & effective ID) in user format:
\par \plain \f1\fs20    ps -U root -u root u
\par 
\par \plain \f1\fs20\cf1 To see every process with a user-defined format:
\par \plain \f1\fs20    ps -eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,wchan:14,comm
\par    ps axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm
\par    ps -eopid,tt,user,fname,tmout,f,wchan
\par 
\par \plain \f1\fs20\cf1 Print only the process IDs of syslogd:
\par \plain \f1\fs20    ps -C syslogd -o pid=
\par 
\par \plain \f1\fs20\cf1 Print only the name of PID 42:
\par \plain \f1\fs20    ps -p 42 -o comm=
\par 
\par \plain \f1\b\fs20 SIMPLE PROCESS SELECTION
\par \plain \f1\fs20 -A              Select all processes. Identical to -e.
\par 
\par -N              Select all processes except those that fulfill the specified conditions. (negates the selection) Identical to
\par                 --deselect.
\par 
\par T               Select all processes associated with this terminal. Identical to the t option without any argument.
\par 
\par -a              Select all processes except session leaders (see getsid(2)) and processes not associated with a terminal.
\par 
\par a               Lift the BSD-style "only yourself" restriction, which is imposed upon the set of all processes when some
\par                 BSD-style (without "-") options are used or when the ps personality setting is BSD-like. The set of processes
\par                 selected in this manner is in addition to the set of processes selected by other means. An alternate description
\par                 is that this option causes ps to list all processes with a terminal (tty), or to list all processes when used
\par                 together with the x option.
\par 
\par -d              Select all processes except session leaders.
\par 
\par -e              Select all processes. Identical to -A.
\par 
\par g               Really all, even session leaders. This flag is obsolete and may be discontinued in a future release. It is
\par                 normally implied by the a flag, and is only useful when operating in the sunos4 personality.
\par 
\par r               Restrict the selection to only running processes.
\par 
\par x               Lift the BSD-style "must have a tty" restriction, which is imposed upon the set of all processes when some
\par                 BSD-style (without "-") options are used or when the ps personality setting is BSD-like. The set of processes
\par                 selected in this manner is in addition to the set of processes selected by other means. An alternate description
\par                 is that this option causes ps to list all processes owned by you (same EUID as ps), or to list all processes
\par                 when used together with the a option.
\par 
\par --deselect      Select all processes except those that fulfill the specified conditions. (negates the selection) Identical to
\par                 -N.
\par 
\par PROCESS SELECTION BY LIST
\par These options accept a single argument in the form of a blank-separated or comma-separated list. They can be used multiple
\par times. For example: ps -p "1 2" -p 3,4
\par 
\par \plain \f1\b\fs20\cf2 -C cmdlist\plain \f1\fs20\cf2       Select by command name.
\par                 This selects the processes whose executable name is given in cmdlist.
\par \plain \f1\fs20 
\par -G grplist      Select by real group ID (RGID) or name.
\par                 This selects the processes whose real group name or ID is in the grplist list. The real group ID identifies the
\par                 group of the user who created the process, see getgid(2).
\par 
\par U userlist      Select by effective user ID (EUID) or name.
\par                 This selects the processes whose effective user name or ID is in userlist. The effective user ID describes the
\par                 user whose file access permissions are used by the process (see geteuid(2)). Identical to -u and --user.
\par 
\par -U userlist     select by real user ID (RUID) or name.
\par                 It selects the processes whose real user name or ID is in the userlist list. The real user ID identifies the
\par                 user who created the process, see getuid(2).
\par 
\par -g grplist      Select by session OR by effective group name.
\par                 Selection by session is specified by many standards, but selection by effective group is the logical behavior
\par                 that several other operating systems use. This ps will select by session when the list is completely numeric
\par                 (as sessions are). Group ID numbers will work only when some group names are also specified. See the -s and
\par                 --group options.
\par 
\par \plain \f1\fs20\cf1 p pidlist       Select by process ID. Identical to -p and --pid.
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1 -p pidlist      Select by PID.
\par \plain \f1\fs20                 This selects the processes whose process ID numbers appear in pidlist. Identical to p and --pid.
\par 
\par -s sesslist     Select by session ID.
\par                 This selects the processes with a session ID specified in sesslist.
\par 
\par t ttylist       Select by tty. Nearly identical to -t and --tty, but can also be used with an empty ttylist to indicate the
\par                 terminal associated with ps. Using the T option is considered cleaner than using T with an empty ttylist.
\par 
\par -t ttylist      Select by tty.
\par                 This selects the processes associated with the terminals given in ttylist. Terminals (ttys, or screens for text
\par                 output) can be specified in several forms: /dev/ttyS1, ttyS1, S1. A plain "-" may be used to select processes
\par                 not attached to any terminal.
\par 
\par -u userlist     Select by effective user ID (EUID) or name.
\par                 This selects the processes whose effective user name or ID is in userlist. The effective user ID describes the
\par                 user whose file access permissions are used by the process (see geteuid(2)). Identical to U and --user.
\par 
\par --Group grplist Select by real group ID (RGID) or name. Identical to -G.
\par 
\par --User userlist Select by real user ID (RUID) or name. Identical to -U.
\par 
\par --group grplist Select by effective group ID (EGID) or name.
\par                 This selects the processes whose effective group name or ID is in grouplist. The effective group ID describes
\par                 the group whose file access permissions are used by the process (see geteuid(2)). The -g option is often an
\par                 alternative to --group.
\par 
\par --pid pidlist   Select by process ID. Identical to -p and p.
\par 
\par --ppid pidlist  Select by parent process ID. This selects the processes with a parent process ID in pidlist. That is, it selects
\par                 processes that are children of those listed in pidlist.
\par 
\par --sid sesslist  Select by session ID. Identical to -s.
\par 
\par --tty ttylist   Select by terminal. Identical to -t and t.
\par 
\par --user userlist Select by effective user ID (EUID) or name. Identical to -u and U.
\par 
\par -123            Identical to --sid 123.
\par 
\par 123             Identical to --pid 123.
\par 
\par \plain \f1\b\fs20 OUTPUT FORMAT CONTROL
\par \plain \f1\fs20 These options are used to choose the information displayed by ps. The output may differ by personality.
\par -F              extra full format. See the -f option, which -F implies.
\par 
\par -O format       is like -o, but preloaded with some default columns. Identical to -o pid,format,state,tname,time,command or
\par                 -o pid,format,tname,time,cmd, see -o below.
\par 
\par O format        is preloaded o (overloaded).
\par                 The BSD O option can act like -O (user-defined output format with some common fields predefined) or can be used
\par                 to specify sort order. Heuristics are used to determine the behavior of this option. To ensure that the desired
\par                 behavior is obtained (sorting or formatting), specify the option in some other way (e.g. with -O or --sort).
\par                 When used as a formatting option, it is identical to -O, with the BSD personality.
\par 
\par -M              Add a column of security data. Identical to Z. (for SE Linux)
\par 
\par X               Register format.
\par 
\par Z               Add a column of security data. Identical to -M. (for SE Linux)
\par 
\par -c              Show different scheduler information for the -l option.
\par 
\par -f              does full-format listing. This option can be combined with many other UNIX-style options to add additional
\par                 columns. It also causes the command arguments to be printed. When used with -L, the NLWP (number of threads) and
\par                 LWP (thread ID) columns will be added. See the c option, the format keyword args, and the format keyword comm.
\par 
\par j               BSD job control format.
\par 
\par -j              jobs format
\par 
\par l               display BSD long format.
\par 
\par -l              long format. The -y option is often useful with this.
\par 
\par \plain \f1\fs20\cf1 o format        specify user-defined format. Identical to -o and --format.
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1 -o format       user-defined format.
\par \plain \f1\fs20                 format is a single argument in the form of a blank-separated or comma-separated list, which offers a way to
\par                 specify individual output columns. The recognized keywords are described in the STANDARD FORMAT SPECIFIERS
\par                 section below. Headers may be renamed (ps -o pid,ruser=RealUser -o comm=Command) as desired. If all column
\par                 headers are empty (ps -o pid= -o comm=) then the header line will not be output. Column width will increase as
\par                 needed for wide headers; this may be used to widen up columns such as WCHAN
\par                 (ps -o pid,wchan=WIDE-WCHAN-COLUMN -o comm). Explicit width control (ps opid,wchan:42,cmd) is offered too. The
\par                 behavior of ps -o pid=X,comm=Y varies with personality; output may be one column named "X,comm=Y" or two columns
\par                 named "X" and "Y". Use multiple -o options when in doubt. Use the PS_FORMAT environment variable to specify a
\par                 default as desired; DefSysV and DefBSD are macros that may be used to choose the default UNIX or BSD columns.
\par 
\par s               display signal format
\par 
\par u               display user-oriented format
\par 
\par v               display virtual memory format
\par 
\par -y              Do not show flags; show rss in place of addr. This option can only be used with -l.
\par 
\par -Z              display security context format (SELinux, etc.)
\par 
\par --format format user-defined format. Identical to -o and o.
\par 
\par --context       Display security context format. (for SE Linux)
\par 
\par \plain \f1\b\fs20 OUTPUT MODIFIERS
\par \plain \f1\fs20 -H              show process hierarchy (forest)
\par 
\par N namelist      Specify namelist file. Identical to -n, see -n above.
\par 
\par O order         Sorting order. (overloaded)
\par                 The BSD O option can act like -O (user-defined output format with some common fields predefined) or can be used
\par                 to specify sort order. Heuristics are used to determine the behavior of this option. To ensure that the desired
\par                 behavior is obtained (sorting or formatting), specify the option in some other way (e.g. with -O or --sort).
\par 
\par                 For sorting, obsolete BSD O option syntax is O[+|-]k1[,[+|-]k2[,...]]. It orders the processes listing according
\par                 to the multilevel sort specified by the sequence of one-letter short keys k1, k2, ... described in the OBSOLETE
\par                 SORT KEYS section below. The "+" is currently optional, merely re-iterating the default direction on a key, but
\par                 may help to distinguish an O sort from an O format. The "-" reverses direction only on the key it precedes.
\par 
\par S               Sum up some information, such as CPU usage, from dead child processes into their parent. This is useful for
\par                 examining a system where a parent process repeatedly forks off short-lived children to do work.
\par 
\par c               Show the true command name. This is derived from the name of the executable file, rather than from the argv
\par                 value. Command arguments and any modifications to them (see setproctitle(3)) are thus not shown. This option
\par                 effectively turns the args format keyword into the comm format keyword; it is useful with the -f format option
\par                 and with the various BSD-style format options, which all normally display the command arguments. See the -f
\par                 option, the format keyword args, and the format keyword comm.
\par 
\par e               Show the environment after the command.
\par 
\par f               ASCII-art process hierarchy (forest)
\par 
\par h               No header. (or, one header per screen in the BSD personality)
\par                 The h option is problematic. Standard BSD ps uses this option to print a header on each page of output, but
\par                 older Linux ps uses this option to totally disable the header. This version of ps follows the Linux usage of not
\par                 printing the header unless the BSD personality has been selected, in which case it prints a header on each page
\par                 of output. Regardless of the current personality, you can use the long options --headers and --no-headers to
\par                 enable printing headers each page or disable headers entirely, respectively.
\par 
\par k spec          specify sorting order. Sorting syntax is [+|-]key[,[+|-]key[,...]] Choose a multi-letter key from the STANDARD
\par                 FORMAT SPECIFIERS section. The "+" is optional since default direction is increasing numerical or lexicographic
\par                 order. Identical to --sort. Examples:
\par                 ps jaxkuid,-ppid,+pid
\par                 ps axk comm o comm,args
\par                 ps kstart_time -ef
\par 
\par -n namelist     set namelist file. Identical to N.
\par                 The namelist file is needed for a proper WCHAN display, and must match the current Linux kernel exactly for
\par                 correct output. Without this option, the default search path for the namelist is:
\par 
\par                      $PS_SYSMAP
\par                      $PS_SYSTEM_MAP
\par                      /proc/*/wchan
\par                      /boot/System.map-`uname -r`
\par                      /boot/System.map
\par                      /lib/modules/`uname -r`/System.map
\par                      /usr/src/linux/System.map
\par                      /System.map
\par 
\par n               Numeric output for WCHAN and USER. (including all types of UID and GID)
\par 
\par 
\par -w              Wide output. Use this option twice for unlimited width.
\par 
\par w               Wide output. Use this option twice for unlimited width.
\par 
\par 
\par --cols n        set screen width
\par 
\par 
\par --columns n     set screen width
\par 
\par 
\par --cumulative    include some dead child process data (as a sum with the parent)
\par 
\par 
\par --forest        ASCII art process tree
\par 
\par 
\par --headers       repeat header lines, one per page of output
\par 
\par 
\par --no-headers    print no header line at all
\par 
\par 
\par --lines n       set screen height
\par 
\par 
\par --rows n        set screen height
\par 
\par 
\par --sort spec     specify sorting order. Sorting syntax is [+|-]key[,[+|-]key[,...]] Choose a multi-letter key from the STANDARD
\par                 FORMAT SPECIFIERS section. The "+" is optional since default direction is increasing numerical or lexicographic
\par                 order. Identical to k. For example: ps jax --sort=uid,-ppid,+pid
\par 
\par --width n       set screen width
\par 
\par \plain \f1\b\fs20 THREAD DISPLAY
\par \plain \f1\fs20\cf1 H               Show threads as if they were processes
\par \plain \f1\fs20 
\par \plain \f1\fs20\cf1 -L              Show threads, possibly with LWP and NLWP columns
\par \plain \f1\fs20 
\par -T              Show threads, possibly with SPID column
\par 
\par m               Show threads after processes
\par 
\par -m              Show threads after processes
\par 
\par \plain \f1\b\fs20 OTHER INFORMATION
\par \plain \f1\fs20\cf1 L               List all format specifiers.
\par \plain \f1\fs20 
\par -V              Print the procps version.
\par 
\par V               Print the procps version.
\par 
\par --help          Print a help message.
\par 
\par --info          Print debugging info.
\par 
\par --version       Print the procps version.
\par 
\par NOTES
\par This ps works by reading the virtual files in /proc. This ps does not need to be setuid kmem or have any privileges to run. Do
\par not give this ps any special permissions.
\par 
\par This ps needs access to namelist data for proper WCHAN display. For kernels prior to 2.6, the System.map file must be installed.
\par 
\par CPU usage is currently expressed as the percentage of time spent running during the entire lifetime of a process. This is not
\par ideal, and it does not conform to the standards that ps otherwise conforms to. CPU usage is unlikely to add up to exactly 100%.
\par 
\par The SIZE and RSS fields don't count some parts of a process including the page tables, kernel stack, struct thread_info, and
\par struct task_struct. This is usually at least 20 KiB of memory that is always resident. SIZE is the virtual size of the process
\par (code+data+stack).
\par 
\par Processes marked <defunct> are dead processes (so-called "zombies") that remain because their parent has not destroyed them
\par properly. These processes will be destroyed by init(8) if the parent process exits.
\par 
\par PROCESS FLAGS
\par The sum of these values is displayed in the "F" column, which is provided by the flags output specifier.
\par 1    forked but didn't exec
\par 4    used super-user privileges
\par 
\par 
\par PROCESS STATE CODES
\par Here are the different values that the s, stat and state output specifiers (header "STAT" or "S") will display to describe the
\par state of a process.
\par D    Uninterruptible sleep (usually IO)
\par R    Running or runnable (on run queue)
\par S    Interruptible sleep (waiting for an event to complete)
\par T    Stopped, either by a job control signal or because it is being traced.
\par W    paging (not valid since the 2.6.xx kernel)
\par X    dead (should never be seen)
\par Z    Defunct ("zombie") process, terminated but not reaped by its parent.
\par 
\par For BSD formats and when the stat keyword is used, additional characters may be displayed:
\par <    high-priority (not nice to other users)
\par N    low-priority (nice to other users)
\par L    has pages locked into memory (for real-time and custom IO)
\par s    is a session leader
\par l    is multi-threaded (using CLONE_THREAD, like NPTL pthreads do)
\par +    is in the foreground process group
\par 
\par OBSOLETE SORT KEYS
\par These keys are used by the BSD O option (when it is used for sorting). The GNU --sort option doesn't use these keys, but the
\par specifiers described below in the STANDARD FORMAT SPECIFIERS section. Note that the values used in sorting are the internal
\par values ps uses and not the "cooked" values used in some of the output format fields (e.g. sorting on tty will sort into device
\par number, not according to the terminal name displayed). Pipe ps output into the sort(1) command if you want to sort the cooked
\par values.
\par 
\par KEY   LONG         DESCRIPTION
\par c     cmd          simple name of executable
\par C     pcpu         cpu utilization
\par f     flags        flags as in long format F field
\par g     pgrp         process group ID
\par G     tpgid        controlling tty process group ID
\par j     cutime       cumulative user time
\par J     cstime       cumulative system time
\par k     utime        user time
\par m     min_flt      number of minor page faults
\par M     maj_flt      number of major page faults
\par n     cmin_flt     cumulative minor page faults
\par N     cmaj_flt     cumulative major page faults
\par o     session      session ID
\par p     pid          process ID
\par P     ppid         parent process ID
\par r     rss          resident set size
\par R     resident     resident pages
\par s     size         memory size in kilobytes
\par S     share        amount of shared pages
\par t     tty          the device number of the controlling tty
\par T     start_time   time process was started
\par U     uid          user ID number
\par u     user         user name
\par v     vsize        total VM size in kB
\par y     priority     kernel scheduling priority
\par 
\par AIX FORMAT DESCRIPTORS
\par This ps supports AIX format descriptors, which work somewhat like the formatting codes of printf(1) and printf(3). For example,
\par the normal default output can be produced with this:  ps -eo "%p %y %x %c". The NORMAL codes are described in the next section.
\par 
\par CODE   NORMAL   HEADER
\par %C     pcpu     %CPU
\par %G     group    GROUP
\par %P     ppid     PPID
\par %U     user     USER
\par %a     args     COMMAND
\par %c     comm     COMMAND
\par %g     rgroup   RGROUP
\par %n     nice     NI
\par %p     pid      PID
\par %r     pgid     PGID
\par %t     etime    ELAPSED
\par %u     ruser    RUSER
\par %x     time     TIME
\par %y     tty      TTY
\par %z     vsz      VSZ
\par 
\par STANDARD FORMAT SPECIFIERS
\par Here are the different keywords that may be used to control the output format (e.g. with option -o) or to sort the selected
\par processes with the GNU-style --sort option.
\par 
\par For example:  ps -eo pid,user,args --sort user
\par 
\par This version of ps tries to recognize most of the keywords used in other implementations of ps.
\par 
\par The following user-defined format specifiers may contain spaces: args, cmd, comm, command, fname, ucmd, ucomm, lstart, bsdstart,
\par start.
\par 
\par Some keywords may not be available for sorting.
\par 
\par CODE       HEADER   DESCRIPTION
\par 
\par %cpu       %CPU     cpu utilization of the process in "##.#" format. Currently, it is the CPU time used divided by the time the
\par                     process has been running (cputime/realtime ratio), expressed as a percentage. It will not add up to 100%
\par                     unless you are lucky. (alias pcpu).
\par 
\par %mem       %MEM     ratio of the process's resident set size  to the physical memory on the machine, expressed as a percentage.
\par                     (alias pmem).
\par 
\par args       COMMAND  command with all its arguments as a string. Modifications to the arguments may be shown. The output in this
\par                     column may contain spaces. A process marked <defunct> is partly dead, waiting to be fully destroyed by its
\par                     parent. Sometimes the process args will be unavailable; when this happens, ps will instead print the
\par                     executable name in brackets. (alias cmd, command). See also the comm format keyword, the -f option, and the
\par                     c option.
\par                     When specified last, this column will extend to the edge of the display. If ps can not determine display
\par                     width, as when output is redirected (piped) into a file or another command, the output width is undefined.
\par                     (it may be 80, unlimited, determined by the TERM variable, and so on) The COLUMNS environment variable or
\par                     --cols option may be used to exactly determine the width in this case. The w or -w option may be also be
\par                     used to adjust width.
\par 
\par blocked    BLOCKED  mask of the blocked signals, see signal(7). According to the width of the field, a 32-bit or 64-bit mask in
\par                     hexadecimal format is displayed. (alias sig_block, sigmask).
\par 
\par bsdstart   START    time the command started. If the process was started less than 24 hours ago, the output format is " HH:MM",
\par                     else it is "mmm dd" (where mmm is the three letters of the month).
\par 
\par bsdtime    TIME     accumulated cpu time, user + system. The display format is usually "MMM:SS", but can be shifted to the right
\par                     if the process used more than 999 minutes of cpu time.
\par 
\par c          C        processor utilization. Currently, this is the integer value of the percent usage over the lifetime of the
\par                     process. (see %cpu).
\par 
\par caught     CAUGHT   mask of the caught signals, see signal(7). According to the width of the field, a 32 or 64 bits mask in
\par                     hexadecimal format is displayed. (alias sig_catch, sigcatch).
\par 
\par class      CLS      scheduling class of the process. (alias policy, cls). Field's possible values are:
\par                     -   not reported
\par                     TS  SCHED_OTHER
\par                     FF  SCHED_FIFO
\par                     RR  SCHED_RR
\par                     ?   unknown value
\par 
\par cls        CLS      scheduling class of the process. (alias policy, class). Field's possible values are:
\par                     -   not reported
\par                     TS  SCHED_OTHER
\par                     FF  SCHED_FIFO
\par                     RR  SCHED_RR
\par                     ?   unknown value
\par 
\par cmd        CMD      see args. (alias args, command).
\par 
\par comm       COMMAND  command name (only the executable name). Modifications to the command name will not be shown. A process
\par                     marked <defunct> is partly dead, waiting to be fully destroyed by its parent. The output in this column may
\par                     contain spaces. (alias ucmd, ucomm). See also the args format keyword, the -f option, and the c option.
\par                     When specified last, this column will extend to the edge of the display. If ps can not determine display
\par                     width, as when output is redirected (piped) into a file or another command, the output width is undefined.
\par                     (it may be 80, unlimited, determined by the TERM variable, and so on) The COLUMNS environment variable or
\par                     --cols option may be used to exactly determine the width in this case. The w or -w option may be also be
\par                     used to adjust width.
\par 
\par command    COMMAND  see args. (alias args, cmd).
\par 
\par cp         CP       per-mill (tenths of a percent) CPU usage. (see %cpu).
\par 
\par cputime    TIME     cumulative CPU time, "[dd-]hh:mm:ss" format. (alias time).
\par 
\par egid       EGID     effective group ID number of the process as a decimal integer. (alias gid).
\par 
\par egroup     EGROUP   effective group ID of the process. This will be the textual group ID, if it can be obtained and the field
\par                     width permits, or a decimal representation otherwise. (alias group).
\par 
\par eip        EIP      instruction pointer.
\par 
\par esp        ESP      stack pointer.
\par 
\par etime      ELAPSED  elapsed time since the process was started, in the form [[dd-]hh:]mm:ss.
\par 
\par euid       EUID     effective user ID. (alias uid).
\par 
\par euser      EUSER    effective user name. This will be the textual user ID, if it can be obtained and the field width permits,
\par                     or a decimal representation otherwise. The n option can be used to force the decimal representation.
\par                     (alias uname, user).
\par 
\par f          F        flags associated with the process, see the PROCESS FLAGS section. (alias flag, flags).
\par 
\par fgid       FGID     filesystem access group ID. (alias fsgid).
\par 
\par fgroup     FGROUP   filesystem access group ID. This will be the textual user ID, if it can be obtained and the field width
\par                     permits, or a decimal representation otherwise. (alias fsgroup).
\par 
\par flag       F        see f. (alias f, flags).
\par 
\par flags      F        see f. (alias f, flag).
\par 
\par fname      COMMAND  first 8 bytes of the base name of the process's executable file. The output in this column may contain
\par                     spaces.
\par 
\par fuid       FUID     filesystem access user ID. (alias fsuid).
\par 
\par fuser      FUSER    filesystem access user ID. This will be the textual user ID, if it can be obtained and the field width
\par                     permits, or a decimal representation otherwise.
\par 
\par gid        GID      see egid. (alias egid).
\par 
\par group      GROUP    see egroup. (alias egroup).
\par 
\par ignored    IGNORED  mask of the ignored signals, see signal(7). According to the width of the field, a 32-bit or 64-bit mask in
\par                     hexadecimal format is displayed. (alias sig_ignore, sigignore).
\par 
\par label      LABEL    security label, most commonly used for SE Linux context data. This is for the Mandatory Access Control
\par                     ("MAC") found on high-security systems.
\par 
\par lstart     STARTED  time the command started.
\par 
\par lwp        LWP      lwp (light weight process, or thread) ID of the lwp being reported. (alias spid, tid).
\par 
\par ni         NI       nice value. This ranges from 19 (nicest) to -20 (not nice to others), see nice(1). (alias nice).
\par 
\par nice       NI       see ni. (alias ni).
\par 
\par nlwp       NLWP     number of lwps (threads) in the process. (alias thcount).
\par 
\par nwchan     WCHAN    address of the kernel function where the process is sleeping (use wchan if you want the kernel function
\par                     name). Running tasks will display a dash ('-') in this column.
\par 
\par pcpu       %CPU     see %cpu. (alias %cpu).
\par 
\par pending    PENDING  mask of the pending signals. See signal(7). Signals pending on the process are distinct from signals pending
\par                     on individual threads. Use the m option or the -m option to see both. According to the width of the field,
\par                     a 32-bit or 64-bit mask in hexadecimal format is displayed. (alias sig).
\par 
\par 
\par pgid       PGID     process group ID or, equivalently, the process ID of the process group leader. (alias pgrp).
\par 
\par pgrp       PGRP     see pgid. (alias pgid).
\par 
\par pid        PID      process ID number of the process.
\par 
\par pmem       %MEM     see %mem. (alias %mem).
\par 
\par policy     POL      scheduling class of the process. (alias class, cls). Possible values are:
\par                     -   not reported
\par                     TS  SCHED_OTHER
\par                     FF  SCHED_FIFO
\par                     RR  SCHED_RR
\par                     ?   unknown value
\par 
\par ppid       PPID     parent process ID.
\par 
\par psr        PSR      processor that process is currently assigned to.
\par 
\par rgid       RGID     real group ID.
\par 
\par rgroup     RGROUP   real group name. This will be the textual group ID, if it can be obtained and the field width permits,
\par                     or a decimal representation otherwise.
\par 
\par rss        RSS      resident set size, the non-swapped physical memory that a task has used (in kiloBytes). (alias rssize, rsz).
\par 
\par rssize     RSS      see rss. (alias rss, rsz).
\par 
\par rsz        RSZ      see rss. (alias rss, rssize).
\par 
\par rtprio     RTPRIO   realtime priority.
\par 
\par ruid       RUID     real user ID.
\par 
\par ruser      RUSER    real user ID. This will be the textual user ID, if it can be obtained and the field width permits,
\par                     or a decimal representation otherwise.
\par 
\par s          S        minimal state display (one character). See section PROCESS STATE CODES for the different values. See also
\par                     stat if you want additional information displayed. (alias state).
\par 
\par sched      SCH      scheduling policy of the process. The policies sched_other, sched_fifo, and sched_rr are respectively
\par                     displayed as 0, 1, and 2.
\par 
\par sess       SESS     session ID or, equivalently, the process ID of the session leader. (alias session, sid).
\par 
\par sgi_p      P        processor that the process is currently executing on. Displays "*" if the process is not currently running
\par                     or runnable.
\par 
\par sgid       SGID     saved group ID. (alias svgid).
\par 
\par sgroup     SGROUP   saved group name. This will be the textual group ID, if it can be obtained and the field width permits,
\par                     or a decimal representation otherwise.
\par 
\par sid        SID      see sess. (alias sess, session).
\par 
\par sig        PENDING  see pending. (alias pending, sig_pend).
\par 
\par sigcatch   CAUGHT   see caught. (alias caught, sig_catch).
\par 
\par sigignore  IGNORED  see ignored. (alias ignored, sig_ignore).
\par 
\par sigmask    BLOCKED  see blocked. (alias blocked, sig_block).
\par 
\par size       SZ       approximate amount of swap space that would be required if the process were to dirty all writable pages and
\par                     then be swapped out. This number is very rough!
\par 
\par spid       SPID     see lwp. (alias lwp, tid).
\par 
\par stackp     STACKP   address of the bottom (start) of stack for the process.
\par 
\par start      STARTED  time the command started. If the process was started less than 24 hours ago, the output format is
\par                     "HH:MM:SS", else it is "  mmm dd" (where mmm is a three-letter month name).
\par 
\par start_time START    starting time or date of the process. Only the year will be displayed if the process was not started the
\par                     same year ps was invoked, or "mmmdd" if it was not started the same day, or "HH:MM" otherwise.
\par 
\par stat       STAT     multi-character process state. See section PROCESS STATE CODES for the different values meaning. See also s
\par                     and state if you just want the first character displayed.
\par 
\par state      S        see s. (alias s).
\par 
\par suid       SUID     saved user ID. (alias svuid).
\par 
\par suser      SUSER    saved user name. This will be the textual user ID, if it can be obtained and the field width permits,
\par                     or a decimal representation otherwise. (alias svuser).
\par 
\par svgid      SVGID    see sgid. (alias sgid).
\par 
\par svuid      SVUID    see suid. (alias suid).
\par 
\par sz         SZ       size in physical pages of the core image of the process. This includes text, data, and stack space. Device
\par                     mappings are currently excluded; this is subject to change. See vsz and rss.
\par 
\par thcount    THCNT    see nlwp. (alias nlwp). number of kernel threads owned by the process.
\par 
\par tid        TID      see lwp. (alias lwp).
\par 
\par time       TIME     cumulative CPU time, "[dd-]hh:mm:ss" format. (alias cputime).
\par 
\par tname      TTY      controlling tty (terminal). (alias tt, tty).
\par 
\par tpgid      TPGID    ID of the foreground process group on the tty (terminal) that the process is connected to, or -1 if the
\par                     process is not connected to a tty.
\par 
\par tt         TT       controlling tty (terminal). (alias tname, tty).
\par 
\par tty        TT       controlling tty (terminal). (alias tname, tt).
\par 
\par ucmd       CMD      see comm. (alias comm, ucomm).
\par 
\par ucomm      COMMAND  see comm. (alias comm, ucmd).
\par 
\par uid        UID      see euid. (alias euid).
\par 
\par uname      USER     see euser. (alias euser, user).
\par 
\par user       USER     see euser. (alias euser, uname).
\par 
\par vsize      VSZ      see vsz. (alias vsz).
\par 
\par vsz        VSZ      virtual memory size of the process in KiB (1024-byte units). Device mappings are currently excluded; this is
\par                     subject to change. (alias vsize).
\par 
\par wchan      WCHAN    name of the kernel function in which the process is sleeping, a "-" if the process is running, or a "*" if
\par                     the process is multi-threaded and ps is not displaying threads.
\par 
\par ENVIRONMENT VARIABLES
\par The following environment variables could affect ps:
\par 
\par COLUMNS
\par    Override default display width.
\par 
\par LINES
\par    Override default display height.
\par 
\par PS_PERSONALITY
\par    Set to one of posix, old, linux, bsd, sun, digital... (see section PERSONALITY below).
\par 
\par CMD_ENV
\par    Set to one of posix, old, linux, bsd, sun, digital... (see section PERSONALITY below).
\par 
\par I_WANT_A_BROKEN_PS
\par    Force obsolete command line interpretation.
\par 
\par LC_TIME
\par    Date format.
\par 
\par PS_COLORS
\par    Not currently supported.
\par 
\par PS_FORMAT
\par    Default output format override. You may set this to a format string of the type used for the -o option. The DefSysV and
\par    DefBSD values are particularly useful.
\par 
\par PS_SYSMAP
\par    Default namelist (System.map) location.
\par 
\par PS_SYSTEM_MAP
\par    Default namelist (System.map) location.
\par 
\par POSIXLY_CORRECT
\par    Don't find excuses to ignore bad "features".
\par 
\par POSIX2
\par    When set to "on", acts as POSIXLY_CORRECT.
\par 
\par UNIX95
\par    Don't find excuses to ignore bad "features".
\par 
\par _XPG
\par    Cancel CMD_ENV=irix non-standard behavior.
\par 
\par In general, it is a bad idea to set these variables. The one exception is CMD_ENV or PS_PERSONALITY, which could be set to Linux
\par for normal systems. Without that setting, ps follows the useless and bad parts of the Unix98 standard.
\par 
\par PERSONALITY
\par 390        like the S/390 OpenEdition ps
\par aix        like AIX ps
\par bsd        like FreeBSD ps (totally non-standard)
\par compaq     like Digital Unix ps
\par debian     like the old Debian ps
\par digital    like Tru64 (was Digital Unix, was OSF/1) ps
\par gnu        like the old Debian ps
\par hp         like HP-UX ps
\par hpux       like HP-UX ps
\par irix       like Irix ps
\par linux      ***** RECOMMENDED *****
\par old        like the original Linux ps (totally non-standard)
\par os390      like OS/390 Open Edition ps
\par posix      standard
\par s390       like OS/390 Open Edition ps
\par sco        like SCO ps
\par sgi        like Irix ps
\par solaris2   like Solaris 2+ (SunOS 5) ps
\par sunos4     like SunOS 4 (Solaris 1) ps (totally non-standard)
\par svr4       standard
\par sysv       standard
\par tru64      like Tru64 (was Digital Unix, was OSF/1) ps
\par unix       standard
\par unix95     standard
\par unix98     standard
\par 
\par SEE ALSO
\par top(1), pgrep(1), pstree(1), proc(5).
\par 
\par STANDARDS
\par This ps conforms to:
\par 1   Version 2 of the Single Unix Specification
\par 2   The Open Group Technical Standard Base Specifications, Issue 6
\par 3   IEEE Std 1003.1, 2004 Edition
\par 4   X/Open System Interfaces Extension [UP XSI]
\par 5   ISO/IEC 9945:2003
\par 
\par AUTHOR
\par ps was originally written by Branko Lankester <lankeste@fwi.uva.nl>. Michael K. Johnson <johnsonm@redhat.com> re-wrote it
\par significantly to use the proc filesystem, changing a few things in the process. Michael Shields <mjshield@nyx.cs.du.edu> added
\par the pid-list feature. Charles Blake <cblake@bbn.com> added multi-level sorting, the dirent-style library, the device
\par name-to-number mmaped database, the approximate binary search directly on System.map, and many code and documentation cleanups.
\par David Mossberger-Tang wrote the generic BFD support for psupdate. Albert Cahalan <albert@users.sf.net> rewrote ps for full
\par Unix98 and BSD support, along with some ugly hacks for obsolete and foreign syntax.
\par 
\par Please send bug reports to <procps-feedback@lists.sf.net>. No subscription is required or suggested.\par}