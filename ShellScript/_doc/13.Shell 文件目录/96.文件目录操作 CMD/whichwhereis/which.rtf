{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red0\green128\blue128;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1360039533\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid36929574}
{\list\listtemplateid1313430208\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid943868357}
{\list\listtemplateid1098991323\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid116380236}
{\list\listtemplateid1099074942\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid2088386426}
{\list\listtemplateid1325067113\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid395919634}
}
{\*\listoverridetable
{\listoverride\listid36929574\listoverridecount0\ls1}
{\listoverride\listid943868357\listoverridecount0\ls2}
{\listoverride\listid116380236\listoverridecount0\ls3}
{\listoverride\listid2088386426\listoverridecount0\ls4}
{\listoverride\listid395919634\listoverridecount0\ls5}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 which
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\b\fs20\cf2 which
\par \plain \f1\fs20\cf2 01\uc2\u65294 \'a3\'ae\u21629 \'c3\'fc\u20196 \'c1\'ee\u26684 \'b8\'f1\u24335 \'ca\'bd\u65306 \'a3\'ba\uc1
\par which \uc2\u21487 \'bf\'c9\u25191 \'d6\'b4\u34892 \'d0\'d0\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u31216 \'b3\'c6 \uc1
\par 
\par 02\uc2\u65294 \'a3\'ae\u21629 \'c3\'fc\u20196 \'c1\'ee\u21151 \'b9\'a6\u33021 \'c4\'dc\u65306 \'a3\'ba\uc1
\par \plain \f1\fs20\cf1 which\uc2\u25351 \'d6\'b8\u20196 \'c1\'ee\u20250 \'bb\'e1\u22312 \'d4\'daPATH\u21464 \'b1\'e4\u37327 \'c1\'bf\u25351 \'d6\'b8\u23450 \'b6\'a8\u30340 \'b5\'c4\u36335 \'c2\'b7\u24452 \'be\'b6\u20013 \'d6\'d0\u65292 \'a3\'ac\u25628 \'cb\'d1\u32034 \'cb\'f7\u26576 \'c4\'b3\u20010 \'b8\'f6\u31995 \'cf\'b5\u32479 \'cd\'b3\u21629 \'c3\'fc\u20196 \'c1\'ee\u30340 \'b5\'c4\u20301 \'ce\'bb\u32622 \'d6\'c3\u65292 \'a3\'ac\u24182 \'b2\'a2\u19988 \'c7\'d2\u36820 \'b7\'b5\u22238 \'bb\'d8\u31532 \'b5\'da\u19968 \'d2\'bb\u20010 \'b8\'f6\u25628 \'cb\'d1\u32034 \'cb\'f7\u32467 \'bd\'e1\u26524 \'b9\'fb\u12290 \'a1\'a3\uc1
\par \plain \f1\fs20\cf2 
\par 03\uc2\u65294 \'a3\'ae\u21629 \'c3\'fc\u20196 \'c1\'ee\u21442 \'b2\'ce\u25968 \'ca\'fd\u65306 \'a3\'ba\uc1
\par -n \uc2\u12288 \'a1\'a1\u25351 \'d6\'b8\u23450 \'b6\'a8\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u38271 \'b3\'a4\u24230 \'b6\'c8\u65292 \'a3\'ac\u25351 \'d6\'b8\u23450 \'b6\'a8\u30340 \'b5\'c4\u38271 \'b3\'a4\u24230 \'b6\'c8\u24517 \'b1\'d8\u39035 \'d0\'eb\u22823 \'b4\'f3\u20110 \'d3\'da\u25110 \'bb\'f2\u31561 \'b5\'c8\u20110 \'d3\'da\u25152 \'cb\'f9\u26377 \'d3\'d0\u25991 \'ce\'c4\u20214 \'bc\'fe\u20013 \'d6\'d0\u26368 \'d7\'ee\u38271 \'b3\'a4\u30340 \'b5\'c4\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u12290 \'a1\'a3\uc1
\par -p \uc2\u12288 \'a1\'a1\u19982 \'d3\'eb-n\u21442 \'b2\'ce\u25968 \'ca\'fd\u30456 \'cf\'e0\u21516 \'cd\'ac\u65292 \'a3\'ac\u20294 \'b5\'ab\u27492 \'b4\'cb\u22788 \'b4\'a6\u30340 \'b5\'c4\u21253 \'b0\'fc\u25324 \'c0\'a8\u20102 \'c1\'cb\u25991 \'ce\'c4\u20214 \'bc\'fe\u30340 \'b5\'c4\u36335 \'c2\'b7\u24452 \'be\'b6\u12290 \'a1\'a3\uc1
\par -w \uc2\u12288 \'a1\'a1\u25351 \'d6\'b8\u23450 \'b6\'a8\u36755 \'ca\'e4\u20986 \'b3\'f6\u26102 \'ca\'b1\u26639 \'c0\'b8\u20301 \'ce\'bb\u30340 \'b5\'c4\u23485 \'bf\'ed\u24230 \'b6\'c8\u12290 \'a1\'a3\uc1
\par -V \uc2\u12288 \'a1\'a1\u26174 \'cf\'d4\u31034 \'ca\'be\u29256 \'b0\'e6\u26412 \'b1\'be\u20449 \'d0\'c5\u24687 \'cf\'a2\uc1
\par \plain \f1\fs20\cf3 ------------------------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf1 $ which which
\par \plain \f1\fs20\cf2 alias which='alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde'
\par \plain \f1\fs20\cf3 ------------------------------------------------------------------------------------------------------------------------------------------
\par \plain \f1\fs20\cf2 WHICH(1)                                                              WHICH(1)
\par 
\par NAME
\par \plain \f1\fs20\cf1        which - shows the full path of (shell) commands.
\par \plain \f1\fs20\cf2 
\par SYNOPSIS
\par        which [options] [--] programname [...]
\par 
\par DESCRIPTION
\par        Which takes one or more arguments. For each of its arguments it prints to stdout the full path of the executables
\par        that would have been executed when this argument had been entered at the shell prompt. It does this by searching
\par        for an executable or script in the directories listed in the environment variable PATH using the same algorithm
\par        as bash(1).
\par 
\par        This man page is generated from the file which.texinfo.
\par 
\par OPTIONS
\par        --all, -a
\par            Print all matching executables in PATH, not just the first.
\par 
\par        --read-alias, -i
\par            Read aliases from stdin, reporting matching ones on stdout. This is useful in combination with using an alias
\par            for which itself. For example
\par            alias which=\uc2\u180 \'a1\'e4alias | which -i\u180 \'a1\'e4.\uc1
\par 
\par        --skip-alias
\par            Ignore option `--read-alias\uc2\u180 \'a1\'e4, if any. This is useful to explicity search for normal binaries, while using the\uc1
\par            `--read-alias\uc2\u180 \'a1\'e4 option in an alias or function for which.\uc1
\par 
\par        --read-functions
\par            Read shell function definitions from stdin, reporting matching ones on stdout. This is useful in combination
\par            with using a shell function for which itself.  For example:
\par            which() \{ declare -f | which --read-functions $@ \}
\par            export -f which
\par 
\par        --skip-functions
\par            Ignore option `--read-functions\uc2\u180 \'a1\'e4, if any. This is useful to explicity search for normal binaries, while using\uc1
\par            the `--read-functions\uc2\u180 \'a1\'e4 option in an alias or function for which.\uc1
\par 
\par        --skip-dot
\par            Skip directories in PATH that start with a dot.
\par 
\par        --skip-tilde
\par            Skip directories in PATH that start with a tilde and executables which reside in the HOME directory.
\par 
\par        --show-dot
\par            If a directory in PATH starts with a dot and a matching executable was found for that path, then print
\par            "./programname" rather than the full path.
\par 
\par        --show-tilde
\par            Output a tilde when a directory matches the HOME directory. This option is ignored when which is invoked as
\par            root.
\par 
\par        --tty-only
\par            Stop processing options on the right if not on tty.
\par 
\par        --version,-v,-V
\par            Print version information on standard output then exit successfully.
\par 
\par        --help
\par            Print usage information on standard output then exit successfully.
\par 
\par RETURN VALUE
\par        Which returns the number of failed arguments, or -1 when no `programname\uc2\u180 \'a1\'e4 was given.\uc1
\par 
\par EXAMPLE
\par       \plain \f1\fs20\cf1  The recommended way to use this utility is by adding an alias (C shell) or shell function (Bourne shell) for
\par        which like the following:
\par \plain \f1\fs20\cf2 
\par        [ba]sh:
\par 
\par \plain \f1\fs20\cf1             which ()
\par             \{
\par               (alias; declare -f) | /usr/bin/which --tty-only --read-alias --read-functions --show-tilde --show-dot $@
\par             \}
\par             export -f which
\par \plain \f1\fs20\cf2 
\par        [t]csh:
\par 
\par \plain \f1\fs20\cf1             alias which \uc2\u180 \'a1\'e4alias | /usr/bin/which --tty-only --read-alias --show-dot --show-tilde\u180 \'a1\'e4\uc1
\par \plain \f1\fs20\cf2 
\par        This  will  print the readable ~/ and ./ when starting which from your prompt, while still printing the full path
\par        when used from a script:
\par 
\par             > which q2
\par             ~/bin/q2
\par             > echo `which q2`
\par             /home/carlo/bin/q2
\par 
\par BUGS
\par        The HOME directory is determined by looking for the HOME environment variable, which aborts  when  this  variable
\par        doesn\uc2\u180 \'a1\'e4t  exist.   Which will consider two equivalent directories to be different when one of them contains a path\uc1
\par        with a symbolic link.
\par 
\par AUTHOR
\par        Carlo Wood <carlo@gnu.org>
\par 
\par SEE ALSO
\par        bash(1)
\par 
\par                                                                       WHICH(1)
\par \plain \f1\fs20\cf3 ------------------------------------------------------------------------------------------------------------------------------------------\par}