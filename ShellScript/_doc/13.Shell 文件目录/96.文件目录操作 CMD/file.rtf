{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang2052\deflangfe2052{\fonttbl{\f0\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f1\fnil Arial;}{\f2\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue128;\red128\green0\blue0;\red0\green128\blue0;\red0\green128\blue128;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1832732242\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid84749215}
}
{\*\listoverridetable
{\listoverride\listid84749215\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f0\b\fs24\cf6 file
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f2\fs20\cf6 \uc2\u21151 \'b9\'a6\u33021 \'c4\'dc\u35828 \'cb\'b5\u26126 \'c3\'f7\u65306 \'a3\'ba\uc1
\par \plain \f2\fs20\cf1 \uc2\u36776 \'b1\'e6\u35782 \'ca\'b6\u25991 \'ce\'c4\u20214 \'bc\'fe\u31867 \'c0\'e0\u22411 \'d0\'cd\u12290 \'a1\'a3\uc1
\par \plain \f2\fs20\cf5 ----------------------------------------------------------------------------------------------------------------------
\par \plain \f2\fs20\cf6 \uc2\u35821 \'d3\'ef\u12288 \'a1\'a1\u12288 \'a1\'a1\u27861 \'b7\'a8\u65306 \'a3\'ba\uc1
\par \plain \f2\fs20\cf1 file [-beLvz][-f <\uc2\u21517 \'c3\'fb\u31216 \'b3\'c6\u25991 \'ce\'c4\u20214 \'bc\'fe>][-m <\u39764 \'c4\'a7\u27861 \'b7\'a8\u25968 \'ca\'fd\u23383 \'d7\'d6\u25991 \'ce\'c4\u20214 \'bc\'fe>...][\u25991 \'ce\'c4\u20214 \'bc\'fe\u25110 \'bb\'f2\u30446 \'c4\'bf\u24405 \'c2\'bc...]\uc1
\par \plain \f2\fs20\cf5 ----------------------------------------------------------------------------------------------------------------------
\par \plain \f2\fs20\cf6 \uc2\u21442 \'b2\'ce\u12288 \'a1\'a1\u12288 \'a1\'a1\u25968 \'ca\'fd\u65306 \'a3\'ba\uc1
\par -b \uc2\u12288 \'a1\'a1                             \u21015 \'c1\'d0\u20986 \'b3\'f6\u36776 \'b1\'e6\u35782 \'ca\'b6\u32467 \'bd\'e1\u26524 \'b9\'fb\u26102 \'ca\'b1\u65292 \'a3\'ac\u19981 \'b2\'bb\u26174 \'cf\'d4\u31034 \'ca\'be\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u31216 \'b3\'c6\u12290 \'a1\'a3\uc1
\par \plain \f2\fs20\cf1 -c \uc2\u12288 \'a1\'a1                             \u35814 \'cf\'ea\u32454 \'cf\'b8\u26174 \'cf\'d4\u31034 \'ca\'be\u25351 \'d6\'b8\u20196 \'c1\'ee\u25191 \'d6\'b4\u34892 \'d0\'d0\u36807 \'b9\'fd\u31243 \'b3\'cc\u65292 \'a3\'ac\u20415 \'b1\'e3\u20110 \'d3\'da\u25490 \'c5\'c5\u38169 \'b4\'ed\u25110 \'bb\'f2\u20998 \'b7\'d6\u26512 \'ce\'f6\u31243 \'b3\'cc\u24207 \'d0\'f2\u25191 \'d6\'b4\u34892 \'d0\'d0\u30340 \'b5\'c4\u24773 \'c7\'e9\u24418 \'d0\'ce\u12290 \'a1\'a3\uc1
\par \plain \f2\fs20\cf6 -f <\uc2\u21517 \'c3\'fb\u31216 \'b3\'c6\u25991 \'ce\'c4\u20214 \'bc\'fe> \u12288 \'a1\'a1          \u25351 \'d6\'b8\u23450 \'b6\'a8\u21517 \'c3\'fb\u31216 \'b3\'c6\u25991 \'ce\'c4\u20214 \'bc\'fe\u65292 \'a3\'ac\u20854 \'c6\'e4\u20869 \'c4\'da\u23481 \'c8\'dd\u26377 \'d3\'d0\u19968 \'d2\'bb\u20010 \'b8\'f6\u25110 \'bb\'f2\u22810 \'b6\'e0\u20010 \'b8\'f6\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u31216 \'b3\'c6\u21602 \'c4\'d8\u24863 \'b8\'d0\u65292 \'a3\'ac\u35753 \'c8\'c3file\u20381 \'d2\'c0\u24207 \'d0\'f2\u36776 \'b1\'e6\u35782 \'ca\'b6\u36825 \'d5\'e2\u20123 \'d0\'a9\u25991 \'ce\'c4\u20214 \'bc\'fe\u65292 \'a3\'ac\u26684 \'b8\'f1\u24335 \'ca\'bd\u20026 \'ce\'aa\u27599 \'c3\'bf\u21015 \'c1\'d0\u19968 \'d2\'bb\u20010 \'b8\'f6\u25991 \'ce\'c4\u20214 \'bc\'fe\u21517 \'c3\'fb\u31216 \'b3\'c6\u12290 \'a1\'a3\uc1
\par -L \uc2\u12288 \'a1\'a1                             \u30452 \'d6\'b1\u25509 \'bd\'d3\u26174 \'cf\'d4\u31034 \'ca\'be\u31526 \'b7\'fb\u21495 \'ba\'c5\u36830 \'c1\'ac\u25509 \'bd\'d3\u25152 \'cb\'f9\u25351 \'d6\'b8\u21521 \'cf\'f2\u30340 \'b5\'c4\u25991 \'ce\'c4\u20214 \'bc\'fe\u30340 \'b5\'c4\u31867 \'c0\'e0\u21035 \'b1\'f0\u12290 \'a1\'a3\uc1
\par -m <\uc2\u39764 \'c4\'a7\u27861 \'b7\'a8\u25968 \'ca\'fd\u23383 \'d7\'d6\u25991 \'ce\'c4\u20214 \'bc\'fe> \u12288 \'a1\'a1  \u25351 \'d6\'b8\u23450 \'b6\'a8\u39764 \'c4\'a7\u27861 \'b7\'a8\u25968 \'ca\'fd\u23383 \'d7\'d6\u25991 \'ce\'c4\u20214 \'bc\'fe\u12290 \'a1\'a3\uc1
\par -v \uc2\u12288 \'a1\'a1                             \u26174 \'cf\'d4\u31034 \'ca\'be\u29256 \'b0\'e6\u26412 \'b1\'be\u20449 \'d0\'c5\u24687 \'cf\'a2\u12290 \'a1\'a3\uc1
\par \plain \f2\fs20\cf1 -z \uc2\u12288 \'a1\'a1                             \u23581 \'b3\'a2\u35797 \'ca\'d4\u21435 \'c8\'a5\u35299 \'bd\'e2\u35835 \'b6\'c1\u21387 \'d1\'b9\u32553 \'cb\'f5\u25991 \'ce\'c4\u20214 \'bc\'fe\u30340 \'b5\'c4\u20869 \'c4\'da\u23481 \'c8\'dd\u12290 \'a1\'a3\uc1
\par \plain \f2\fs20\cf5 ----------------------------------------------------------------------------------------------------------------------
\par \plain \f2\fs20\cf1 NAME
\par        file - determine file type
\par \plain \f2\fs20 SYNOPSIS
\par \plain \f2\fs20\cf1        file [-dh][-M file][-m file] file ...
\par        file -i [-h] file ...
\par \plain \f2\fs20 DESCRIPTION
\par        The file utility shall perform a series of tests in sequence on each specified file in an attempt to\plain \f2\fs20\cf1  classify it:
\par \plain \f2\fs20         1. \plain \f2\fs20\cf1 If  file  does  not exist,\plain \f2\fs20  cannot be read, or its file status could not be determined, the output shall indicate that
\par            the file was processed, but that its type could not be determined.
\par 
\par         2. \plain \f2\fs20\cf1 If the file is not a regular file\plain \f2\fs20 , its file type shall be identified.  The file types directory, FIFO, socket,  block
\par            special, and character special shall be identified as such. Other implementation-defined file types may also be iden-
\par            tified. If file is a symbolic link, by default the link shall be resolved and file shall test the type of file refer-
\par            enced by the symbolic link.  (See the -h and -i options below.)
\par 
\par         3. \plain \f2\fs20\cf1 If the length of file is zero\plain \f2\fs20 , it shall be identified as an empty file.
\par 
\par         4. The file utility shall examine an initial segment of file and shall make a guess at identifying its contents based on
\par            position-sensitive tests. (The answer is not guaranteed to be correct; see the -d, -M, and -m options below.)
\par 
\par         5. The file utility shall examine file and make a guess at identifying its contents based on  context-sensitive  default
\par            system tests. (The answer is not guaranteed to be correct.)
\par 
\par         6. \plain \f2\fs20\cf1 The file shall be identified as a data file.
\par \plain \f2\fs20 
\par        If  file  does  not exist, cannot be read, or its file status could not be determined, the output shall indicate that the
\par        file was processed, but that its type could not be determined.
\par 
\par        If file is a symbolic link, by default the link shall be resolved and file shall test the type of file referenced by  the
\par        symbolic link.
\par 
\par OPTIONS
\par        The  file  utility  shall  conform  to  the Base Definitions volume of IEEE Std 1003.1-2001, Section 12.2, Utility Syntax
\par        Guidelines, except that the order of the -m, -d, and -M options shall be significant.
\par 
\par        The following options shall be supported by the implementation:
\par 
\par        -d     Apply any position-sensitive default system tests and context-sensitive default system tests to the file. This  is
\par               the default if no -M or -m option is specified.
\par 
\par        -h     When  a  symbolic  link is encountered, identify the file as a symbolic link. If -h is not specified and file is a
\par               symbolic link that refers to a nonexistent file, file shall identify the file as a symbolic link,  as  if  -h  had
\par               been specified.
\par 
\par        -i     If  a  file  is  a regular file, do not attempt to classify the type of the file further, but identify the file as
\par               specified in the STDOUT section.
\par 
\par        -M  file
\par               Specify the name of a file containing position-sensitive tests that shall be applied to a file in order  to  clas-
\par               sify  it  (see the EXTENDED DESCRIPTION). No position-sensitive default system tests nor context-sensitive default
\par               system tests shall be applied unless the -d option is also specified.
\par 
\par        -m  file
\par               Specify the name of a file containing position-sensitive tests that shall be applied to a file in order  to  clas-
\par               sify it (see the EXTENDED DESCRIPTION).
\par 
\par 
\par        If  the -m option is specified without specifying the -d option or the -M option, position-sensitive default system tests
\par        shall be applied after the position-sensitive tests specified by the -m option. If the -M option is specified with the -d
\par        option,  the -m option, or both, or the -m option is specified with the -d option, the concatenation of the position-sen-
\par        sitive tests specified by these options shall be applied in the order specified by the appearance of these options. If  a
\par        -M or -m file option-argument is -, the results are unspecified.
\par 
\par OPERANDS
\par        The following operand shall be supported:
\par        file   A pathname of a file to be tested.
\par 
\par STDIN
\par        Not used.
\par 
\par INPUT FILES
\par        The file can be any file type.
\par 
\par ENVIRONMENT VARIABLES
\par        The following environment variables shall affect the execution of file:
\par 
\par        LANG   Provide  a  default value for the internationalization variables that are unset or null. (See the Base Definitions
\par               volume of IEEE Std 1003.1-2001, Section 8.2, Internationalization Variables for the precedence  of  international-
\par               ization variables used to determine the values of locale categories.)
\par 
\par        LC_ALL If set to a non-empty string value, override the values of all the other internationalization variables.
\par 
\par        LC_CTYPE
\par               Determine the locale for the interpretation of sequences of bytes of text data as characters (for example, single-
\par               byte as opposed to multi-byte characters in arguments and input files).
\par 
\par        LC_MESSAGES
\par               Determine the locale that should be used to affect the format and contents of diagnostic messages written to stan-
\par               dard error and informative messages written to standard output.
\par 
\par        NLSPATH
\par               Determine the location of message catalogs for the processing of LC_MESSAGES .
\par 
\par 
\par ASYNCHRONOUS EVENTS
\par        Default.
\par 
\par STDOUT
\par        In the POSIX locale, the following format shall be used to identify each operand, file specified:
\par  \plain \f2\fs20\cf1              "%s: %s\\n", <file>, <type>
\par \plain \f2\fs20        The  values for <type> are unspecified, except that in the POSIX locale, if file is identified as one of the types listed
\par        in the following table, <type> shall contain (but is not limited to) the corresponding string, unless the file is identi-
\par        fied  by  a  position-sensitive test specified by a -M or -m option. Each space shown in the strings shall be exactly one
\par        <space>.
\par 
\par                                                   Table: File Utility Output Strings
\par 
\par                           \plain \f2\fs20\cf1       If file is:                              <type> shall contain the Notes
\par \plain \f2\fs20                                                                        \plain \f2\fs20\cf1   string:
\par \plain \f2\fs20                                 Nonexistent                              cannot open
\par                                 Block special                            block special            1
\par                                 Character special                        character special        1
\par                                 Directory                                directory                1
\par                                 FIFO                                     fifo                     1
\par                                 Socket                                   socket                   1
\par                                 Symbolic link                            symbolic link to         1
\par                                 Regular file                             regular file             1,2
\par                                 Empty regular file                       empty                    3
\par                                 Regular file that cannot be read         cannot open              3
\par                                 Executable binary                        executable               4,6
\par                                 ar archive library (see ar)              archive                  4,6
\par                                 Extended cpio format (see pax)           cpio archive             4,6
\par                                 Extended tar format (see ustar in pax)   tar archive              4,6
\par                                 Shell script                             commands text            5,6
\par                                 C-language source                        c program text           5,6
\par                                 FORTRAN source                           fortran program text     5,6
\par                                 Regular file whose type cannot be deter- data
\par                                 mined
\par 
\par        Notes:
\par                1. This is a file type test.
\par                2. This test is applied only if the -i option is specified.
\par                3. This test is applied only if the -i option is not specified.
\par                4. This is a position-sensitive default system test.
\par                5. This is a context-sensitive default system test.
\par                6. Position-sensitive default system tests and context-sensitive default system tests are not applied if  the  -M
\par                   option is specified unless the -d option is also specified.
\par 
\par        In  the POSIX locale, if file is identified as a symbolic link (see the -h option), the following alternative output for-
\par        mat shall be used:
\par               "%s: %s %s\\n", <file>, <type>, <contents of link>"
\par 
\par        If the file named by the file operand does not exist, cannot be read, or the type of the file named by the  file  operand
\par        cannot be determined, this shall not be considered an error that affects the exit status.
\par 
\par STDERR
\par        The standard error shall be used only for diagnostic messages.
\par 
\par OUTPUT FILES
\par        None.
\par 
\par EXTENDED DESCRIPTION
\par        A  file specified as an option-argument to the -m or -M options shall contain one position-sensitive test per line, which
\par        shall be applied to the file. If the test succeeds, the message field of the line shall be printed and no  further  tests
\par        shall  be  applied,  with  the  exception that tests on immediately following lines beginning with a single '>' character
\par        shall be applied.
\par 
\par        Each line shall be composed of the following four <blank>-separated fields:
\par 
\par        offset An unsigned number (optionally preceded by a single '>' character) specifying the offset, in bytes, of  the  value
\par               in  the file that is to be compared against the value field of the line. If the file is shorter than the specified
\par               offset, the test shall fail.
\par 
\par        If the offset begins with the character '>', the test contained in the line shall not be applied to the file  unless  the
\par        test  on  the  last  line  for  which the offset did not begin with a '>' was successful. By default, the offset shall be
\par        interpreted as an unsigned decimal number. With a leading 0x or 0X, the offset shall be interpreted as a hexadecimal num-
\par        ber; otherwise, with a leading 0, the offset shall be interpreted as an octal number.
\par 
\par        type   The  type of the value in the file to be tested. The type shall consist of the type specification characters c, d,
\par               f, s, and u, specifying character, signed decimal, floating point, string, and unsigned decimal, respectively.
\par 
\par        The type string shall be interpreted as the bytes from the file starting at the specified offset and including  the  same
\par        number of bytes specified by the value field. If insufficient bytes remain in the file past the offset to match the value
\par        field, the test shall fail.
\par 
\par        The type specification characters d, f, and u can be followed by an optional unsigned decimal integer that specifies  the
\par        number  of  bytes represented by the type.  The type specification character f can be followed by an optional F, D, or L,
\par        indicating that the value is of type float, double, or long double, respectively. The type specification characters d and
\par        u  can  be followed by an optional C, S, I, or L, indicating that the value is of type char, short, int, or long, respec-
\par        tively.
\par 
\par        The default number of bytes represented by the type specifiers d, f, and u shall correspond to  their  respective  C-lan-
\par        guage types as follows. If the system claims conformance to the C-Language Development Utilities option, those specifiers
\par        shall correspond to the default sizes used in the c99 utility.  Otherwise, the default  sizes  shall  be  implementation-
\par        defined.
\par 
\par        For  the  type  specifier characters d and u, the default number of bytes shall correspond to the size of a basic integer
\par        type of the implementation. For these specifier characters, the implementation shall support values of the optional  num-
\par        ber  of  bytes  to  be  converted corresponding to the number of bytes in the C-language types char, short, int, or long.
\par        These numbers can also be specified by an application as the characters C, S, I, and L, respectively. The byte order used
\par        when  interpreting numeric values is implementation-defined, but shall correspond to the order in which a constant of the
\par        corresponding type is stored in memory on the system.
\par 
\par        For the type specifier f, the default number of bytes shall correspond to the number of bytes in the basic double  preci-
\par        sion  floating-point data type of the underlying implementation.  The implementation shall support values of the optional
\par        number of bytes to be converted corresponding to the number of bytes in the C-language types float, double, and long dou-
\par        ble. These numbers can also be specified by an application as the characters F, D, and L, respectively.
\par 
\par        All  type  specifiers,  except  for  s,  can be followed by a mask specifier of the form &number. The mask value shall be
\par        AND'ed with the value of the input file before the comparison with the value field of the line is made. By  default,  the
\par        mask  shall  be  interpreted  as an unsigned decimal number. With a leading 0x or 0X, the mask shall be interpreted as an
\par        unsigned hexadecimal number; otherwise, with a leading 0, the mask shall be interpreted as an unsigned octal number.
\par 
\par        The strings byte, short, long, and string shall also be supported as type fields, being interpreted as dC, dS, dL, and s,
\par        respectively.
\par 
\par        value  The value to be compared with the value from the file.
\par 
\par        If  the  specifier from the type field is s or string, then interpret the value as a string. Otherwise, interpret it as a
\par        number. If the value is a string, then the test shall succeed only when a string value exactly matches the bytes from the
\par        file.
\par 
\par        If the value is a string, it can contain the following sequences:
\par 
\par        \\character
\par               The  backslash-escape  sequences  as  specified in the Base Definitions volume of IEEE Std 1003.1-2001, Table 5-1,
\par               Escape Sequences and Associated Actions ( '\\\\', '\\a', '\\b', '\\f', '\\n', '\\r', '\\t', '\\v' ). The results  of  using
\par               any other character, other than an octal digit, following the backslash are unspecified.
\par 
\par        \\octal
\par               Octal  sequences that can be used to represent characters with specific coded values. An octal sequence shall con-
\par               sist of a backslash followed by the longest sequence of one, two, or three octal-digit characters  (01234567).  If
\par               the  size  of  a  byte on the system is greater than 9 bits, the valid escape sequence used to represent a byte is
\par               implementation-defined.
\par 
\par        By default, any value that is not a string shall be interpreted as a signed decimal number. Any such value, with a  lead-
\par        ing  0x or 0X, shall be interpreted as an unsigned hexadecimal number; otherwise, with a leading zero, the value shall be
\par        interpreted as an unsigned octal number.
\par 
\par        If the value is not a string, it can be preceded by a character indicating the comparison to  be  performed.  Permissible
\par        characters and the comparisons they specify are as follows:
\par        =
\par               The test shall succeed if the value from the file equals the value field.
\par        <
\par               The test shall succeed if the value from the file is less than the value field.
\par        >
\par               The test shall succeed if the value from the file is greater than the value field.
\par        &
\par               The test shall succeed if all of the set bits in the value field are set in the value from the file.
\par        ^
\par               The test shall succeed if at least one of the set bits in the value field is not set in the value from the file.
\par        x
\par               The test shall succeed if the file is large enough to contain a value of the type specified starting at the offset
\par               specified.
\par 
\par        message
\par               The message to be printed if the test succeeds. The message shall be interpreted using the notation for the printf
\par               formatting specification; see printf(). If the value field was a string, then the value from the file shall be the
\par               argument for the printf formatting specification; otherwise, the value from the file shall be the argument.
\par EXIT STATUS
\par        The following exit values shall be returned:
\par         0     Successful completion.
\par        >0     An error occurred.
\par 
\par CONSEQUENCES OF ERRORS
\par        Default.
\par        The following sections are informative.
\par 
\par APPLICATION USAGE
\par        The file utility can only be required to guess at many of the file types because only exhaustive  testing  can  determine
\par        some  types  with  certainty. For example, binary data on some implementations might match the initial segment of an exe-
\par        cutable or a tar archive.
\par 
\par        Note that the table indicates that the output contains the stated string. Systems  may  add  text  before  or  after  the
\par        string. For executables, as an example, the machine architecture and various facts about how the file was link-edited may
\par        be included. Note also that on systems that recognize shell script files starting with "#!" as  executable  files,  these
\par        may be identified as executable binary files rather than as shell scripts.
\par 
\par EXAMPLES
\par    \plain \f2\fs20\cf1     Determine whether an argument is a binary executable file:
\par               file "$1" | grep -Fq executable &&
\par                   printf "%s is executable.\\n" "$1"
\par \plain \f2\fs20 
\par RATIONALE
\par        The -f option was omitted because the same effect can (and should) be obtained using the xargs utility.
\par 
\par        Historical versions of the file utility attempt to identify the following types of files: symbolic link, directory, char-
\par        acter special, block special, socket, tar archive, cpio archive, SCCS archive, archive library, empty,  compress  output,
\par        pack  output,  binary data, C source, FORTRAN source, assembler source, nroff/ troff/ eqn/ tbl source troff output, shell
\par        script, C shell script, English text, ASCII text, various executables, APL  workspace,  compiled  terminfo  entries,  and
\par        CURSES screen images. Only those types that are reasonably well specified in POSIX or are directly related to POSIX util-
\par        ities are listed in the table.
\par 
\par        Historical systems have used a "magic file" named /etc/magic to help identify file types. Because it is generally  useful
\par        for users and scripts to be able to identify special file types, the -m flag and a portable format for user-created magic
\par        files has been specified. No requirement is made that an implementation of file use this  method  of  identifying  files,
\par        only that users be permitted to add their own classifying tests.
\par 
\par        In  addition,  three options have been added to historical practice.  The -d flag has been added to permit users to cause
\par        their tests to follow any default system tests. The -i flag has been added to permit users to test portably  for  regular
\par        files in shell scripts. The -M flag has been added to permit users to ignore any default system tests.
\par 
\par        The  IEEE Std 1003.1-2001  description of default system tests and the interaction between the -d, -M, and -m options did
\par        not clearly indicate that there were two types of "default system tests". The "position-sensitive tests'' determine  file
\par        types  by looking for certain string or binary values at specific offsets in the file being examined. These position-sen-
\par        sitive tests were implemented in historical systems using the magic file described above. Some of  these  tests  are  now
\par        built  into the file utility itself on some implementations so the output can provide more detail than can be provided by
\par        magic files. For example, a magic file can easily identify a core file on most implementations, but cannot name the  pro-
\par        gram file that dropped the core. A magic file could produce output such as:
\par               /home/dwc/core: ELF 32-bit MSB core file SPARC Version 1
\par        but by building the test into the file utility, you could get output such as:
\par               /home/dwc/core: ELF 32-bit MSB core file SPARC Version 1, from 'testprog'
\par        These  extended  built-in  tests  are still to be treated as position-sensitive default system tests even if they are not
\par        listed in /etc/magic or any other magic file.
\par 
\par        The context-sensitive default system tests were always built into the file utility. These tests looked for language  con-
\par        structs  in  text  files trying to identify shell scripts, C, FORTRAN, and other computer language source files, and even
\par        plain text files. With the addition of the -m and -M options the distinction between position-sensitive and  context-sen-
\par        sitive  default  system  tests  became  important because the order of testing is important. The context-sensitive system
\par        default tests should never be applied before any position-sensitive tests even if the -d option is specified before a  -m
\par        option or -M option due to the high probability that the context-sensitive system default tests will incorrectly identify
\par        arbitrary text files as text files before position-sensitive tests specified by the -m or -M option would be  applied  to
\par        give a more accurate identification.
\par 
\par        Leaving  the  meaning of -M - and -m - unspecified allows an existing prototype of these options to continue to work in a
\par        backwards-compatible manner. (In that implementation, -M - was roughly equivalent to -d in IEEE Std 1003.1-2001.)
\par 
\par        The historical -c option was omitted as not particularly useful to users or portable shell scripts. In addition,  a  rea-
\par        sonable implementation of the file utility would report any errors found each time the magic file is read.
\par 
\par        The  historical format of the magic file was the same as that specified by the Rationale in the ISO POSIX-2:1993 standard
\par        for the offset, value, and message fields; however, it used less precise type fields than the  format  specified  by  the
\par        current normative text. The new type field values are a superset of the historical ones.
\par 
\par        The following is an example magic file:
\par               0  short     070707              cpio archive
\par               0  short     0143561             Byte-swapped cpio archive
\par               0  string    070707              ASCII cpio archive
\par               0  long      0177555             Very old archive
\par               0  short     0177545             Old archive
\par               0  short     017437              Old packed data
\par               0  string    \\037\\036            Packed data
\par               0  string    \\377\\037            Compacted data
\par               0  string    \\037\\235            Compressed data
\par               >2 byte&0x80 >0                  Block compressed
\par               >2 byte&0x1f x                   %d bits
\par               0  string    \\032\\001            Compiled Terminfo Entry
\par               0  short     0433                Curses screen image
\par               0  short     0434                Curses screen image
\par               0  string    <ar>                System V Release 1 archive
\par               0  string    !<arch>\\n__.SYMDEF  Archive random library
\par               0  string    !<arch>             Archive
\par               0  string    ARF_BEGARF          PHIGS clear text archive
\par               0  long      0x137A2950          Scalable OpenFont binary
\par               0  long      0x137A2951          Encrypted scalable OpenFont binary
\par        The  use  of  a  basic  integer  data type is intended to allow the implementation to choose a word size commonly used by
\par        applications on that architecture.\par}