{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil Arial;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1123715957\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f3\fs24}
\listid176001358}
{\list\listtemplateid1909739656\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f3\fs24}
\listid2129933996}
{\list\listtemplateid140674915\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f3\fs24}
\listid1390163187}
{\list\listtemplateid1967069894\listsimple1
{\listlevel\levelnfc0\leveljc0\li720\fi-360\jclisttab\tx720\levelstartat1{\leveltext\'02\'00.;}{\levelnumbers\'01;}\f3\fs24}
\listid1648501218}
}
{\*\listoverridetable
{\listoverride\listid176001358\listoverridecount0\ls1}
{\listoverride\listid2129933996\listoverridecount0\ls2}
{\listoverride\listid1390163187\listoverridecount0\ls3}
{\listoverride\listid1648501218\listoverridecount0\ls4}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 let
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\b\fs20\cf2 $ help let
\par \plain \f1\fs20\cf2 let: let arg [arg ...]
\par     Evaluate arithmetic expressions.
\par     
\par     Evaluate each ARG as an arithmetic expression.  Evaluation is done in
\par     fixed-width integers with no check for overflow, though division by 0
\par     is trapped and flagged as an error.  The following list of operators is
\par     grouped into levels of equal-precedence operators.  The levels are listed
\par     in order of decreasing precedence.
\par     
\par         id++, id--      variable post-increment, post-decrement
\par         ++id, --id      variable pre-increment, pre-decrement
\par         -, +            unary minus, plus
\par         !, ~            logical and bitwise negation
\par         **              exponentiation
\par         *, /, %         multiplication, division, remainder
\par         +, -            addition, subtraction
\par         <<, >>          left and right bitwise shifts
\par         <=, >=, <, >    comparison
\par         ==, !=          equality, inequality
\par         &               bitwise AND
\par         ^               bitwise XOR
\par         |               bitwise OR
\par         &&              logical AND
\par         ||              logical OR
\par         expr ? expr : expr
\par                         conditional operator
\par         =, *=, /=, %=,
\par         +=, -=, <<=, >>=,
\par         &=, ^=, |=      assignment
\par     
\par     Shell variables are allowed as operands.  The name of the variable
\par     is replaced by its value (coerced to a fixed-width integer) within
\par     an expression.  The variable need not have its integer attribute
\par     turned on to be used in an expression.
\par     
\par     Operators are evaluated in order of precedence.  Sub-expressions in
\par     parentheses are evaluated first and may override the precedence
\par     rules above.
\par     
\par     Exit Status:
\par     If the last ARG evaluates to 0, let returns 1; let returns 0 otherwise..\par}