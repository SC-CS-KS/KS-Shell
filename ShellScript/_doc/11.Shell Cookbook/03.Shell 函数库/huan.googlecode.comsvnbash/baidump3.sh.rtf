{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid524560587\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1673116153}
}
{\*\listoverridetable
{\listoverride\listid1673116153\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 baidump3.sh
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 #! /bin/bash
\par 
\par ## SCRIPT   : baiddump3.sh
\par ## AUTHOR   : huanlf@gmail.com
\par ## VERSION  : 0.1
\par ## LICENCES : GPL v2
\par ## LAST MOD : 2008-05-18 17:29
\par 
\par URL_TOP100='http://list.mp3.baidu.com/list/newhits.html?id=1?top1'
\par URL_TOP500='http://list.mp3.baidu.com/topso/mp3topsong.html?id=1?top2'
\par 
\par TMPDIR=/tmp/bdmp3.$$
\par DESTDIR=~/music/baidu
\par 
\par WGET="wget --timeout 30 --tries=1 --limit-rate=50k"
\par BLACKLIST=~/.myblack_list ## do not download files in blacklist 
\par RM="/bin/rm -f"
\par 
\par CUR_CNT=0
\par 
\par ## reutrn codes
\par SUPPORTED="mp3 wma ogg"
\par DOWNLOAD_OK=0
\par DOWNLOAD_FAIL=1
\par FILE_EXIST=2
\par FILE_IN_BLACK=3
\par FILE_NOT_SUPPORT=4
\par 
\par RED=$(    echo -e "\\e[31;40m" )
\par GREEN=$(  echo -e "\\e[32;40m" )
\par YELLO=$(  echo -e "\\e[33;40m" )
\par BLUE=$(   echo -e "\\e[34;40m" )
\par MAGENTA=$(echo -e "\\e[35;40m" )
\par CYAN=$(   echo -e "\\e[36;40m" )
\par RESET=$(  echo -e "\\e[0m"     )
\par 
\par ## colorful echo
\par msg()  \{ echo "$\{GREEN\}$*$\{RESET\}";   \}
\par rmsg() \{ echo "$\{RED\}$*$\{RESET\}";     \}
\par gmsg() \{ echo "$\{GREEN\}$*$\{RESET\}";   \}
\par ymsg() \{ echo "$\{YELLO\}$*$\{RESET\}";   \}
\par bmsg() \{ echo "$\{BLUE\}$*$\{RESET\}";    \}
\par mmsg() \{ echo "$\{MAGENTA\}$*$\{RESET\}"; \}
\par cmsg() \{ echo "$\{CYAN\}$*$\{RESET\}";    \}
\par 
\par usage()
\par \{
\par     \{
\par         echo "Usage:    $(basename $0) [100|500]"
\par         echo "100:      baidu top100 mp3"
\par         echo "500:      baidu top500 mp3"
\par         echo "default:  500"
\par     \} >&2
\par \}
\par 
\par check_music()
\par \{
\par     local f=$1
\par 
\par     if file "$f" | awk -F: '\{ print $2 \}' |
\par         grep -Eq 'asf|mp3|mpeg|audio'; then
\par         return 0
\par     else
\par         return 1
\par     fi
\par \}
\par 
\par mkdir -p $TMPDIR
\par mkdir -p $DESTDIR 
\par 
\par cd $TMPDIR && rm -rf -- *
\par touch "$BLACKLIST"
\par 
\par download()
\par \{
\par     local file=$1
\par     local line href postfix finallink
\par 
\par     while read line; do
\par         eval "$line" ## href=xxx 
\par         name=$( echo $line | grep -oEm1 '\\[[^]]+\\]' ) ## [%C9%E1%B2%BB%B5%C3+%CF%D2%D7%D3]
\par         ## echo "$name"
\par         filename=$( url_decode "$name" | sed -e 's/\\[//g' -e 's/\\]//' -e  's/\\+/_/'  )
\par         ## echo [$filename]
\par 
\par         $RM 3.html
\par         $WGET -O- "$href" | iconv -f gbk -t utf8 > 3.html | continue
\par         [[ -f 3.html ]] || continue
\par 
\par         ## 3.html: href="http://opp.iuuiu.cn/IU/abcah/fdjacj.mp3"
\par         finallink=$( grep -oEm1 'href="http://.*?"' 3.html )
\par         #echo "final link [$finallink]"
\par         eval "$finallink"    ## href="xxx"
\par 
\par         local t
\par         for t in $SUPPORTED; do
\par             postfix=$( echo $href | grep -Eio "\\.$\{t\}$" ) && break
\par         done
\par 
\par         if [[ -z "$postfix" ]]; then
\par             rmsg "NO. $CUR_CNT: NOT SUPPORTED [$\{href##*.\}] YET ..."
\par             continue
\par             ##return $FILE_NOT_SUPPORT
\par         fi
\par 
\par         if grep -wqF "$filename" "$BLACKLIST"; then
\par             mmsg "NO. $CUR_CNT: [$filename] IN BLACKLIST, IGNORED ..." 
\par             return $FILE_IN_BLACK
\par         fi
\par 
\par         finalname="$\{filename\}$\{postfix\}"
\par 
\par         for t in $SUPPORTED; do
\par             if ls "/$DESTDIR/$filename.$t" &>/dev/null; then
\par                 ymsg "NO. $CUR_CNT: ALREADY DOWNLOADED [$filename.$t]. IGNORED ..."
\par                 return $FILE_EXIST
\par             fi
\par         done
\par 
\par         mmsg "NO. $CUR_CNT: DOWNLOADING [$finalname] VIA [$href] ..."
\par         if $WGET -O "$finalname" "$href"; then
\par             gmsg "SUCCESSFULLY DOWNLOADED [$finalname]" 
\par 
\par             ## make sure we download a song
\par             if ! check_music "$finalname"; then
\par                 rmsg "CHECK FILE TYPE FAILED, TRY TO DOWNLOAD AGAIN ..."
\par                 continue
\par             fi
\par 
\par             mv "$finalname" "$DESTDIR/"
\par             return $DOWNLOAD_OK 
\par         else
\par             rmsg "DOWNLOAD FAILED [$finalname]" 
\par             $RM "$finalname"
\par         fi
\par 
\par     done < $file
\par 
\par     return $DOWNLOAD_FAIL
\par \}
\par 
\par ## ---------------- main ---------------- ##
\par 
\par if ! which url_decode.pl &>/dev/null; then
\par     rmsg "url_decode.pl NOT FOUND, AUTO AUTO DOWNLOADING ..."
\par     mkdir -p ~/bin
\par     if ! wget -O ~/bin/url_decode.pl http://huan.googlecode.com/svn/perl/url_decode.pl; then
\par         rmsg "DOWNLOAD [url_decode.pl] FAILED, ABORTING ..."
\par     fi
\par 
\par     chmod +x ~/bin/url_decode.pl
\par     export PATH=$PATH:~/bin
\par fi
\par 
\par 
\par ## accept positional argv: 100 | 500
\par ## or may called by name: *100.sh | *500.sh 
\par arg=$1
\par 
\par if [[ -n $arg ]]; then
\par     case $arg in
\par     -h|--usage|--help)
\par        usage
\par        exit 1
\par        ;;
\par     100)
\par         URL=$URL_TOP100
\par         ;;
\par     *)
\par         URL=$URL_TOP500
\par         ;;
\par     esac
\par else
\par     case $( basename $0 ) in
\par         *100.sh)
\par             URL=$URL_TOP100
\par             ;;
\par         *)
\par             URL=$URL_TOP500
\par             ;;
\par     esac
\par fi
\par     
\par ## clean tmpdir before exit
\par trap "/bin/rm -rf $TMPDIR; exit" 2 3 1
\par 
\par gmsg "START TO DOWNLOAD SONGS FROM mp3.baidu.com ..."
\par 
\par $RM 1.html
\par $WGET -O- "$URL" | iconv -f gbk -t utf8 |
\par     grep -h -o 'href="http://mp3.baidu.com/m?tn=baidump3&ct=.*</a>$' | 
\par     awk '\{ print $1 \}' > 1.html
\par 
\par if [[ ! -s 1.html ]]; then
\par     rmsg "CAN NOT GET LINKS VIA [$URL] ..." >&2
\par     exit 255
\par fi
\par 
\par ## 1.html:  href="http://mp3.baidu.com/m?tn=baidump3&ct=134217728&lm=-1&li=2&word=%CF%E0%B0%AE%B5%C4%B8%E8+%B0%A2%B6%E4" 
\par 
\par while read line; do
\par     eval "$line"  ## href="xxx"   
\par     keyword=$( echo $line | grep -oE 'ct=[0-9]+' )
\par     ## echo "[$keyword]"
\par     $WGET -O- $href | iconv -f gbk -t utf8 |
\par         grep -oE --color "href=\\"http://.*$\{keywork\}&tn=baidusg.*?\\"[[:space:]]*title" |
\par         awk -F'title' '\{ print $1 \}' > 2.html
\par 
\par     (( CUR_CNT++ ))
\par     download 2.html
\par 
\par     $RM 2.html
\par 
\par     #exit
\par done < 1.html
\par 
\par gmsg "ALL DONE"
\par $RM -rf "$TMPDIR"\par}