{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}{\f4\fnil Arial;}{\f5\fnil\fcharset0 Courier New;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1063610982
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
{\listlevel\levelnfc23\leveljc0\li1080\fi-360\jclisttab\tx1080{\leveltext\'00;}{\levelnumbers;}\f4\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
{\listlevel\levelnfc23\leveljc0\li1440\fi-360\jclisttab\tx1440{\leveltext\'01o;}{\levelnumbers;}\f5\fs24}
\listid252440064}
}
{\*\listoverridetable
{\listoverride\listid252440064\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 04.Shell Command Substitution
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20    Command Substitution
\par        Command substitution allows the output of a command to replace the command name.  There are two forms:
\par 
\par \plain \f1\fs20\cf1               $(command)
\par        or
\par               'command'
\par \plain \f1\fs20 
\par        Bash performs the expansion by executing command and replacing the command substitution with the standard output of the command,  with  any
\par        trailing  newlines  deleted.   Embedded  newlines are not deleted, but they may be removed during word splitting.  The command substitution
\par        $(cat file) can be replaced by the equivalent but fastaer $(< file).
\par 
\par        When the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by $, ', or  \\.   The
\par        first  backquote  not  preceded by a backslash terminates the command substitution.  When using the $(command) form, all characters between
\par        the parentheses make up the command; none are treated specially.
\par 
\par        Command substitutions may be nested.  To nest when using the backquoted form, escape the inner backquotes with backslashes.
\par 
\par        If the substitution appears within double quotes, word splitting and pathname expansion are not performed on the results.\par}