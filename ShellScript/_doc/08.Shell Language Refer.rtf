{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset2 Symbol;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1901932195\listsimple1
{\listlevel\levelnfc23\leveljc0\li720\fi-360\jclisttab\tx720{\leveltext\'01\uc2\u183 \'a1\'a4\uc1;}{\levelnumbers;}\f3\fs24\lang1024}
\listid1476294963}
}
{\*\listoverridetable
{\listoverride\listid1476294963\listoverridecount0\ls1}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 08.Shell Language Refer
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 BASH(1)                                                                                                                                    BASH(1)
\par 
\par NAME
\par \plain \f1\fs20\cf1        bash - GNU Bourne-Again SHell
\par \plain \f1\fs20 
\par SYNOPSIS
\par        bash [options] [file]
\par 
\par COPYRIGHT
\par        Bash is Copyright (C) 1989-2004 by the Free Software Foundation, Inc.
\par 
\par DESCRIPTION
\par        \plain \f1\fs20\cf1 Bash is an sh-compatible command language interpreter that executes commands read from the standard input or from a file.\plain \f1\fs20  \plain \f1\fs20\cf1  Bash also incor-
\par        porates useful features from the Korn and C shells (ksh and csh).
\par 
\par \plain \f1\fs20        Bash is intended to be a conformant implementation of the IEEE POSIX Shell and Tools specification (IEEE Working Group 1003.2).
\par 
\par OPTIONS
\par        In addition to the single-character shell options documented in the description of the set builtin command, bash interprets  the  following
\par        options when it is invoked:
\par 
\par        -c string If  the  -c option is present, then commands are read from string.  If there are arguments after the string, they are assigned to
\par                  the positional parameters, starting with $0.
\par        -i        If the -i option is present, the shell is interactive.
\par        -l        Make bash act as if it had been invoked as a login shell (see INVOCATION below).
\par        -r        If the -r option is present, the shell becomes restricted (see RESTRICTED SHELL below).
\par        -s        If the -s option is present, or if no arguments remain after option processing, then commands are read from the  standard  input.
\par                  This option allows the positional parameters to be set when invoking an interactive shell.
\par        -D        A  list  of  all double-quoted strings preceded by $ is printed on the standard ouput.  These are the strings that are subject to
\par                  language translation when the current locale is not C or POSIX.  This implies the -n option; no commands will be executed.
\par        [-+]O [shopt_option]
\par                  shopt_option is one of the shell options accepted by the shopt builtin (see SHELL BUILTIN COMMANDS below).   If  shopt_option  is
\par                  present,  -O  sets  the  value  of that option; +O unsets it.  If shopt_option is not supplied, the names and values of the shell
\par                  options accepted by shopt are printed on the standard output.  If the invocation option is +O, the output is displayed in a  for-
\par                  mat that may be reused as input.
\par        --        A  -- signals the end of options and disables further option processing.  Any arguments after the -- are treated as filenames and
\par                  arguments.  An argument of - is equivalent to --.
\par 
\par        Bash also interprets a number of multi-character options.  These options must appear  on  the  command  line  before  the  single-character
\par        options to be recognized.
\par 
\par        --debugger
\par               Arrange  for  the debugger profile to be executed before the shell starts.  Turns on extended debugging mode (see the description of
\par               the extdebug option to the shopt builtin below) and shell function tracing (see the description of the -o functrace  option  to  the
\par               set builtin below).
\par        --dump-po-strings
\par               Equivalent to -D, but the output is in the GNU gettext po (portable object) file format.
\par        --dump-strings
\par               Equivalent to -D.
\par        --help Display a usage message on standard output and exit successfully.
\par        --init-file file
\par        --rcfile file
\par               Execute  commands  from file instead of the standard personal initialization file ~/.bashrc if the shell is interactive (see INVOCA-
\par               TION below).
\par 
\par        --login
\par               Equivalent to -l.
\par 
\par        --noediting
\par               Do not use the GNU readline library to read command lines when the shell is interactive.
\par 
\par        --noprofile
\par               Do not read either the system-wide  startup  file  /etc/profile  or  any  of  the  personal  initialization  files  ~/.bash_profile,
\par               ~/.bash_login, or ~/.profile.  By default, bash reads these files when it is invoked as a login shell (see INVOCATION below).
\par 
\par        --norc Do not read and execute the personal initialization file ~/.bashrc if the shell is interactive.  This option is on by default if the
\par               shell is invoked as sh.
\par 
\par        --posix
\par               Change the behavior of bash where the default operation differs from the POSIX 1003.2 standard to match the standard (posix mode).
\par 
\par        --restricted
\par               The shell becomes restricted (see RESTRICTED SHELL below).
\par 
\par        --rpm-requires
\par               Produce the list of files that are required for the shell script to run.  This implies '-n' and is subject to the  same  limitations
\par               as  compile time error checking checking; Backticks, [] tests,  and evals are not parsed so some dependencies may be missed.  --ver-
\par               bose Equivalent to  -v.
\par 
\par        --version
\par               Show version information for this instance of bash on the standard output and exit successfully.
\par 
\par ARGUMENTS
\par        If arguments remain after option processing, and neither the -c nor the -s option has been supplied, the first argument is  assumed  to  be
\par        the  name  of  a file containing shell commands.  If bash is invoked in this fashion, $0 is set to the name of the file, and the positional
\par        parameters are set to the remaining arguments.  Bash reads and executes commands from this file, then exits.  Bash's  exit  status  is  the
\par        exit  status  of  the last command executed in the script.  If no commands are executed, the exit status is 0.  An attempt is first made to
\par        open the file in the current directory, and, if no file is found, then the shell searches the directories in PATH for the script.
\par 
\par INVOCATION
\par        A login shell is one whose first character of argument zero is a -, or one started with the --login option.
\par 
\par        An interactive shell is one started without non-option arguments and without the -c option whose standard input and  error  are  both  con-
\par        nected  to terminals (as determined by isatty(3)), or one started with the -i option.  PS1 is set and $- includes i if bash is interactive,
\par        allowing a shell script or a startup file to test this state.
\par 
\par        The following paragraphs describe how bash executes its startup files.  If any of the files exist but  cannot  be  read,  bash  reports  an
\par        error.  Tildes are expanded in file names as described below under Tilde Expansion in the EXPANSION section.
\par 
\par        When bash is invoked as an interactive login shell, or as a non-interactive shell with the --login option, it first reads and executes com-
\par        mands from the file /etc/profile, if that file exists.  After reading that file, it looks for ~/.bash_profile, ~/.bash_login,  and  ~/.pro-
\par        file,  in  that  order, and reads and executes commands from the first one that exists and is readable.  The --noprofile option may be used
\par        when the shell is started to inhibit this behavior.
\par 
\par        When a login shell exits, bash reads and executes commands from the file ~/.bash_logout, if it exists.
\par 
\par        When an interactive shell that is not a login shell is started, bash reads and executes commands from ~/.bashrc, if that file exists.  This
\par        may  be  inhibited  by using the --norc option.  The --rcfile file option will force bash to read and execute commands from file instead of
\par        ~/.bashrc.
\par 
\par        When bash is started non-interactively, to run a shell script, for example, it looks for the variable BASH_ENV in the environment,  expands
\par        its  value  if  it  appears there, and uses the expanded value as the name of a file to read and execute.  Bash behaves as if the following
\par        command were executed:
\par               if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
\par        but the value of the PATH variable is not used to search for the file name.
\par 
\par        If bash is invoked with the name sh, it tries to mimic the startup behavior of historical versions of sh as closely as possible, while con-
\par        forming  to the POSIX standard as well.  When invoked as an interactive login shell, or a non-interactive shell with the --login option, it
\par        first attempts to read and execute commands from /etc/profile and ~/.profile, in that order.  The --noprofile option may be used to inhibit
\par        this behavior.  When invoked as an interactive shell with the name sh, bash looks for the variable ENV, expands its value if it is defined,
\par        and uses the expanded value as the name of a file to read and execute.  Since a shell invoked as sh does not attempt to  read  and  execute
\par        commands  from  any  other  startup  files,  the  --rcfile option has no effect.  A non-interactive shell invoked with the name sh does not
\par        attempt to read any other startup files.  When invoked as sh, bash enters posix mode after the startup files are read.
\par 
\par        When bash is started in posix mode, as with the --posix command line option, it follows the POSIX standard  for  startup  files.   In  this
\par        mode,  interactive  shells  expand  the ENV variable and commands are read and executed from the file whose name is the expanded value.  No
\par        other startup files are read.
\par 
\par        Bash attempts to determine when it is being run by the remote shell daemon, usually rshd.  If bash determines it is being run by  rshd,  it
\par        reads  and executes commands from ~/.bashrc, if that file exists and is readable.  It will not do this if invoked as sh.  The --norc option
\par        may be used to inhibit this behavior, and the --rcfile option may be used to force another file to be read, but  rshd  does  not  generally
\par        invoke the shell with those options or allow them to be specified.
\par 
\par        If  the  shell  is  started with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied, no
\par        startup files are read, shell functions are not inherited from the environment, the SHELLOPTS variable, if it appears in  the  environment,
\par        is  ignored, and the effective user id is set to the real user id.  If the -p option is supplied at invocation, the startup behavior is the
\par        same, but the effective user id is not reset.
\par 
\par DEFINITIONS
\par        The following definitions are used throughout the rest of this document.
\par        blank  A space or tab.
\par        word   A sequence of characters considered as a single unit by the shell.  Also known as a token.
\par        name   A word consisting only of alphanumeric characters and underscores, and beginning with an  alphabetic  character  or  an  underscore.
\par               Also referred to as an identifier.
\par        metacharacter
\par               A character that, when unquoted, separates words.  One of the following:
\par               |  & ; ( ) < > space tab
\par        control operator
\par               A token that performs a control function.  It is one of the following symbols:
\par               || & && ; ;; ( ) | <newline>
\par 
\par RESERVED WORDS
\par        Reserved words are words that have a special meaning to the shell.  The following words are recognized as reserved when unquoted and either
\par        the first word of a simple command (see SHELL GRAMMAR below) or the third word of a case or for command:
\par 
\par        ! case  do done elif else esac fi for function if in select then until while \{ \} time [[ ]]
\par 
\par SHELL GRAMMAR
\par    Simple Commands
\par        A simple command is a sequence of optional variable assignments followed by blank-separated words and redirections,  and  terminated  by  a
\par        control  operator.  The first word specifies the command to be executed, and is passed as argument zero.  The remaining words are passed as
\par        arguments to the invoked command.
\par 
\par        The return value of a simple command is its exit status, or 128+n if the command is terminated by signal n.
\par 
\par    Pipelines
\par        A pipeline is a sequence of one or more commands separated by the character |.  The format for a pipeline is:
\par 
\par               [time [-p]] [ ! ] command [ | command2 ... ]
\par 
\par        The standard output of command is connected via a pipe to the standard input of command2.  This connection is performed before any redirec-
\par        tions specified by the command (see REDIRECTION below).
\par 
\par        The return status of a pipeline is the exit status of the last command, unless the pipefail option is enabled.  If pipefail is enabled, the
\par        pipeline's return status is the value of the last (rightmost) command to exit with a non-zero status, or zero if all commands exit success-
\par        fully.   If  the  reserved  word  !   precedes  a  pipeline, the exit status of that pipeline is the logical negation of the exit status as
\par        described above.  The shell waits for all commands in the pipeline to terminate before returning a value.
\par 
\par        If the time reserved word precedes a pipeline, the elapsed as well as user and system time consumed by its execution are reported when  the
\par        pipeline  terminates.   The -p option changes the output format to that specified by POSIX.  The TIMEFORMAT variable may be set to a format
\par        string that specifies how the timing information should be displayed; see the description of TIMEFORMAT under Shell Variables below.
\par 
\par        Each command in a pipeline is executed as a separate process (i.e., in a subshell).
\par 
\par    Lists
\par        A list is a sequence of one or more pipelines separated by one of the operators ;, &, &&, or ||, and optionally terminated by one of ;,  &,
\par        or <newline>.
\par 
\par        Of these list operators, && and || have equal precedence, followed by ; and &, which have equal precedence.
\par 
\par        A sequence of one or more newlines may appear in a list instead of a semicolon to delimit commands.
\par 
\par        If  a  command is terminated by the control operator &, the shell executes the command in the background in a subshell.  The shell does not
\par        wait for the command to finish, and the return status is 0.  Commands separated by a ; are executed sequentially; the shell waits for  each
\par        command to terminate in turn.  The return status is the exit status of the last command executed.
\par 
\par        The control operators && and || denote AND lists and OR lists, respectively.  An AND list has the form
\par 
\par               command1 && command2
\par 
\par        command2 is executed if, and only if, command1 returns an exit status of zero.
\par 
\par        An OR list has the form
\par 
\par               command1 || command2
\par 
\par        command2  is  executed if and only if command1 returns a non-zero exit status.  The return status of AND and OR lists is the exit status of
\par        the last command executed in the list.
\par 
\par    Compound Commands
\par        A compound command is one of the following:
\par 
\par        (list) list is executed in a subshell environment (see COMMAND EXECUTION ENVIRONMENT below).  Variable  assignments  and  builtin  commands
\par               that  affect  the  shell's environment do not remain in effect after the command completes.  The return status is the exit status of
\par               list.
\par 
\par        \{ list; \}
\par               list is simply executed in the current shell environment.  list must be terminated with a newline or semicolon.  This is known as  a
\par               group  command.   The  return  status is the exit status of list.  Note that unlike the metacharacters ( and ), \{ and \} are reserved
\par               words and must occur where a reserved word is permitted to be recognized.  Since they do not cause a word break, they must be  sepa-
\par               rated from list by whitespace.
\par 
\par        ((expression))
\par               The  expression  is evaluated according to the rules described below under ARITHMETIC EVALUATION.  If the value of the expression is
\par               non-zero, the return status is 0; otherwise the return status is 1.  This is exactly equivalent to let "expression".
\par 
\par        [[ expression ]]
\par               Return a status of 0 or 1 depending on the evaluation of the conditional expression expression.  Expressions  are  composed  of  the
\par               primaries  described  below  under  CONDITIONAL  EXPRESSIONS.   Word splitting and pathname expansion are not performed on the words
\par               between the [[ and ]]; tilde expansion, parameter and variable expansion, arithmetic expansion, command substitution,  process  sub-
\par               stitution, and quote removal are performed.  Conditional operators such as -f must be unquoted to be recognized as primaries.
\par 
\par               When  the == and != operators are used, the string to the right of the operator is considered a pattern and matched according to the
\par               rules described below under Pattern Matching.  The return value is 0 if the string matches or does not match  the  pattern,  respec-
\par               tively, and 1 otherwise.  Any part of the pattern may be quoted to force it to be matched as a string.
\par 
\par               An additional binary operator, =~, is available, with the same precedence as == and !=.  When it is used, the string to the right of
\par               the operator is considered an extended regular expression and matched accordingly (as in regex(3)).  The return value is  0  if  the
\par               string  matches  the  pattern,  and 1 otherwise.  If the regular expression is syntactically incorrect, the conditional expression's
\par               return value is 2.  If the shell option nocaseglob is enabled, the match is performed without regard to the case of alphabetic char-
\par               acters.   Substrings  matched  by  parenthesized  subexpressions  within  the  regular  expression  are  saved in the array variable
\par               BASH_REMATCH.  The element of BASH_REMATCH with index 0 is the portion of the string matching the entire  regular  expression.   The
\par               element of BASH_REMATCH with index n is the portion of the string matching the nth parenthesized subexpression.
\par 
\par               Expressions may be combined using the following operators, listed in decreasing order of precedence:
\par 
\par               ( expression )
\par                      Returns the value of expression.  This may be used to override the normal precedence of operators.
\par               ! expression
\par                      True if expression is false.
\par               expression1 && expression2
\par                      True if both expression1 and expression2 are true.
\par               expression1 || expression2
\par                      True if either expression1 or expression2 is true.
\par 
\par               The  &&  and || operators do not evaluate expression2 if the value of expression1 is sufficient to determine the return value of the
\par               entire conditional expression.
\par 
\par        for name [ in word ] ; do list ; done
\par               The list of words following in is expanded, generating a list of items.  The variable name is set to each element of  this  list  in
\par               turn,  and  list is executed each time.  If the in word is omitted, the for command executes list once for each positional parameter
\par               that is set (see PARAMETERS below).  The return status is the exit status of the last command that executes.  If  the  expansion  of
\par               the items following in results in an empty list, no commands are executed, and the return status is 0.
\par 
\par        for (( expr1 ; expr2 ; expr3 )) ; do list ; done
\par               First,  the arithmetic expression expr1 is evaluated according to the rules described below under ARITHMETIC EVALUATION.  The arith-
\par               metic expression expr2 is then evaluated repeatedly until it evaluates to zero.  Each time expr2 evaluates to a non-zero value, list
\par               is  executed  and  the  arithmetic expression expr3 is evaluated.  If any expression is omitted, it behaves as if it evaluates to 1.
\par               The return value is the exit status of the last command in list that is executed, or false if any of the expressions is invalid.
\par 
\par        select name [ in word ] ; do list ; done
\par               The list of words following in is expanded, generating a list of items.  The set of expanded words is printed on the standard error,
\par               each preceded by a number.  If the in word is omitted, the positional parameters are printed (see PARAMETERS below).  The PS3 prompt
\par               is then displayed and a line read from the standard input.  If the line consists of a number corresponding to one of  the  displayed
\par               words, then the value of name is set to that word.  If the line is empty, the words and prompt are displayed again.  If EOF is read,
\par               the command completes.  Any other value read causes name to be set to null.  The line read is saved in the variable REPLY.  The list
\par               is  executed  after each selection until a break command is executed.  The exit status of select is the exit status of the last com-
\par               mand executed in list, or zero if no commands were executed.
\par 
\par        case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac
\par               A case command first expands word, and tries to match it against each pattern in turn, using the same matching rules as for pathname
\par               expansion  (see  Pathname  Expansion  below).  When a match is found, the corresponding list is executed.  After the first match, no
\par               subsequent matches are attempted.  The exit status is zero if no pattern matches.  Otherwise, it is the exit status of the last com-
\par               mand executed in list.
\par 
\par        if list; then list; [ elif list; then list; ] ... [ else list; ] fi
\par               The if list is executed.  If its exit status is zero, the then list is executed.  Otherwise, each elif list is executed in turn, and
\par               if its exit status is zero, the corresponding then list is executed and the command completes.  Otherwise, the  else  list  is  exe-
\par               cuted, if present.  The exit status is the exit status of the last command executed, or zero if no condition tested true.
\par 
\par        while list; do list; done
\par        until list; do list; done
\par               The  while  command continuously executes the do list as long as the last command in list returns an exit status of zero.  The until
\par               command is identical to the while command, except that the test is negated; the do list is executed as long as the last  command  in
\par               list returns a non-zero exit status.  The exit status of the while and until commands is the exit status of the last do list command
\par               executed, or zero if none was executed.
\par 
\par    Shell Function Definitions
\par        A shell function is an object that is called like a simple command and executes a compound command with a new set of positional parameters.
\par        Shell functions are declared as follows:
\par 
\par        [ function ] name () compound-command [redirection]
\par               This  defines a function named name.  The reserved word function is optional.  If the function reserved word is supplied, the paren-
\par               theses are optional.  The body of the function is the compound command compound-command (see Compound Commands above).  That command
\par               is  usually  a  list  of commands between \{ and \}, but may be any command listed under Compound Commands above.  compound-command is
\par               executed whenever name is specified as the name of a simple command.  Any redirections (see  REDIRECTION  below)  specified  when  a
\par               function  is  defined are performed when the function is executed.  The exit status of a function definition is zero unless a syntax
\par               error occurs or a readonly function with the same name already exists.  When executed, the exit status of a  function  is  the  exit
\par               status of the last command executed in the body.  (See FUNCTIONS below.)
\par 
\par COMMENTS
\par        In  a  non-interactive  shell,  or an interactive shell in which the interactive_comments option to the shopt builtin is enabled (see SHELL
\par        BUILTIN COMMANDS below), a word beginning with # causes that word and all remaining characters on that line to be ignored.  An  interactive
\par        shell  without the interactive_comments option enabled does not allow comments.  The interactive_comments option is on by default in inter-
\par        active shells.
\par 
\par QUOTING
\par        Quoting is used to remove the special meaning of certain characters or words to the shell.  Quoting can be used to disable  special  treat-
\par        ment for special characters, to prevent reserved words from being recognized as such, and to prevent parameter expansion.
\par 
\par        Each of the metacharacters listed above under DEFINITIONS has special meaning to the shell and must be quoted if it is to represent itself.
\par 
\par        When the command history expansion facilities are being used, the history expansion character, usually !, must be quoted to prevent history
\par        expansion.
\par 
\par        There are three quoting mechanisms: the escape character, single quotes, and double quotes.
\par 
\par        A  non-quoted backslash (\\) is the escape character.  It preserves the literal value of the next character that follows, with the exception
\par        of <newline>.  If a \\<newline> pair appears, and the backslash is not itself quoted, the \\<newline> is treated as a line continuation (that
\par        is, it is removed from the input stream and effectively ignored).
\par 
\par        Enclosing  characters  in  single  quotes  preserves  the  literal value of each character within the quotes.  A single quote may not occur
\par        between single quotes, even when preceded by a backslash.
\par 
\par        Enclosing characters in double quotes preserves the literal value of all characters within the quotes, with the exception of $, ',  and  \\.
\par        The  characters $ and ' retain their special meaning within double quotes.  The backslash retains its special meaning only when followed by
\par        one of the following characters: $, ', ", \\, or <newline>.  A double quote may be quoted within double quotes by preceding it with a  back-
\par        slash.  When command history is being used, the double quote may not be used to quote the history expansion character.
\par 
\par        The special parameters * and @ have special meaning when in double quotes (see PARAMETERS below).
\par 
\par        Words  of  the form $'string' are treated specially.  The word expands to string, with backslash-escaped characters replaced as specifed by
\par        the ANSI C standard.  Backslash escape sequences, if present, are decoded as follows:
\par               \\a     alert (bell)
\par               \\b     backspace
\par               \\e     an escape character
\par               \\f     form feed
\par               \\n     new line
\par               \\r     carriage return
\par               \\t     horizontal tab
\par               \\v     vertical tab
\par               \\\\     backslash
\par               \\'     single quote
\par               \\nnn   the eight-bit character whose value is the octal value nnn (one to three digits)
\par               \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
\par               \\cx    a control-x character
\par 
\par        The expanded result is single-quoted, as if the dollar sign had not been present.
\par 
\par        A double-quoted string preceded by a dollar sign ($) will cause the string to be translated according to the current locale.  If  the  cur-
\par        rent locale is C or POSIX, the dollar sign is ignored.  If the string is translated and replaced, the replacement is double-quoted.
\par 
\par PARAMETERS
\par        A  parameter  is  an  entity  that  stores values.  It can be a name, a number, or one of the special characters listed below under Special
\par        Parameters.  A variable is a parameter denoted by a name.  A variable has a value and zero or more  attributes.   Attributes  are  assigned
\par        using the declare builtin command (see declare below in SHELL BUILTIN COMMANDS).
\par 
\par        A  parameter  is  set  if it has been assigned a value.  The null string is a valid value.  Once a variable is set, it may be unset only by
\par        using the unset builtin command (see SHELL BUILTIN COMMANDS below).
\par 
\par        A variable may be assigned to by a statement of the form
\par 
\par               name=[value]
\par 
\par        If value is not given, the variable is assigned the null string.  All values undergo tilde expansion,  parameter  and  variable  expansion,
\par        command  substitution,  arithmetic expansion, and quote removal (see EXPANSION below).  If the variable has its integer attribute set, then
\par        value is evaluated as an arithmetic expression even if the $((...)) expansion is not used (see Arithmetic Expansion below).  Word splitting
\par        is not performed, with the exception of "$@" as explained below under Special Parameters.  Pathname expansion is not performed.  Assignment
\par        statements may also appear as arguments to the alias, declare, typeset, export, readonly, and local builtin commands.
\par 
\par    Positional Parameters
\par        A positional parameter is a parameter denoted by one or more digits, other than the single digit 0.   Positional  parameters  are  assigned
\par        from  the  shell's  arguments  when  it  is invoked, and may be reassigned using the set builtin command.  Positional parameters may not be
\par        assigned to with assignment statements.  The positional parameters are temporarily replaced when a shell function is  executed  (see  FUNC-
\par        TIONS below).
\par 
\par        When a positional parameter consisting of more than a single digit is expanded, it must be enclosed in braces (see EXPANSION below).
\par 
\par    Special Parameters
\par        The shell treats several parameters specially.  These parameters may only be referenced; assignment to them is not allowed.
\par        *      Expands  to  the  positional  parameters, starting from one.  When the expansion occurs within double quotes, it expands to a single
\par               word with the value of each parameter separated by the first character of the IFS special variable.  That is, "$*" is equivalent  to
\par               "$1c$2c...",  where  c  is  the  first character of the value of the IFS variable.  If IFS is unset, the parameters are separated by
\par               spaces.  If IFS is null, the parameters are joined without intervening separators.
\par        @      Expands to the positional parameters, starting from one.  When the expansion occurs within double quotes, each parameter expands  to
\par               a separate word.  That is, "$@" is equivalent to "$1" "$2" ...  When there are no positional parameters, "$@" and $@ expand to noth-
\par               ing (i.e., they are removed).
\par        #      Expands to the number of positional parameters in decimal.
\par        ?      Expands to the status of the most recently executed foreground pipeline.
\par        -      Expands to the current option flags as specified upon invocation, by the set builtin command, or those set by the shell itself (such
\par               as the -i option).
\par        $      Expands to the process ID of the shell.  In a () subshell, it expands to the process ID of the current shell, not the subshell.
\par        !      Expands to the process ID of the most recently executed background (asynchronous) command.
\par        0      Expands to the name of the shell or shell script.  This is set at shell initialization.  If bash is invoked with a file of commands,
\par               $0 is set to the name of that file.  If bash is started with the -c option, then $0 is set to the first argument after the string to
\par               be executed, if one is present.  Otherwise, it is set to the file name used to invoke bash, as given by argument zero.
\par        _      At  shell startup, set to the absolute file name of the shell or shell script being executed as passed in the argument list.  Subse-
\par               quently, expands to the last argument to the previous command, after expansion.  Also set to the full file name of each command exe-
\par               cuted  and  placed  in the environment exported to that command.  When checking mail, this parameter holds the name of the mail file
\par               currently being checked.
\par 
\par    Shell Variables
\par        The following variables are set by the shell:
\par 
\par        BASH   Expands to the full file name used to invoke this instance of bash.
\par        BASH_ARGC
\par               An array variable whose values are the number of parameters in each frame of the current bash execution call stack.  The  number  of
\par               parameters  to  the current subroutine (shell function or script executed with . or source) is at the top of the stack.  When a sub-
\par               routine is executed, the number of parameters passed is pushed onto BASH_ARGC.
\par        BASH_ARGV
\par               An array variable containing all of the parameters in the current bash execution call stack.  The final parameter of the  last  sub-
\par               routine  call  is at the top of the stack; the first parameter of the initial call is at the bottom.  When a subroutine is executed,
\par               the parameters supplied are pushed onto BASH_ARGV.
\par        BASH_COMMAND
\par               The command currently being executed or about to be executed, unless the shell is executing a command as the result of  a  trap,  in
\par               which case it is the command executing at the time of the trap.
\par        BASH_EXECUTION_STRING
\par               The command argument to the -c invocation option.
\par        BASH_LINENO
\par               An  array  variable  whose  members  are  the  line  numbers  in  source  files  corresponding  to  each  member  of @var\{FUNCNAME\}.
\par               $\{BASH_LINENO[$i]\} is the line number in the source file where $\{FUNCNAME[$i + 1]\} was called.  The corresponding source  file  name
\par               is $\{BASH_SOURCE[$i + 1]\}.  Use LINENO to obtain the current line number.
\par        BASH_REMATCH
\par               An  array  variable whose members are assigned by the =~ binary operator to the [[ conditional command.  The element with index 0 is
\par               the portion of the string matching the entire regular expression.  The element with index n is the portion of  the  string  matching
\par               the nth parenthesized subexpression.  This variable is read-only.
\par        BASH_SOURCE
\par               An array variable whose members are the source filenames corresponding to the elements in the FUNCNAME array variable.
\par        BASH_SUBSHELL
\par               Incremented by one each time a subshell or subshell environment is spawned.  The initial value is 0.
\par        BASH_VERSINFO
\par               A  readonly  array variable whose members hold version information for this instance of bash.  The values assigned to the array mem-
\par               bers are as follows:
\par               BASH_VERSINFO[0]        The major version number (the release).
\par               BASH_VERSINFO[1]        The minor version number (the version).
\par               BASH_VERSINFO[2]        The patch level.
\par               BASH_VERSINFO[3]        The build version.
\par               BASH_VERSINFO[4]        The release status (e.g., beta1).
\par               BASH_VERSINFO[5]        The value of MACHTYPE.
\par 
\par        BASH_VERSION
\par               Expands to a string describing the version of this instance of bash.
\par 
\par        COMP_CWORD
\par               An index into $\{COMP_WORDS\} of the word containing the current cursor position.  This variable is available only in shell  functions
\par               invoked by the programmable completion facilities (see Programmable Completion below).
\par 
\par        COMP_LINE
\par               The current command line.  This variable is available only in shell functions and external commands invoked by the programmable com-
\par               pletion facilities (see Programmable Completion below).
\par 
\par        COMP_POINT
\par               The index of the current cursor position relative to the beginning of the current command.  If the current cursor position is at the
\par               end  of  the  current command, the value of this variable is equal to $\{#COMP_LINE\}.  This variable is available only in shell func-
\par               tions and external commands invoked by the programmable completion facilities (see Programmable Completion below).
\par 
\par        COMP_WORDBREAKS
\par               The set of characters that the Readline library treats as word separators when performing word completion.   If  COMP_WORDBREAKS  is
\par               unset, it loses its special properties, even if it is subsequently reset.
\par 
\par        COMP_WORDS
\par               An  array  variable  (see  Arrays below) consisting of the individual words in the current command line.  This variable is available
\par               only in shell functions invoked by the programmable completion facilities (see Programmable Completion below).
\par 
\par        DIRSTACK
\par               An array variable (see Arrays below) containing the current contents of the directory stack.  Directories appear in the stack in the
\par               order they are displayed by the dirs builtin.  Assigning to members of this array variable may be used to modify directories already
\par               in the stack, but the pushd and popd builtins must be used to add and remove directories.  Assignment  to  this  variable  will  not
\par               change the current directory.  If DIRSTACK is unset, it loses its special properties, even if it is subsequently reset.
\par 
\par        EUID   Expands to the effective user ID of the current user, initialized at shell startup.  This variable is readonly.
\par 
\par        FUNCNAME
\par               An  array  variable  containing the names of all shell functions currently in the execution call stack.  The element with index 0 is
\par               the name of any currently-executing shell function.  The bottom-most element is "main".  This variable  exists  only  when  a  shell
\par               function  is executing.  Assignments to FUNCNAME have no effect and return an error status.  If FUNCNAME is unset, it loses its spe-
\par               cial properties, even if it is subsequently reset.
\par 
\par        GROUPS An array variable containing the list of groups of which the current user is a member.  Assignments to GROUPS  have  no  effect  and
\par               return an error status.  If GROUPS is unset, it loses its special properties, even if it is subsequently reset.
\par 
\par        HISTCMD
\par               The  history  number,  or  index in the history list, of the current command.  If HISTCMD is unset, it loses its special properties,
\par               even if it is subsequently reset.
\par 
\par        HOSTNAME
\par               Automatically set to the name of the current host.
\par 
\par        HOSTTYPE
\par               Automatically set to a string that uniquely describes the type of machine on which bash is executing.  The default is  system-depen-
\par               dent.
\par 
\par        LINENO Each  time  this  parameter  is  referenced,  the shell substitutes a decimal number representing the current sequential line number
\par               (starting with 1) within a script or function.  When not in a script or function, the value substituted  is  not  guaranteed  to  be
\par               meaningful.  If LINENO is unset, it loses its special properties, even if it is subsequently reset.
\par 
\par        MACHTYPE
\par               Automatically  set to a string that fully describes the system type on which bash is executing, in the standard GNU cpu-company-sys-
\par               tem format.  The default is system-dependent.
\par 
\par        OLDPWD The previous working directory as set by the cd command.
\par 
\par        OPTARG The value of the last option argument processed by the getopts builtin command (see SHELL BUILTIN COMMANDS below).
\par 
\par        OPTIND The index of the next argument to be processed by the getopts builtin command (see SHELL BUILTIN COMMANDS below).
\par 
\par        OSTYPE Automatically set to a string that describes the operating system on which bash is executing.  The default is system-dependent.
\par 
\par        PIPESTATUS
\par               An array variable (see Arrays below) containing a list of exit status values from the processes in the most-recently-executed  fore-
\par               ground pipeline (which may contain only a single command).
\par 
\par        PPID   The process ID of the shell's parent.  This variable is readonly.
\par 
\par        PWD    The current working directory as set by the cd command.
\par 
\par        RANDOM Each  time  this  parameter is referenced, a random integer between 0 and 32767 is generated.  The sequence of random numbers may be
\par               initialized by assigning a value to RANDOM.  If RANDOM is unset, it loses its special properties, even if it is subsequently  reset.
\par 
\par        REPLY  Set to the line of input read by the read builtin command when no arguments are supplied.
\par 
\par        SECONDS
\par               Each  time  this  parameter is referenced, the number of seconds since shell invocation is returned.  If a value is assigned to SEC-
\par               ONDS, the value returned upon subsequent references is the number of seconds since the assignment plus the value assigned.  If  SEC-
\par               ONDS is unset, it loses its special properties, even if it is subsequently reset.
\par 
\par        SHELLOPTS
\par               A  colon-separated  list  of  enabled shell options.  Each word in the list is a valid argument for the -o option to the set builtin
\par               command (see SHELL BUILTIN COMMANDS below).  The options appearing in SHELLOPTS are those reported as on by set -o.  If  this  vari-
\par               able  is  in  the  environment  when bash starts up, each shell option in the list will be enabled before reading any startup files.
\par               This variable is read-only.
\par 
\par        SHLVL  Incremented by one each time an instance of bash is started.
\par 
\par        UID    Expands to the user ID of the current user, initialized at shell startup.  This variable is readonly.
\par 
\par        The following variables are used by the shell.  In some cases, bash assigns a default value to a variable; these cases are noted below.
\par 
\par        BASH_ENV
\par               If this parameter is set when bash is executing a shell script, its value is interpreted as a filename containing commands  to  ini-
\par               tialize the shell, as in ~/.bashrc.  The value of BASH_ENV is subjected to parameter expansion, command substitution, and arithmetic
\par               expansion before being interpreted as a file name.  PATH is not used to search for the resultant file name.
\par        CDPATH The search path for the cd command.  This is a colon-separated list of directories in which the shell looks for destination directo-
\par               ries specified by the cd command.  A sample value is ".:~:/usr".
\par        COLUMNS
\par               Used by the select builtin command to determine the terminal width when printing selection lists.  Automatically set upon receipt of
\par               a SIGWINCH.
\par        COMPREPLY
\par               An array variable from which bash reads the possible completions generated by a shell function invoked by the  programmable  comple-
\par               tion facility (see Programmable Completion below).
\par        EMACS  If  bash  finds  this  variable  in the environment when the shell starts with value "t", it assumes that the shell is running in an
\par               emacs shell buffer and disables line editing.
\par        FCEDIT The default editor for the fc builtin command.
\par        FIGNORE
\par               A colon-separated list of suffixes to ignore when performing filename completion (see READLINE  below).   A  filename  whose  suffix
\par               matches one of the entries in FIGNORE is excluded from the list of matched filenames.  A sample value is ".o:~".
\par        GLOBIGNORE
\par               A  colon-separated  list  of patterns defining the set of filenames to be ignored by pathname expansion.  If a filename matched by a
\par               pathname expansion pattern also matches one of the patterns in GLOBIGNORE, it is removed from the list of matches.
\par        HISTCONTROL
\par               A colon-separated list of values controlling how commands are saved on the history list.  If the list of  values  includes  ignores-
\par               pace,  lines  which begin with a space character are not saved in the history list.  A value of ignoredups causes lines matching the
\par               previous history entry to not be saved.  A value of ignoreboth is shorthand for ignorespace and ignoredups.  A  value  of  erasedups
\par               causes all previous lines matching the current line to be removed from the history list before that line is saved.  Any value not in
\par               the above list is ignored.  If HISTCONTROL is unset, or does not include a valid value, all lines read by the shell parser are saved
\par               on  the  history list, subject to the value of HISTIGNORE.  The second and subsequent lines of a multi-line compound command are not
\par               tested, and are added to the history regardless of the value of HISTCONTROL.
\par        HISTFILE
\par               The name of the file in which command history is saved (see HISTORY below).  The default value is ~/.bash_history.   If  unset,  the
\par               command history is not saved when an interactive shell exits.
\par        HISTFILESIZE
\par               The  maximum  number of lines contained in the history file.  When this variable is assigned a value, the history file is truncated,
\par               if necessary, to contain no more than that number of lines.  The default value is 500.  The history file is also truncated  to  this
\par               size after writing it when an interactive shell exits.
\par        HISTIGNORE
\par               A colon-separated list of patterns used to decide which command lines should be saved on the history list.  Each pattern is anchored
\par               at the beginning of the line and must match the complete line (no implicit '*' is appended).  Each pattern  is  tested  against  the
\par               line  after  the  checks  specified  by  HISTCONTROL  are applied.  In addition to the normal shell pattern matching characters, '&'
\par               matches the previous history line.  '&' may be escaped using a backslash; the backslash is removed before attempting a  match.   The
\par               second and subsequent lines of a multi-line compound command are not tested, and are added to the history regardless of the value of
\par               HISTIGNORE.
\par        HISTSIZE
\par               The number of commands to remember in the command history (see HISTORY below).  The default value is 500.
\par        HISTTIMEFORMAT
\par               If this variable is set and not null, its value is used as a format string for strftime(3) to print the time stamp  associated  with
\par               each  history  entry displayed by the history builtin.  If this variable is set, time stamps are written to the history file so they
\par               may be preserved across shell sessions.
\par        HOME   The home directory of the current user; the default argument for the cd builtin command.  The value of this variable  is  also  used
\par               when performing tilde expansion.
\par        HOSTFILE
\par               Contains  the  name of a file in the same format as /etc/hosts that should be read when the shell needs to complete a hostname.  The
\par               list of possible hostname completions may be changed while the shell is running; the next  time  hostname  completion  is  attempted
\par               after the value is changed, bash adds the contents of the new file to the existing list.  If HOSTFILE is set, but has no value, bash
\par               attempts to read /etc/hosts to obtain the list of possible hostname completions.  When HOSTFILE  is  unset,  the  hostname  list  is
\par               cleared.
\par        IFS    The  Internal  Field  Separator  that is used for word splitting after expansion and to split lines into words with the read builtin
\par               command.  The default value is ''<space><tab><newline>''.
\par        IGNOREEOF
\par               Controls the action of an interactive shell on receipt of an EOF character as the sole input.  If set, the value is  the  number  of
\par               consecutive  EOF  characters which must be typed as the first characters on an input line before bash exits.  If the variable exists
\par               but does not have a numeric value, or has no value, the default value is 10.  If it does not exist, EOF signifies the end  of  input
\par               to the shell.
\par        INPUTRC
\par               The filename for the readline startup file, overriding the default of ~/.inputrc (see READLINE below).
\par        LANG   Used to determine the locale category for any category not specifically selected with a variable starting with LC_.
\par        LC_ALL This variable overrides the value of LANG and any other LC_ variable specifying a locale category.
\par        LC_COLLATE
\par               This  variable  determines  the  collation order used when sorting the results of pathname expansion, and determines the behavior of
\par               range expressions, equivalence classes, and collating sequences within pathname expansion and pattern matching.
\par        LC_CTYPE
\par               This variable determines the interpretation of characters and the behavior of character classes within pathname expansion  and  pat-
\par               tern matching.
\par        LC_MESSAGES
\par               This variable determines the locale used to translate double-quoted strings preceded by a $.
\par        LC_NUMERIC
\par               This variable determines the locale category used for number formatting.
\par        LINES  Used by the select builtin command to determine the column length for printing selection lists.  Automatically set upon receipt of a
\par               SIGWINCH.
\par        MAIL   If this parameter is set to a file name and the MAILPATH variable is not set, bash informs the user of the arrival of  mail  in  the
\par               specified file.
\par        MAILCHECK
\par               Specifies  how  often  (in  seconds) bash checks for mail.  The default is 60 seconds.  When it is time to check for mail, the shell
\par               does so before displaying the primary prompt.  If this variable is unset, or set to a value that is not a  number  greater  than  or
\par               equal to zero, the shell disables mail checking.
\par        MAILPATH
\par               A  colon-separated  list of file names to be checked for mail.  The message to be printed when mail arrives in a particular file may
\par               be specified by separating the file name from the message with a '?'.  When used in the text of the message, $_ expands to the  name
\par               of the current mailfile.  Example:
\par               MAILPATH='/var/mail/bfox?"You have mail":~/shell-mail?"$_ has mail!"'
\par               Bash  supplies  a  default  value for this variable, but the location of the user mail files that it uses is system dependent (e.g.,
\par               /var/mail/$USER).
\par        OPTERR If set to the value 1, bash displays error messages generated by the getopts builtin command (see  SHELL  BUILTIN  COMMANDS  below).
\par               OPTERR is initialized to 1 each time the shell is invoked or a shell script is executed.
\par        PATH   The search path for commands.  It is a colon-separated list of directories in which the shell looks for commands (see COMMAND EXECU-
\par               TION below).  A zero-length (null) directory name in the value of PATH indicates the current directory.  A null directory  name  may
\par               appear as two adjacent colons, or as an initial or trailing colon.  The default path is system-dependent, and is set by the adminis-
\par               trator who installs bash.  A common value is ''/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin''.
\par        POSIXLY_CORRECT
\par               If this variable is in the environment when bash starts, the shell enters posix mode before reading the startup  files,  as  if  the
\par               --posix  invocation  option  had been supplied.  If it is set while the shell is running, bash enables posix mode, as if the command
\par               set -o posix had been executed.
\par        PROMPT_COMMAND
\par               If set, the value is executed as a command prior to issuing each primary prompt.
\par        PS1    The value of this parameter is expanded (see PROMPTING below) and used as the primary prompt string.  The default value is ''\\s-\\v\\$
\par               ''.
\par        PS2    The value of this parameter is expanded as with PS1 and used as the secondary prompt string.  The default is ''> ''.
\par        PS3    The value of this parameter is used as the prompt for the select command (see SHELL GRAMMAR above).
\par        PS4    The  value  of this parameter is expanded as with PS1 and the value is printed before each command bash displays during an execution
\par               trace.  The first character of PS4 is replicated multiple times, as necessary, to indicate  multiple  levels  of  indirection.   The
\par               default is ''+ ''.
\par        SHELL  The full pathname to the shell is kept in this environment variable.  If it is not set when the shell starts, bash assigns to it the
\par               full pathname of the current user's login shell.
\par        TIMEFORMAT
\par               The value of this parameter is used as a format string specifying how the timing information for pipelines prefixed  with  the  time
\par               reserved word should be displayed.  The % character introduces an escape sequence that is expanded to a time value or other informa-
\par               tion.  The escape sequences and their meanings are as follows; the braces denote optional portions.
\par               %%        A literal %.
\par               %[p][l]R  The elapsed time in seconds.
\par               %[p][l]U  The number of CPU seconds spent in user mode.
\par               %[p][l]S  The number of CPU seconds spent in system mode.
\par               %P        The CPU percentage, computed as (%U + %S) / %R.
\par 
\par               The optional p is a digit specifying the precision, the number of fractional digits after a decimal point.  A value of 0  causes  no
\par               decimal  point  or fraction to be output.  At most three places after the decimal point may be specified; values of p greater than 3
\par               are changed to 3.  If p is not specified, the value 3 is used.
\par 
\par               The optional l specifies a longer format, including minutes, of the form MMmSS.FFs.  The value of p determines whether  or  not  the
\par               fraction is included.
\par 
\par               If this variable is not set, bash acts as if it had the value $'\\nreal\\t%3lR\\nuser\\t%3lU\\nsys%3lS'.  If the value is null, no timing
\par               information is displayed.  A trailing newline is added when the format string is displayed.
\par 
\par        TMOUT  If set to a value greater than zero, TMOUT is treated as the default timeout for the read builtin.  The select command terminates if
\par               input  does  not arrive after TMOUT seconds when input is coming from a terminal.  In an interactive shell, the value is interpreted
\par               as the number of seconds to wait for input after issuing the primary prompt.  Bash terminates after waiting for that number of  sec-
\par               onds if input does not arrive.
\par 
\par        auto_resume
\par               This  variable controls how the shell interacts with the user and job control.  If this variable is set, single word simple commands
\par               without redirections are treated as candidates for resumption of an existing stopped job.  There is no ambiguity allowed;  if  there
\par               is  more  than  one  job beginning with the string typed, the job most recently accessed is selected.  The name of a stopped job, in
\par               this context, is the command line used to start it.  If set to the value exact, the string supplied must match the name of a stopped
\par               job  exactly; if set to substring, the string supplied needs to match a substring of the name of a stopped job.  The substring value
\par               provides functionality analogous to the %?  job identifier (see JOB CONTROL below).  If set to any other value, the supplied  string
\par               must be a prefix of a stopped job's name; this provides functionality analogous to the % job identifier.
\par 
\par        histchars
\par               The  two or three characters which control history expansion and tokenization (see HISTORY EXPANSION below).  The first character is
\par               the history expansion character, the character which signals the start of a history expansion, normally '!'.  The  second  character
\par               is the quick substitution character, which is used as shorthand for re-running the previous command entered, substituting one string
\par               for another in the command.  The default is '^'.  The optional third character is the character which indicates that  the  remainder
\par               of  the  line  is a comment when found as the first character of a word, normally '#'.  The history comment character causes history
\par               substitution to be skipped for the remaining words on the line.  It does not necessarily cause the shell parser to treat the rest of
\par               the line as a comment.
\par 
\par    Arrays
\par        Bash provides one-dimensional array variables.  Any variable may be used as an array; the declare builtin will explicitly declare an array.
\par        There is no maximum limit on the size of an array, nor any requirement that members  be  indexed  or  assigned  contiguously.   Arrays  are
\par        indexed using integers and are zero-based.
\par 
\par        An  array  is  created automatically if any variable is assigned to using the syntax name[subscript]=value.  The subscript is treated as an
\par        arithmetic expression that must evaluate to a number greater than or equal to zero.  To explicitly declare an array, use  declare  -a  name
\par        (see  SHELL  BUILTIN  COMMANDS below).  declare -a name[subscript] is also accepted; the subscript is ignored.  Attributes may be specified
\par        for an array variable using the declare and readonly builtins.  Each attribute applies to all members of an array.
\par 
\par        Arrays are assigned to using compound assignments of the form name=(value1 ... valuen), where each value is of the form [subscript]=string.
\par        Only  string  is required.  If the optional brackets and subscript are supplied, that index is assigned to; otherwise the index of the ele-
\par        ment assigned is the last index assigned to by the statement plus one.  Indexing starts at zero.  This  syntax  is  also  accepted  by  the
\par        declare builtin.  Individual array elements may be assigned to using the name[subscript]=value syntax introduced above.
\par 
\par        Any  element  of  an array may be referenced using $\{name[subscript]\}.  The braces are required to avoid conflicts with pathname expansion.
\par        If subscript is @ or *, the word expands to all members of name.  These subscripts differ only when the word appears within double  quotes.
\par        If  the  word is double-quoted, $\{name[*]\} expands to a single word with the value of each array member separated by the first character of
\par        the IFS special variable, and $\{name[@]\} expands each element of name to a separate word.  When there  are  no  array  members,  $\{name[@]\}
\par        expands  to  nothing.   This  is analogous to the expansion of the special parameters * and @ (see Special Parameters above).  $\{#name[sub-
\par        script]\} expands to the length of $\{name[subscript]\}.  If subscript is * or @, the expansion is the number of elements in the array.   Ref-
\par        erencing an array variable without a subscript is equivalent to referencing element zero.
\par 
\par        The  unset builtin is used to destroy arrays.  unset name[subscript] destroys the array element at index subscript.  unset name, where name
\par        is an array, or unset name[subscript], where subscript is * or @, removes the entire array.
\par 
\par        The declare, local, and readonly builtins each accept a -a option to specify an array.  The read builtin accepts a -a option  to  assign  a
\par        list  of words read from the standard input to an array.  The set and declare builtins display array values in a way that allows them to be
\par        reused as assignments.
\par 
\par EXPANSION
\par        Expansion is performed on the command line after it has been split into words.  There are seven kinds of expansion performed: brace  expan-
\par        sion,  tilde  expansion,  parameter and variable expansion, command substitution, arithmetic expansion, word splitting, and pathname expan-
\par        sion.
\par 
\par        The order of expansions is: brace expansion, tilde expansion, parameter, variable and arithmetic expansion and command  substitution  (done
\par        in a left-to-right fashion), word splitting, and pathname expansion.
\par 
\par        On systems that can support it, there is an additional expansion available: process substitution.
\par 
\par        Only  brace  expansion,  word  splitting, and pathname expansion can change the number of words of the expansion; other expansions expand a
\par        single word to a single word.  The only exceptions to this are the expansions of "$@" and "$\{name[@]\}" as explained above (see PARAMETERS).
\par 
\par    Brace Expansion
\par        Brace expansion is a mechanism by which arbitrary strings may be generated.  This mechanism is similar to pathname expansion, but the file-
\par        names generated need not exist.  Patterns to be brace expanded take the form of an optional preamble, followed by either a series of comma-
\par        separated  strings or a sequence expression between a pair of braces, followed by an optional postscript.  The preamble is prefixed to each
\par        string contained within the braces, and the postscript is then appended to each resulting string, expanding left to right.
\par 
\par        Brace expansions may be nested.  The results of each expanded string are not sorted; left  to  right  order  is  preserved.   For  example,
\par        a\{d,c,b\}e expands into 'ade ace abe'.
\par 
\par        A  sequence  expression  takes  the  form  \{x..y\}, where x and y are either integers or single characters.  When integers are supplied, the
\par        expression expands to each number between x and y, inclusive.  When characters are supplied, the expression expands to each character lexi-
\par        cographically between x and y, inclusive.  Note that both x and y must be of the same type.
\par 
\par        Brace  expansion  is performed before any other expansions, and any characters special to other expansions are preserved in the result.  It
\par        is strictly textual.  Bash does not apply any syntactic interpretation to the context of the expansion or the text between the braces.
\par 
\par        A correctly-formed brace expansion must contain unquoted opening and closing braces, and at least one unquoted comma or  a  valid  sequence
\par        expression.   Any  incorrectly formed brace expansion is left unchanged.  A \{ or , may be quoted with a backslash to prevent its being con-
\par        sidered part of a brace expression.  To avoid conflicts with parameter expansion, the string $\{ is not considered eligible for brace expan-
\par        sion.
\par 
\par        This construct is typically used as shorthand when the common prefix of the strings to be generated is longer than in the above example:
\par 
\par               mkdir /usr/local/src/bash/\{old,new,dist,bugs\}
\par        or
\par               chown root /usr/\{ucb/\{ex,edit\},lib/\{ex?.?*,how_ex\}\}
\par 
\par        Brace  expansion introduces a slight incompatibility with historical versions of sh.  sh does not treat opening or closing braces specially
\par        when they appear as part of a word, and preserves them in the output.  Bash removes braces from words as a consequence of brace  expansion.
\par        For  example,  a word entered to sh as file\{1,2\} appears identically in the output.  The same word is output as file1 file2 after expansion
\par        by bash.  If strict compatibility with sh is desired, start bash with the +B option or disable brace expansion with the +B  option  to  the
\par        set command (see SHELL BUILTIN COMMANDS below).
\par 
\par    Tilde Expansion
\par        If  a  word  begins with an unquoted tilde character ('~'), all of the characters preceding the first unquoted slash (or all characters, if
\par        there is no unquoted slash) are considered a tilde-prefix.  If none of the characters in the tilde-prefix are quoted, the characters in the
\par        tilde-prefix  following  the tilde are treated as a possible login name.  If this login name is the null string, the tilde is replaced with
\par        the value of the shell parameter HOME.  If HOME is unset, the home directory of the user executing the shell is substituted instead.   Oth-
\par        erwise, the tilde-prefix is replaced with the home directory associated with the specified login name.
\par 
\par        If  the tilde-prefix is a '~+', the value of the shell variable PWD replaces the tilde-prefix.  If the tilde-prefix is a '~-', the value of
\par        the shell variable OLDPWD, if it is set, is substituted.  If the characters following the tilde in the tilde-prefix consist of a number  N,
\par        optionally prefixed by a '+' or a '-', the tilde-prefix is replaced with the corresponding element from the directory stack, as it would be
\par        displayed by the dirs builtin invoked with the tilde-prefix as an argument.  If the characters following the tilde in the tilde-prefix con-
\par        sist of a number without a leading '+' or '-', '+' is assumed.
\par 
\par        If the login name is invalid, or the tilde expansion fails, the word is unchanged.
\par 
\par        Each  variable  assignment  is checked for unquoted tilde-prefixes immediately following a : or =.  In these cases, tilde expansion is also
\par        performed.  Consequently, one may use file names with tildes in assignments to PATH, MAILPATH,  and  CDPATH,  and  the  shell  assigns  the
\par        expanded value.
\par 
\par    Parameter Expansion
\par        The  '$'  character  introduces  parameter  expansion,  command  substitution, or arithmetic expansion.  The parameter name or symbol to be
\par        expanded may be enclosed in braces, which are optional but serve to protect the variable to be expanded from characters immediately follow-
\par        ing it which could be interpreted as part of the name.
\par 
\par        When  braces  are  used, the matching ending brace is the first '\}' not escaped by a backslash or within a quoted string, and not within an
\par        embedded arithmetic expansion, command substitution, or paramter expansion.
\par 
\par        $\{parameter\}
\par               The value of parameter is substituted.  The braces are required when parameter is a positional parameter with more than  one  digit,
\par               or when parameter is followed by a character which is not to be interpreted as part of its name.
\par 
\par        If  the  first  character  of parameter is an exclamation point, a level of variable indirection is introduced.  Bash uses the value of the
\par        variable formed from the rest of parameter as the name of the variable; this variable is then expanded and that value is used in  the  rest
\par        of  the  substitution,  rather  than  the  value of parameter itself.  This is known as indirect expansion.  The exceptions to this are the
\par        expansions of $\{!prefix*\} and $\{!name[@]\} described below.  The exclamation point must immediately follow the left brace in order to intro-
\par        duce indirection.
\par 
\par        In  each of the cases below, word is subject to tilde expansion, parameter expansion, command substitution, and arithmetic expansion.  When
\par        not performing substring expansion, bash tests for a parameter that is unset or null; omitting the colon results  in  a  test  only  for  a
\par        parameter that is unset.
\par 
\par        $\{parameter:-word\}
\par               Use Default Values.  If parameter is unset or null, the expansion of word is substituted.  Otherwise, the value of parameter is sub-
\par               stituted.
\par        $\{parameter:=word\}
\par               Assign Default Values.  If parameter is unset or null, the expansion of word is assigned to parameter.  The value  of  parameter  is
\par               then substituted.  Positional parameters and special parameters may not be assigned to in this way.
\par        $\{parameter:?word\}
\par               Display  Error  if  Null or Unset.  If parameter is null or unset, the expansion of word (or a message to that effect if word is not
\par               present) is written to the standard error and the shell, if it is not interactive, exits.  Otherwise, the value of parameter is sub-
\par               stituted.
\par        $\{parameter:+word\}
\par               Use Alternate Value.  If parameter is null or unset, nothing is substituted, otherwise the expansion of word is substituted.
\par        $\{parameter:offset\}
\par        $\{parameter:offset:length\}
\par               Substring  Expansion.   Expands to up to length characters of parameter starting at the character specified by offset.  If length is
\par               omitted, expands to the substring of parameter starting at the character specified by offset.   length  and  offset  are  arithmetic
\par               expressions (see ARITHMETIC EVALUATION below).  length must evaluate to a number greater than or equal to zero.  If offset evaluates
\par               to a number less than zero, the value is used as an offset from the end of the value of parameter.  If parameter is @, the result is
\par               length positional parameters beginning at offset.  If parameter is an array name indexed by @ or *, the result is the length members
\par               of the array beginning with $\{parameter[offset]\}.  Substring indexing is zero-based unless the positional parameters  are  used,  in
\par               which case the indexing starts at 1.
\par 
\par        $\{!prefix*\}
\par        $\{!prefix@\}
\par               Expands to the names of variables whose names begin with prefix, separated by the first character of the IFS special variable.
\par 
\par        $\{!name[@]\}
\par        $\{!name[*]\}
\par               If  name  is an array variable, expands to the list of array indices (keys) assigned in name.  If name is not an array, expands to 0
\par               if name is set and null otherwise.  When @ is used and the expansion appears within double quotes, each key expands  to  a  separate
\par               word.
\par 
\par        $\{#parameter\}
\par               The  length  in characters of the value of parameter is substituted.  If parameter is * or @, the value substituted is the number of
\par               positional parameters.  If parameter is an array name subscripted by * or @, the value substituted is the number of elements in  the
\par               array.
\par 
\par        $\{parameter#word\}
\par        $\{parameter##word\}
\par               The  word  is  expanded  to  produce  a pattern just as in pathname expansion.  If the pattern matches the beginning of the value of
\par               parameter, then the result of the expansion is the expanded value of parameter with the shortest matching pattern (the  ''#''  case)
\par               or the longest matching pattern (the ''##'' case) deleted.  If parameter is @ or *, the pattern removal operation is applied to each
\par               positional parameter in turn, and the expansion is the resultant list.  If parameter is an array variable subscripted with @  or  *,
\par               the pattern removal operation is applied to each member of the array in turn, and the expansion is the resultant list.
\par 
\par        $\{parameter%word\}
\par        $\{parameter%%word\}
\par               The  word is expanded to produce a pattern just as in pathname expansion.  If the pattern matches a trailing portion of the expanded
\par               value of parameter, then the result of the expansion is the expanded value of parameter with  the  shortest  matching  pattern  (the
\par               ''%''  case)  or  the  longest matching pattern (the ''%%'' case) deleted.  If parameter is @ or *, the pattern removal operation is
\par               applied to each positional parameter in turn, and the expansion is the resultant list.  If  parameter  is  an  array  variable  sub-
\par               scripted  with @ or *, the pattern removal operation is applied to each member of the array in turn, and the expansion is the resul-
\par               tant list.
\par 
\par        $\{parameter/pattern/string\}
\par        $\{parameter//pattern/string\}
\par               The pattern is expanded to produce a pattern just as in pathname expansion.  Parameter is expanded and the longest match of  pattern
\par               against its value is replaced with string.  In the first form, only the first match is replaced.  The second form causes all matches
\par               of pattern to be replaced with string.  If pattern begins with #, it must match at the beginning of the expanded value of parameter.
\par               If  pattern  begins  with %, it must match at the end of the expanded value of parameter.  If string is null, matches of pattern are
\par               deleted and the / following pattern may be omitted.  If parameter is @ or *, the substitution operation is  applied  to  each  posi-
\par               tional  parameter  in turn, and the expansion is the resultant list.  If parameter is an array variable subscripted with @ or *, the
\par               substitution operation is applied to each member of the array in turn, and the expansion is the resultant list.
\par 
\par    Command Substitution
\par        Command substitution allows the output of a command to replace the command name.  There are two forms:
\par 
\par               $(command)
\par        or
\par               'command'
\par 
\par        Bash performs the expansion by executing command and replacing the command substitution with the standard output of the command,  with  any
\par        trailing  newlines  deleted.   Embedded  newlines are not deleted, but they may be removed during word splitting.  The command substitution
\par        $(cat file) can be replaced by the equivalent but faster $(< file).
\par 
\par        When the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by $, ', or  \\.   The
\par        first  backquote  not  preceded by a backslash terminates the command substitution.  When using the $(command) form, all characters between
\par        the parentheses make up the command; none are treated specially.
\par 
\par        Command substitutions may be nested.  To nest when using the backquoted form, escape the inner backquotes with backslashes.
\par 
\par        If the substitution appears within double quotes, word splitting and pathname expansion are not performed on the results.
\par 
\par    Arithmetic Expansion
\par        Arithmetic expansion allows the evaluation of an arithmetic expression and the substitution of  the  result.   The  format  for  arithmetic
\par        expansion is:
\par 
\par               $((expression))
\par 
\par        The  expression  is  treated  as  if it were within double quotes, but a double quote inside the parentheses is not treated specially.  All
\par        tokens in the expression undergo parameter expansion, string expansion, command substitution, and quote removal.  Arithmetic expansions may
\par        be nested.
\par 
\par        The  evaluation is performed according to the rules listed below under ARITHMETIC EVALUATION.  If expression is invalid, bash prints a mes-
\par        sage indicating failure and no substitution occurs.
\par 
\par    Process Substitution
\par        Process substitution is supported on systems that support named pipes (FIFOs) or the /dev/fd method of naming open  files.   It  takes  the
\par        form  of  <(list)  or  >(list).  The process list is run with its input or output connected to a FIFO or some file in /dev/fd.  The name of
\par        this file is passed as an argument to the current command as the result of the expansion.  If the >(list) form is used, writing to the file
\par        will provide input for list.  If the <(list) form is used, the file passed as an argument should be read to obtain the output of list.
\par 
\par        When  available,  process  substitution is performed simultaneously with parameter and variable expansion, command substitution, and arith-
\par        metic expansion.
\par 
\par    Word Splitting
\par        The shell scans the results of parameter expansion, command substitution, and arithmetic expansion that did not occur within double  quotes
\par        for word splitting.
\par 
\par        The  shell  treats each character of IFS as a delimiter, and splits the results of the other expansions into words on these characters.  If
\par        IFS is unset, or its value is exactly <space><tab><newline>, the default, then any sequence of IFS characters serves to delimit words.   If
\par        IFS  has  a value other than the default, then sequences of the whitespace characters space and tab are ignored at the beginning and end of
\par        the word, as long as the whitespace character is in the value of IFS (an IFS whitespace character).  Any character in IFS that is  not  IFS
\par        whitespace,  along  with any adjacent IFS whitespace characters, delimits a field.  A sequence of IFS whitespace characters is also treated
\par        as a delimiter.  If the value of IFS is null, no word splitting occurs.
\par 
\par        Explicit null arguments ("" or '') are retained.  Unquoted implicit null arguments, resulting from the expansion of parameters that have no
\par        values, are removed.  If a parameter with no value is expanded within double quotes, a null argument results and is retained.
\par 
\par        Note that if no expansion occurs, no splitting is performed.
\par 
\par    Pathname Expansion
\par        After  word  splitting, unless the -f option has been set, bash scans each word for the characters *, ?, and [.  If one of these characters
\par        appears, then the word is regarded as a pattern, and replaced with an alphabetically sorted list of file names matching the pattern.  If no
\par        matching  file  names are found, and the shell option nullglob is disabled, the word is left unchanged.  If the nullglob option is set, and
\par        no matches are found, the word is removed.  If the failglob shell option is set, and no matches are found, an error message is printed  and
\par        the  command  is  not executed.  If the shell option nocaseglob is enabled, the match is performed without regard to the case of alphabetic
\par        characters.  When a pattern is used for pathname expansion, the character ''.''  at the start of a name or immediately  following  a  slash
\par        must  be  matched explicitly, unless the shell option dotglob is set.  When matching a pathname, the slash character must always be matched
\par        explicitly.  In other cases, the ''.''  character is not treated specially.  See the description of shopt below under  SHELL  BUILTIN  COM-
\par        MANDS for a description of the nocaseglob, nullglob, failglob, and dotglob shell options.
\par 
\par        The  GLOBIGNORE  shell variable may be used to restrict the set of file names matching a pattern.  If GLOBIGNORE is set, each matching file
\par        name that also matches one of the patterns in GLOBIGNORE is removed from the list of matches.  The file names ''.''  and ''..''  are always
\par        ignored  when GLOBIGNORE is set and not null.  However, setting GLOBIGNORE to a non-null value has the effect of enabling the dotglob shell
\par        option, so all other file names beginning with a ''.''  will match.  To get the old behavior of ignoring file names beginning with a ''.'',
\par        make ''.*''  one of the patterns in GLOBIGNORE.  The dotglob option is disabled when GLOBIGNORE is unset.
\par 
\par        Pattern Matching
\par 
\par        Any  character that appears in a pattern, other than the special pattern characters described below, matches itself.  The NUL character may
\par        not occur in a pattern.  A backslash escapes the following character; the escaping backslash is discarded when matching.  The special  pat-
\par        tern characters must be quoted if they are to be matched literally.
\par 
\par        The special pattern characters have the following meanings:
\par 
\par        *      Matches any string, including the null string.
\par        ?      Matches any single character.
\par        [...]  Matches  any  one  of the enclosed characters.  A pair of characters separated by a hyphen denotes a range expression; any character
\par               that sorts between those two characters, inclusive, using the current locale's collating sequence and character set, is matched.  If
\par               the  first  character following the [ is a !  or a ^ then any character not enclosed is matched.  The sorting order of characters in
\par               range expressions is determined by the current locale and the value of the LC_COLLATE shell variable, if set.  A - may be matched by
\par               including it as the first or last character in the set.  A ] may be matched by including it as the first character in the set.
\par 
\par               Within  [  and ], character classes can be specified using the syntax [:class:], where class is one of the following classes defined
\par               in the POSIX.2 standard:
\par               alnum alpha ascii blank cntrl digit graph lower print punct space upper word xdigit
\par               A character class matches any character belonging to that class.  The word character class matches letters, digits, and the  charac-
\par               ter _.
\par 
\par               Within  [  and ], an equivalence class can be specified using the syntax [=c=], which matches all characters with the same collation
\par               weight (as defined by the current locale) as the character c.
\par 
\par               Within [ and ], the syntax [.symbol.] matches the collating symbol symbol.
\par 
\par        If the extglob shell option is enabled using the shopt builtin, several extended pattern matching operators are recognized.  In the follow-
\par        ing  description, a pattern-list is a list of one or more patterns separated by a |.  Composite patterns may be formed using one or more of
\par        the following sub-patterns:
\par 
\par               ?(pattern-list)
\par                      Matches zero or one occurrence of the given patterns
\par               *(pattern-list)
\par                      Matches zero or more occurrences of the given patterns
\par               +(pattern-list)
\par                      Matches one or more occurrences of the given patterns
\par               @(pattern-list)
\par                      Matches exactly one of the given patterns
\par               !(pattern-list)
\par                      Matches anything except one of the given patterns
\par 
\par    Quote Removal
\par        After the preceding expansions, all unquoted occurrences of the characters \\, ', and " that did not result from one of the above expansions
\par        are removed.
\par 
\par REDIRECTION
\par        Before  a  command  is executed, its input and output may be redirected using a special notation interpreted by the shell.  Redirection may
\par        also be used to open and close files for the current shell execution environment.  The  following  redirection  operators  may  precede  or
\par        appear  anywhere within a simple command or may follow a command.  Redirections are processed in the order they appear, from left to right.
\par 
\par        In the following descriptions, if the file descriptor number is omitted, and the first character of the  redirection  operator  is  <,  the
\par        redirection  refers  to  the  standard input (file descriptor 0).  If the first character of the redirection operator is >, the redirection
\par        refers to the standard output (file descriptor 1).
\par 
\par        The word following the redirection operator in the following descriptions, unless otherwise noted, is subjected to brace  expansion,  tilde
\par        expansion,  parameter  expansion, command substitution, arithmetic expansion, quote removal, pathname expansion, and word splitting.  If it
\par        expands to more than one word, bash reports an error.
\par 
\par        Note that the order of redirections is significant.  For example, the command
\par 
\par               ls > dirlist 2>&1
\par 
\par        directs both standard output and standard error to the file dirlist, while the command
\par 
\par               ls 2>&1 > dirlist
\par 
\par        directs only the standard output to file dirlist, because the standard error was duplicated as standard output before the  standard  output
\par        was redirected to dirlist.
\par 
\par        Bash handles several filenames specially when they are used in redirections, as described in the following table:
\par 
\par               /dev/fd/fd
\par                      If fd is a valid integer, file descriptor fd is duplicated.
\par               /dev/stdin
\par                      File descriptor 0 is duplicated.
\par               /dev/stdout
\par                      File descriptor 1 is duplicated.
\par               /dev/stderr
\par                      File descriptor 2 is duplicated.
\par               /dev/tcp/host/port
\par                      If  host is a valid hostname or Internet address, and port is an integer port number or service name, bash attempts to open a
\par                      TCP connection to the corresponding socket.
\par               /dev/udp/host/port
\par                      If host is a valid hostname or Internet address, and port is an integer port number or service name, bash attempts to open  a
\par                      UDP connection to the corresponding socket.
\par 
\par        A failure to open or create a file causes the redirection to fail.
\par 
\par    Redirecting Input
\par        Redirection  of  input  causes the file whose name results from the expansion of word to be opened for reading on file descriptor n, or the
\par        standard input (file descriptor 0) if n is not specified.
\par 
\par        The general format for redirecting input is:
\par 
\par               [n]<word
\par 
\par    Redirecting Output
\par        Redirection of output causes the file whose name results from the expansion of word to be opened for writing on file descriptor n,  or  the
\par        standard  output  (file descriptor 1) if n is not specified.  If the file does not exist it is created; if it does exist it is truncated to
\par        zero size.
\par 
\par        The general format for redirecting output is:
\par 
\par               [n]>word
\par 
\par        If the redirection operator is >, and the noclobber option to the set builtin has been enabled, the redirection will fail if the file whose
\par        name  results from the expansion of word exists and is a regular file.  If the redirection operator is >|, or the redirection operator is >
\par        and the noclobber option to the set builtin command is not enabled, the redirection is attempted even if the file named by word exists.
\par 
\par    Appending Redirected Output
\par        Redirection of output in this fashion causes the file whose name results from the expansion of word to be  opened  for  appending  on  file
\par        descriptor n, or the standard output (file descriptor 1) if n is not specified.  If the file does not exist it is created.
\par 
\par        The general format for appending output is:
\par 
\par               [n]>>word
\par 
\par    Redirecting Standard Output and Standard Error
\par        Bash  allows  both  the  standard output (file descriptor 1) and the standard error output (file descriptor 2) to be redirected to the file
\par        whose name is the expansion of word with this construct.
\par 
\par        There are two formats for redirecting standard output and standard error:
\par 
\par               &>word
\par        and
\par               >&word
\par 
\par        Of the two forms, the first is preferred.  This is semantically equivalent to
\par 
\par               >word 2>&1
\par 
\par    Here Documents
\par        This type of redirection instructs the shell to read input from the current source until a line containing  only  word  (with  no  trailing
\par        blanks) is seen.  All of the lines read up to that point are then used as the standard input for a command.
\par 
\par        The format of here-documents is:
\par 
\par               <<[-]word
\par                       here-document
\par               delimiter
\par 
\par        No  parameter expansion, command substitution, arithmetic expansion, or pathname expansion is performed on word.  If any characters in word
\par        are quoted, the delimiter is the result of quote removal on word, and the lines  in  the  here-document  are  not  expanded.   If  word  is
\par        unquoted, all lines of the here-document are subjected to parameter expansion, command substitution, and arithmetic expansion.  In the lat-
\par        ter case, the character sequence \\<newline> is ignored, and \\ must be used to quote the characters \\, $, and '.
\par 
\par        If the redirection operator is <<-, then all leading tab characters are stripped from input lines and the line containing delimiter.   This
\par        allows here-documents within shell scripts to be indented in a natural fashion.
\par 
\par    Here Strings
\par        A variant of here documents, the format is:
\par 
\par               <<<word
\par 
\par        The word is expanded and supplied to the command on its standard input.
\par 
\par    Duplicating File Descriptors
\par        The redirection operator
\par 
\par               [n]<&word
\par 
\par        is  used to duplicate input file descriptors.  If word expands to one or more digits, the file descriptor denoted by n is made to be a copy
\par        of that file descriptor.  If the digits in word do not specify a file descriptor open for input, a redirection error occurs.  If word eval-
\par        uates to -, file descriptor n is closed.  If n is not specified, the standard input (file descriptor 0) is used.
\par 
\par        The operator
\par 
\par               [n]>&word
\par 
\par        is  used  similarly  to duplicate output file descriptors.  If n is not specified, the standard output (file descriptor 1) is used.  If the
\par        digits in word do not specify a file descriptor open for output, a redirection error occurs.  As a special case, if n is omitted, and  word
\par        does not expand to one or more digits, the standard output and standard error are redirected as described previously.
\par 
\par    Moving File Descriptors
\par        The redirection operator
\par 
\par               [n]<&digit-
\par 
\par        moves  the  file  descriptor  digit to file descriptor n, or the standard input (file descriptor 0) if n is not specified.  digit is closed
\par        after being duplicated to n.
\par 
\par        Similarly, the redirection operator
\par 
\par               [n]>&digit-
\par 
\par        moves the file descriptor digit to file descriptor n, or the standard output (file descriptor 1) if n is not specified.
\par 
\par    Opening File Descriptors for Reading and Writing
\par        The redirection operator
\par 
\par               [n]<>word
\par 
\par        causes the file whose name is the expansion of word to be opened for both reading and writing on file descriptor n, or on file descriptor 0
\par        if n is not specified.  If the file does not exist, it is created.
\par 
\par ALIASES
\par        Aliases  allow  a string to be substituted for a word when it is used as the first word of a simple command.  The shell maintains a list of
\par        aliases that may be set and unset with the alias and unalias builtin commands (see SHELL BUILTIN COMMANDS below).  The first word  of  each
\par        simple  command, if unquoted, is checked to see if it has an alias.  If so, that word is replaced by the text of the alias.  The characters
\par        /, $, ', and = and any of the shell metacharacters or quoting characters listed above may not appear in an  alias  name.   The  replacement
\par        text  may contain any valid shell input, including shell metacharacters.  The first word of the replacement text is tested for aliases, but
\par        a word that is identical to an alias being expanded is not expanded a second time.  This means  that  one  may  alias  ls  to  ls  -F,  for
\par        instance,  and bash does not try to recursively expand the replacement text.  If the last character of the alias value is a blank, then the
\par        next command word following the alias is also checked for alias expansion.
\par 
\par        Aliases are created and listed with the alias command, and removed with the unalias command.
\par 
\par        There is no mechanism for using arguments in the replacement text.  If arguments are needed, a shell function should be used (see FUNCTIONS
\par        below).
\par 
\par        Aliases  are not expanded when the shell is not interactive, unless the expand_aliases shell option is set using shopt (see the description
\par        of shopt under SHELL BUILTIN COMMANDS below).
\par 
\par        The rules concerning the definition and use of aliases are somewhat confusing.  Bash always reads at  least  one  complete  line  of  input
\par        before  executing  any  of the commands on that line.  Aliases are expanded when a command is read, not when it is executed.  Therefore, an
\par        alias definition appearing on the same line as another command does not take effect until the next line of input  is  read.   The  commands
\par        following the alias definition on that line are not affected by the new alias.  This behavior is also an issue when functions are executed.
\par        Aliases are expanded when a function definition is read, not when the function is executed, because a function definition is itself a  com-
\par        pound  command.   As  a  consequence,  aliases  defined in a function are not available until after that function is executed.  To be safe,
\par        always put alias definitions on a separate line, and do not use alias in compound commands.
\par 
\par        For almost every purpose, aliases are superseded by shell functions.
\par 
\par FUNCTIONS
\par        A shell function, defined as described above under SHELL GRAMMAR, stores a series of commands for later execution.   When  the  name  of  a
\par        shell  function  is used as a simple command name, the list of commands associated with that function name is executed.  Functions are exe-
\par        cuted in the context of the current shell; no new process is created to interpret them  (contrast  this  with  the  execution  of  a  shell
\par        script).   When  a  function is executed, the arguments to the function become the positional parameters during its execution.  The special
\par        parameter # is updated to reflect the change.  Special parameter 0 is unchanged.  The first element of the FUNCNAME variable is set to  the
\par        name  of  the function while the function is executing.  All other aspects of the shell execution environment are identical between a func-
\par        tion and its caller with the exception that the DEBUG trap (see the description of the trap builtin under SHELL BUILTIN COMMANDS below)  is
\par        not inherited unless the function has been given the trace attribute (see the description of the declare builtin below) or the -o functrace
\par        shell option has been enabled with the set builtin (in which case all functions inherit the DEBUG trap).
\par 
\par        Variables local to the function may be declared with the local builtin command.  Ordinarily, variables and their values are shared  between
\par        the function and its caller.
\par 
\par        If the builtin command return is executed in a function, the function completes and execution resumes with the next command after the func-
\par        tion call.  Any command associated with the RETURN trap is executed before execution resumes.  When a function completes, the values of the
\par        positional parameters and the special parameter # are restored to the values they had prior to the function's execution.
\par 
\par        Function  names  and  definitions may be listed with the -f option to the declare or typeset builtin commands.  The -F option to declare or
\par        typeset will list the function names only (and optionally the source file and line number, if the extdebug shell option is enabled).  Func-
\par        tions  may  be  exported so that subshells automatically have them defined with the -f option to the export builtin.  Note that shell func-
\par        tions and variables with the same name may result in multiple identically-named entries in the environment passed to the shell's  children.
\par        Care should be taken in cases where this may cause a problem.
\par 
\par        Functions may be recursive.  No limit is imposed on the number of recursive calls.
\par 
\par ARITHMETIC EVALUATION
\par        The  shell  allows arithmetic expressions to be evaluated, under certain circumstances (see the let and declare builtin commands and Arith-
\par        metic Expansion).  Evaluation is done in fixed-width integers with no check for overflow, though division by 0 is trapped and flagged as an
\par        error.   The  operators and their precedence, associativity, and values are the same as in the C language.  The following list of operators
\par        is grouped into levels of equal-precedence operators.  The levels are listed in order of decreasing precedence.
\par 
\par        id++ id--
\par               variable post-increment and post-decrement
\par        ++id --id
\par               variable pre-increment and pre-decrement
\par        - +    unary minus and plus
\par        ! ~    logical and bitwise negation
\par        **     exponentiation
\par        * / %  multiplication, division, remainder
\par        + -    addition, subtraction
\par        << >>  left and right bitwise shifts
\par        <= >= < >
\par               comparison
\par        == !=  equality and inequality
\par        &      bitwise AND
\par        ^      bitwise exclusive OR
\par        |      bitwise OR
\par        &&     logical AND
\par        ||     logical OR
\par        expr?expr:expr
\par               conditional operator
\par        = *= /= %= += -= <<= >>= &= ^= |=
\par               assignment
\par        expr1 , expr2
\par               comma
\par 
\par        Shell variables are allowed as operands; parameter expansion is performed before the expression is evaluated.  Within an expression,  shell
\par        variables may also be referenced by name without using the parameter expansion syntax.  A shell variable that is null or unset evaluates to
\par        0 when referenced by name without using the parameter expansion syntax.  The value of a variable is evaluated as an  arithmetic  expression
\par        when  it  is  referenced, or when a variable which has been given the integer attribute using declare -i is assigned a value.  A null value
\par        evaluates to 0.  A shell variable need not have its integer attribute turned on to be used in an expression.
\par 
\par        Constants with a leading 0 are interpreted as octal numbers.  A leading 0x or 0X denotes hexadecimal.  Otherwise,  numbers  take  the  form
\par        [base#]n,  where  base  is a decimal number between 2 and 64 representing the arithmetic base, and n is a number in that base.  If base# is
\par        omitted, then base 10 is used.  The digits greater than 9 are represented by the lowercase letters, the uppercase letters,  @,  and  _,  in
\par        that  order.   If base is less than or equal to 36, lowercase and uppercase letters may be used interchangably to represent numbers between
\par        10 and 35.
\par 
\par        Operators are evaluated in order of precedence.  Sub-expressions in parentheses are evaluated first and may override the  precedence  rules
\par        above.
\par 
\par CONDITIONAL EXPRESSIONS
\par        Conditional  expressions are used by the [[ compound command and the test and [ builtin commands to test file attributes and perform string
\par        and arithmetic comparisons.  Expressions are formed from the following unary or binary primaries.  If any file argument to one of the  pri-
\par        maries  is  of  the  form /dev/fd/n, then file descriptor n is checked.  If the file argument to one of the primaries is one of /dev/stdin,
\par        /dev/stdout, or /dev/stderr, file descriptor 0, 1, or 2, respectively, is checked.
\par 
\par        -a file
\par               True if file exists.
\par        -b file
\par               True if file exists and is a block special file.
\par        -c file
\par               True if file exists and is a character special file.
\par        -d file
\par               True if file exists and is a directory.
\par        -e file
\par               True if file exists.
\par        -f file
\par               True if file exists and is a regular file.
\par        -g file
\par               True if file exists and is set-group-id.
\par        -h file
\par               True if file exists and is a symbolic link.
\par        -k file
\par               True if file exists and its ''sticky'' bit is set.
\par        -p file
\par               True if file exists and is a named pipe (FIFO).
\par        -r file
\par               True if file exists and is readable.
\par        -s file
\par               True if file exists and has a size greater than zero.
\par        -t fd  True if file descriptor fd is open and refers to a terminal.
\par        -u file
\par               True if file exists and its set-user-id bit is set.
\par        -w file
\par               True if file exists and is writable.
\par        -x file
\par               True if file exists and is executable.
\par        -O file
\par               True if file exists and is owned by the effective user id.
\par        -G file
\par               True if file exists and is owned by the effective group id.
\par        -L file
\par               True if file exists and is a symbolic link.
\par        -S file
\par               True if file exists and is a socket.
\par        -N file
\par               True if file exists and has been modified since it was last read.
\par        file1 -nt file2
\par               True if file1 is newer (according to modification date) than file2, or if file1 exists and file2 does not.
\par        file1 -ot file2
\par               True if file1 is older than file2, or if file2 exists and file1 does not.
\par        file1 -ef file2
\par               True if file1 and file2 refer to the same device and inode numbers.
\par        -o optname
\par               True if shell option optname is enabled.  See the list of options under the description of the -o option to the set builtin below.
\par        -z string
\par               True if the length of string is zero.
\par        string
\par        -n string
\par               True if the length of string is non-zero.
\par 
\par        string1 == string2
\par               True if the strings are equal.  = may be used in place of == for strict POSIX compliance.
\par 
\par        string1 != string2
\par               True if the strings are not equal.
\par 
\par        string1 < string2
\par               True if string1 sorts before string2 lexicographically in the current locale.
\par 
\par        string1 > string2
\par               True if string1 sorts after string2 lexicographically in the current locale.
\par 
\par        arg1 OP arg2
\par               OP is one of -eq, -ne, -lt, -le, -gt, or -ge.  These arithmetic binary operators return true if arg1 is equal to, not equal to, less
\par               than,  less  than or equal to, greater than, or greater than or equal to arg2, respectively.  Arg1 and arg2 may be positive or nega-
\par               tive integers.
\par 
\par SIMPLE COMMAND EXPANSION
\par        When a simple command is executed, the shell performs the following expansions, assignments, and redirections, from left to right.
\par 
\par        1.     The words that the parser has marked as variable assignments (those preceding the command name) and redirections are saved for later
\par               processing.
\par 
\par        2.     The  words  that  are not variable assignments or redirections are expanded.  If any words remain after expansion, the first word is
\par               taken to be the name of the command and the remaining words are the arguments.
\par 
\par        3.     Redirections are performed as described above under REDIRECTION.
\par 
\par        4.     The text after the = in each variable assignment undergoes tilde expansion, parameter expansion,  command  substitution,  arithmetic
\par               expansion, and quote removal before being assigned to the variable.
\par 
\par        If no command name results, the variable assignments affect the current shell environment.  Otherwise, the variables are added to the envi-
\par        ronment of the executed command and do not affect the current shell environment.  If any of the assignments attempts to assign a value to a
\par        readonly variable, an error occurs, and the command exits with a non-zero status.
\par 
\par        If  no  command  name results, redirections are performed, but do not affect the current shell environment.  A redirection error causes the
\par        command to exit with a non-zero status.
\par 
\par        If there is a command name left after expansion, execution proceeds as described below.  Otherwise, the  command  exits.   If  one  of  the
\par        expansions  contained a command substitution, the exit status of the command is the exit status of the last command substitution performed.
\par        If there were no command substitutions, the command exits with a status of zero.
\par 
\par COMMAND EXECUTION
\par        After a command has been split into words, if it results in a simple command and an optional list of arguments, the following  actions  are
\par        taken.
\par 
\par        If  the command name contains no slashes, the shell attempts to locate it.  If there exists a shell function by that name, that function is
\par        invoked as described above in FUNCTIONS.  If the name does not match a function, the shell searches for it in the list of  shell  builtins.
\par        If a match is found, that builtin is invoked.
\par 
\par        If the name is neither a shell function nor a builtin, and contains no slashes, bash searches each element of the PATH for a directory con-
\par        taining an executable file by that name.  Bash uses a hash table to remember the full pathnames of executable files (see hash  under  SHELL
\par        BUILTIN COMMANDS below).  A full search of the directories in PATH is performed only if the command is not found in the hash table.  If the
\par        search is unsuccessful, the shell prints an error message and returns an exit status of 127.
\par 
\par        If the search is successful, or if the command name contains one or more slashes, the shell executes the named program in a separate execu-
\par        tion  environment.  Argument 0 is set to the name given, and the remaining arguments to the command are set to the arguments given, if any.
\par 
\par        If this execution fails because the file is not in executable format, and the file is not a directory, it is assumed to be a shell  script,
\par        a  file containing shell commands.  A subshell is spawned to execute it.  This subshell reinitializes itself, so that the effect is as if a
\par        new shell had been invoked to handle the script, with the exception that the locations of commands remembered by the parent (see hash below
\par        under SHELL BUILTIN COMMANDS) are retained by the child.
\par 
\par        If  the  program is a file beginning with #!, the remainder of the first line specifies an interpreter for the program.  The shell executes
\par        the specified interpreter on operating systems that do not handle this executable format themselves.  The arguments to the interpreter con-
\par        sist  of  a  single optional argument following the interpreter name on the first line of the program, followed by the name of the program,
\par        followed by the command arguments, if any.
\par 
\par COMMAND EXECUTION ENVIRONMENT
\par        The shell has an execution environment, which consists of the following:
\par 
\par             open files inherited by the shell at invocation, as modified by redirections supplied to the exec builtin
\par 
\par             the current working directory as set by cd, pushd, or popd, or inherited by the shell at invocation
\par 
\par             the file creation mode mask as set by umask or inherited from the shell's parent
\par 
\par             current traps set by trap
\par 
\par             shell parameters that are set by variable assignment or with set or inherited from the shell's parent in the environment
\par 
\par             shell functions defined during execution or inherited from the shell's parent in the environment
\par 
\par             options enabled at invocation (either by default or with command-line arguments) or by set
\par 
\par             options enabled by shopt
\par 
\par             shell aliases defined with alias
\par 
\par             various process IDs, including those of background jobs, the value of $$, and the value of $PPID
\par 
\par        When a simple command other than a builtin or shell function is to be executed, it is invoked in a separate execution environment that con-
\par        sists of the following.  Unless otherwise noted, the values are inherited from the shell.
\par 
\par             the shell's open files, plus any modifications and additions specified by redirections to the command
\par 
\par             the current working directory
\par 
\par             the file creation mode mask
\par 
\par             shell variables and functions marked for export, along with variables exported for the command, passed in the environment
\par 
\par             traps caught by the shell are reset to the values inherited from the shell's parent, and traps ignored by the shell are ignored
\par 
\par        A command invoked in this separate environment cannot affect the shell's execution environment.
\par 
\par        Command  substitution,  commands grouped with parentheses, and asynchronous commands are invoked in a subshell environment that is a dupli-
\par        cate of the shell environment, except that traps caught by the shell are reset to the values that the shell inherited from  its  parent  at
\par        invocation.  Builtin commands that are invoked as part of a pipeline are also executed in a subshell environment.  Changes made to the sub-
\par        shell environment cannot affect the shell's execution environment.
\par 
\par        If a command is followed by a & and job control is not active, the default standard input for the command  is  the  empty  file  /dev/null.
\par        Otherwise, the invoked command inherits the file descriptors of the calling shell as modified by redirections.
\par 
\par ENVIRONMENT
\par        When  a  program  is  invoked  it  is  given  an  array of strings called the environment.  This is a list of name-value pairs, of the form
\par        name=value.
\par 
\par        The shell provides several ways to manipulate the environment.  On invocation, the shell scans its own environment and creates a  parameter
\par        for  each  name  found, automatically marking it for export to child processes.  Executed commands inherit the environment.  The export and
\par        declare -x commands allow parameters and functions to be added to and deleted from the environment.  If the value of  a  parameter  in  the
\par        environment  is modified, the new value becomes part of the environment, replacing the old.  The environment inherited by any executed com-
\par        mand consists of the shell's initial environment, whose values may be modified in the shell, less any pairs removed by the  unset  command,
\par        plus any additions via the export and declare -x commands.
\par 
\par        The  environment  for  any simple command or function may be augmented temporarily by prefixing it with parameter assignments, as described
\par        above in PARAMETERS.  These assignment statements affect only the environment seen by that command.
\par 
\par        If the -k option is set (see the set builtin command below), then all parameter assignments are placed in the environment  for  a  command,
\par        not just those that precede the command name.
\par 
\par        When  bash  invokes an external command, the variable _ is set to the full file name of the command and passed to that command in its envi-
\par        ronment.
\par 
\par EXIT STATUS
\par        For the shell's purposes, a command which exits with a zero exit status has succeeded.  An exit status of zero indicates success.   A  non-
\par        zero exit status indicates failure.  When a command terminates on a fatal signal N, bash uses the value of 128+N as the exit status.
\par 
\par        If  a  command is not found, the child process created to execute it returns a status of 127.  If a command is found but is not executable,
\par        the return status is 126.
\par 
\par        If a command fails because of an error during expansion or redirection, the exit status is greater than zero.
\par 
\par        Shell builtin commands return a status of 0 (true) if successful, and non-zero (false) if an error occurs while they execute.  All builtins
\par        return an exit status of 2 to indicate incorrect usage.
\par 
\par        Bash  itself  returns  the  exit  status of the last command executed, unless a syntax error occurs, in which case it exits with a non-zero
\par        value.  See also the exit builtin command below.
\par 
\par SIGNALS
\par        When bash is interactive, in the absence of any traps, it ignores SIGTERM (so that kill 0 does not kill an interactive shell),  and  SIGINT
\par        is  caught and handled (so that the wait builtin is interruptible).  In all cases, bash ignores SIGQUIT.  If job control is in effect, bash
\par        ignores SIGTTIN, SIGTTOU, and SIGTSTP.
\par 
\par        Non-builtin commands run by bash have signal handlers set to the values inherited by the shell from its parent.  When job control is not in
\par        effect,  asynchronous commands ignore SIGINT and SIGQUIT in addition to these inherited handlers.  Commands run as a result of command sub-
\par        stitution ignore the keyboard-generated job control signals SIGTTIN, SIGTTOU, and SIGTSTP.
\par 
\par        The shell exits by default upon receipt of a SIGHUP.  Before exiting, an interactive shell resends the  SIGHUP  to  all  jobs,  running  or
\par        stopped.  Stopped jobs are sent SIGCONT to ensure that they receive the SIGHUP.  To prevent the shell from sending the signal to a particu-
\par        lar job, it should be removed from the jobs table with the disown builtin (see SHELL BUILTIN COMMANDS  below)  or  marked  to  not  receive
\par        SIGHUP using disown -h.
\par 
\par        If the huponexit shell option has been set with shopt, bash sends a SIGHUP to all jobs when an interactive login shell exits.
\par 
\par        If  0for  which  a  trap has been set, the trap will not be executed until the command completes.  When bash is waiting for an asynchronous
\par        command via the wait builtin, the reception of a signal for which a trap has been set will cause the wait  builtin  to  return  immediately
\par        with an exit status greater than 128, immediately after which the trap is executed.
\par 
\par JOB CONTROL
\par        Job control refers to the ability to selectively stop (suspend) the execution of processes and continue (resume) their execution at a later
\par        point.  A user typically employs this facility via an interactive interface supplied jointly by the system's terminal driver and bash.
\par 
\par        The shell associates a job with each pipeline.  It keeps a table of currently executing jobs, which may be listed with  the  jobs  command.
\par        When bash starts a job asynchronously (in the background), it prints a line that looks like:
\par 
\par               [1] 25647
\par 
\par        indicating  that  this  job  is job number 1 and that the process ID of the last process in the pipeline associated with this job is 25647.
\par        All of the processes in a single pipeline are members of the same job.  Bash uses the job abstraction as the basis for job control.
\par 
\par        To facilitate the implementation of the user interface to job control, the operating system maintains the notion of a current terminal pro-
\par        cess  group ID.  Members of this process group (processes whose process group ID is equal to the current terminal process group ID) receive
\par        keyboard-generated signals such as SIGINT.  These processes are said to be in the foreground.  Background processes are those whose process
\par        group  ID  differs  from the terminal's; such processes are immune to keyboard-generated signals.  Only foreground processes are allowed to
\par        read from or write to the terminal.  Background processes which attempt to read from (write to) the terminal are sent a  SIGTTIN  (SIGTTOU)
\par        signal by the terminal driver, which, unless caught, suspends the process.
\par 
\par        If  the  operating  system on which bash is running supports job control, bash contains facilities to use it.  Typing the suspend character
\par        (typically ^Z, Control-Z) while a process is running causes that process to be stopped and returns control to  bash.   Typing  the  delayed
\par        suspend  character (typically ^Y, Control-Y) causes the process to be stopped when it attempts to read input from the terminal, and control
\par        to be returned to bash.  The user may then manipulate the state of this job, using the bg command to continue it in the background, the  fg
\par        command  to  continue  it  in  the  foreground, or the kill command to kill it.  A ^Z takes effect immediately, and has the additional side
\par        effect of causing pending output and typeahead to be discarded.
\par 
\par        There are a number of ways to refer to a job in the shell.  The character % introduces a job name.  Job number n may be referred to as  %n.
\par        A  job  may  also  be  referred to using a prefix of the name used to start it, or using a substring that appears in its command line.  For
\par        example, %ce refers to a stopped ce job.  If a prefix matches more than one job, bash reports an error.  Using %?ce,  on  the  other  hand,
\par        refers  to  any  job containing the string ce in its command line.  If the substring matches more than one job, bash reports an error.  The
\par        symbols %% and %+ refer to the shell's notion of the current job, which is the last job stopped while it was in the foreground  or  started
\par        in  the background.  The previous job may be referenced using %-.  In output pertaining to jobs (e.g., the output of the jobs command), the
\par        current job is always flagged with a +, and the previous job with a -.
\par 
\par        Simply naming a job can be used to bring it into the foreground: %1 is a synonym for ''fg %1'', bringing job 1 from the background into the
\par        foreground.  Similarly, ''%1 &'' resumes job 1 in the background, equivalent to ''bg %1''.
\par 
\par        The  shell  learns  immediately  whenever  a  job changes state.  Normally, bash waits until it is about to print a prompt before reporting
\par        changes in a job's status so as to not interrupt any other output.  If the -b option to the set builtin command is  enabled,  bash  reports
\par        such changes immediately.  Any trap on SIGCHLD is executed for each child that exits.
\par 
\par        If  an  attempt  to  exit  bash  is  made while jobs are stopped, the shell prints a warning message.  The jobs command may then be used to
\par        inspect their status.  If a second attempt to exit is made without an intervening command, the shell does not print  another  warning,  and
\par        the stopped jobs are terminated.
\par 
\par PROMPTING
\par        When executing interactively, bash displays the primary prompt PS1 when it is ready to read a command, and the secondary prompt PS2 when it
\par        needs more input to complete a command.  Bash allows these prompt strings to be customized by inserting a number of backslash-escaped  spe-
\par        cial characters that are decoded as follows:
\par               \\a     an ASCII bell character (07)
\par               \\d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
\par               \\D\{format\}
\par                      the  format  is passed to strftime(3) and the result is inserted into the prompt string; an empty format results in a locale-
\par                      specific time representation.  The braces are required
\par               \\e     an ASCII escape character (033)
\par               \\h     the hostname up to the first '.'
\par               \\H     the hostname
\par               \\j     the number of jobs currently managed by the shell
\par               \\l     the basename of the shell's terminal device name
\par               \\n     newline
\par               \\r     carriage return
\par               \\s     the name of the shell, the basename of $0 (the portion following the final slash)
\par               \\t     the current time in 24-hour HH:MM:SS format
\par               \\T     the current time in 12-hour HH:MM:SS format
\par               \\@     the current time in 12-hour am/pm format
\par               \\A     the current time in 24-hour HH:MM format
\par               \\u     the username of the current user
\par               \\v     the version of bash (e.g., 2.00)
\par               \\V     the release of bash, version + patch level (e.g., 2.00.0)
\par               \\w     the current working directory, with $HOME abbreviated with a tilde
\par               \\W     the basename of the current working directory, with $HOME abbreviated with a tilde
\par               \\!     the history number of this command
\par               \\#     the command number of this command
\par               \\$     if the effective UID is 0, a #, otherwise a $
\par               \\nnn   the character corresponding to the octal number nnn
\par               \\\\     a backslash
\par               \\[     begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
\par               \\]     end a sequence of non-printing characters
\par 
\par        The command number and the history number are usually different: the history number of a command is its position in the history list, which
\par        may  include  commands restored from the history file (see HISTORY below), while the command number is the position in the sequence of com-
\par        mands executed during the current shell session.  After the string is decoded, it is expanded via parameter  expansion,  command  substitu-
\par        tion,  arithmetic  expansion, and quote removal, subject to the value of the promptvars shell option (see the description of the shopt com-
\par        mand under SHELL BUILTIN COMMANDS below).
\par 
\par \plain \f1\b\fs20 READLINE
\par \plain \f1\fs20        This is the library that handles reading input when using an interactive shell, unless the --noediting option is given at shell invocation.
\par        By  default,  the  line  editing commands are similar to those of emacs.  A vi-style line editing interface is also available.  To turn off
\par        line editing after the shell is running, use the +o emacs or +o vi options to the set builtin (see SHELL BUILTIN COMMANDS below).
\par 
\par    Readline Notation
\par        In this section, the emacs-style notation is used to denote keystrokes.  Control keys are denoted by  C-key,  e.g.,  C-n  means  Control-N.
\par        Similarly,  meta keys are denoted by M-key, so M-x means Meta-X.  (On keyboards without a meta key, M-x means ESC x, i.e., press the Escape
\par        key then the x key.  This makes ESC the meta prefix.  The combination M-C-x means ESC-Control-x, or press the Escape key then hold the Con-
\par        trol key while pressing the x key.)
\par 
\par        Readline commands may be given numeric arguments, which normally act as a repeat count.  Sometimes, however, it is the sign of the argument
\par        that is significant.  Passing a negative argument to a command that acts in the forward direction (e.g., kill-line) causes that command  to
\par        act in a backward direction.  Commands whose behavior with arguments deviates from this are noted below.
\par 
\par        When  a  command is described as killing text, the text deleted is saved for possible future retrieval (yanking).  The killed text is saved
\par        in a kill ring.  Consecutive kills cause the text to be accumulated into one unit, which can be yanked all at once.  Commands which do  not
\par        kill text separate the chunks of text on the kill ring.
\par 
\par    Readline Initialization
\par        Readline  is customized by putting commands in an initialization file (the inputrc file).  The name of this file is taken from the value of
\par        the INPUTRC variable.  If that variable is unset, the default is ~/.inputrc.  When a program which uses the readline library starts up, the
\par        initialization  file  is  read,  and the key bindings and variables are set.  There are only a few basic constructs allowed in the readline
\par        initialization file.  Blank lines are ignored.  Lines beginning with a # are comments.  Lines beginning with a $ indicate conditional  con-
\par        structs.  Other lines denote key bindings and variable settings.
\par 
\par        The  default  key-bindings  may be changed with an inputrc file.  Other programs that use this library may add their own commands and bind-
\par        ings.
\par 
\par        For example, placing
\par 
\par               M-Control-u: universal-argument
\par        or
\par               C-Meta-u: universal-argument
\par        into the inputrc would make M-C-u execute the readline command universal-argument.
\par 
\par        The following symbolic character names are recognized: RUBOUT, DEL, ESC, LFD, NEWLINE, RET, RETURN, SPC, SPACE, and TAB.
\par 
\par        In addition to command names, readline allows keys to be bound to a string that is inserted when the key is pressed (a macro).
\par 
\par    Readline Key Bindings
\par        The syntax for controlling key bindings in the inputrc file is simple.  All that is required is the name of the command or the  text  of  a
\par        macro  and  a key sequence to which it should be bound. The name may be specified in one of two ways: as a symbolic key name, possibly with
\par        Meta- or Control- prefixes, or as a key sequence.
\par 
\par        When using the form keyname:function-name or macro, keyname is the name of a key spelled out in English.  For example:
\par 
\par               Control-u: universal-argument
\par               Meta-Rubout: backward-kill-word
\par               Control-o: "> output"
\par 
\par        In the above example, C-u is bound to the function universal-argument, M-DEL is bound to the function backward-kill-word, and C-o is  bound
\par        to run the macro expressed on the right hand side (that is, to insert the text ''> output'' into the line).
\par 
\par        In  the second form, "keyseq":function-name or macro, keyseq differs from keyname above in that strings denoting an entire key sequence may
\par        be specified by placing the sequence within double quotes.  Some GNU Emacs style key escapes can be used, as in the following example,  but
\par        the symbolic character names are not recognized.
\par 
\par               "\\C-u": universal-argument
\par               "\\C-x\\C-r": re-read-init-file
\par               "\\e[11~": "Function Key 1"
\par 
\par        In  this example, C-u is again bound to the function universal-argument.  C-x C-r is bound to the function re-read-init-file, and ESC [ 1 1
\par        ~ is bound to insert the text ''Function Key 1''.
\par 
\par        The full set of GNU Emacs style escape sequences is
\par               \\C-    control prefix
\par               \\M-    meta prefix
\par               \\e     an escape character
\par               \\\\     backslash
\par               \\"     literal "
\par               \\'     literal '
\par 
\par        In addition to the GNU Emacs style escape sequences, a second set of backslash escapes is available:
\par               \\a     alert (bell)
\par               \\b     backspace
\par               \\d     delete
\par               \\f     form feed
\par               \\n     newline
\par               \\r     carriage return
\par               \\t     horizontal tab
\par               \\v     vertical tab
\par               \\nnn   the eight-bit character whose value is the octal value nnn (one to three digits)
\par               \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
\par 
\par        When entering the text of a macro, single or double quotes must be used to indicate a macro definition.  Unquoted text is assumed to  be  a
\par        function  name.   In  the  macro body, the backslash escapes described above are expanded.  Backslash will quote any other character in the
\par        macro text, including " and '.
\par 
\par        Bash allows the current readline key bindings to be displayed or modified with the bind builtin command.  The editing mode may be  switched
\par        during interactive use by using the -o option to the set builtin command (see SHELL BUILTIN COMMANDS below).
\par 
\par    Readline Variables
\par        Readline  has  variables that can be used to further customize its behavior.  A variable may be set in the inputrc file with a statement of
\par        the form
\par 
\par               set variable-name value
\par 
\par        Except where noted, readline variables can take the values On or Off.  The variables and their default values are:
\par 
\par \plain \f1\b\fs20\cf1        bell-style (audible)
\par \plain \f1\fs20            \plain \f1\fs20\cf1    Controls what happens when readline wants to ring the terminal bell.\plain \f1\fs20   
\par    \tab   If set to none, readline never rings the bell.  If set to visible, readline uses a visible bell if one is available.  
\par               If set to audible, readline attempts to ring the terminal's bell.
\par        comment-begin (''#'')
\par               The string that is inserted when the readline insert-comment command is executed.  This command is bound to M-# in emacs mode and to
\par               # in vi command mode.
\par        completion-ignore-case (Off)
\par               If set to On, readline performs filename matching and completion in a case-insensitive fashion.
\par        completion-query-items (100)
\par               This determines when the user is queried about viewing the number of possible completions generated by the possible-completions com-
\par               mand.   It  may be set to any integer value greater than or equal to zero.  If the number of possible completions is greater than or
\par               equal to the value of this variable, the user is asked whether or not he wishes to view them; otherwise they are  simply  listed  on
\par               the terminal.
\par        convert-meta (On)
\par               If set to On, readline will convert characters with the eighth bit set to an ASCII key sequence by stripping the eighth bit and pre-
\par               fixing an escape character (in effect, using escape as the meta prefix).
\par        disable-completion (Off)
\par               If set to On, readline will inhibit word completion.  Completion characters will be inserted into the  line  as  if  they  had  been
\par               mapped to self-insert.
\par        editing-mode (emacs)
\par               Controls  whether readline begins with a set of key bindings similar to emacs or vi.  editing-mode can be set to either emacs or vi.
\par        enable-keypad (Off)
\par               When set to On, readline will try to enable the application keypad when it is called.  Some systems need this to  enable  the  arrow
\par               keys.
\par        expand-tilde (Off)
\par               If set to on, tilde expansion is performed when readline attempts word completion.
\par        history-preserve-point
\par               If  set  to on, the history code attempts to place point at the same location on each history line retrived with previous-history or
\par               next-history.
\par        horizontal-scroll-mode (Off)
\par               When set to On, makes readline use a single line for display, scrolling the input horizontally on  a  single  screen  line  when  it
\par               becomes longer than the screen width rather than wrapping to a new line.
\par        input-meta (Off)
\par               If  set  to On, readline will enable eight-bit input (that is, it will not strip the high bit from the characters it reads), regard-
\par               less of what the terminal claims it can support.  The name meta-flag is a synonym for this variable.
\par        isearch-terminators (''C-[C-J'')
\par               The string of characters that should terminate an incremental search without subsequently executing the character as a command.   If
\par               this variable has not been given a value, the characters ESC and C-J will terminate an incremental search.
\par        keymap (emacs)
\par               Set  the  current  readline keymap.  The set of valid keymap names is emacs, emacs-standard, emacs-meta, emacs-ctlx, vi, vi-command,
\par               and vi-insert.  vi is equivalent to vi-command; emacs is equivalent to emacs-standard.  The default value is  emacs;  the  value  of
\par               editing-mode also affects the default keymap.
\par        mark-directories (On)
\par               If set to On, completed directory names have a slash appended.
\par        mark-modified-lines (Off)
\par               If set to On, history lines that have been modified are displayed with a preceding asterisk (*).
\par        mark-symlinked-directories (Off)
\par               If  set  to On, completed names which are symbolic links to directories have a slash appended (subject to the value of mark-directo-
\par               ries).
\par        match-hidden-files (On)
\par               This variable, when set to On, causes readline to match files whose names begin with a '.' (hidden files) when  performing  filename
\par               completion, unless the leading '.' is supplied by the user in the filename to be completed.
\par        output-meta (Off)
\par               If set to On, readline will display characters with the eighth bit set directly rather than as a meta-prefixed escape sequence.
\par        page-completions (On)
\par               If set to On, readline uses an internal more-like pager to display a screenful of possible completions at a time.
\par        print-completions-horizontally (Off)
\par               If set to On, readline will display completions with matches sorted horizontally in alphabetical order, rather than down the screen.
\par        show-all-if-ambiguous (Off)
\par               This alters the default behavior of the completion functions.  If set to on, words which have  more  than  one  possible  completion
\par               cause the matches to be listed immediately instead of ringing the bell.
\par        show-all-if-unmodified (Off)
\par               This  alters  the  default  behavior of the completion functions in a fashion similar to show-all-if-ambiguous.  If set to on, words
\par               which have more than one possible completion without any possible partial completion (the possible completions don't share a  common
\par               prefix) cause the matches to be listed immediately instead of ringing the bell.
\par        visible-stats (Off)
\par               If  set  to  On, a character denoting a file's type as reported by stat(2) is appended to the filename when listing possible comple-
\par               tions.
\par 
\par    Readline Conditional Constructs
\par        Readline implements a facility similar in spirit to the conditional compilation features of the C preprocessor which  allows  key  bindings
\par        and variable settings to be performed as the result of tests.  There are four parser directives used.
\par 
\par        $if    The  $if construct allows bindings to be made based on the editing mode, the terminal being used, or the application using readline.
\par               The text of the test extends to the end of the line; no characters are required to isolate it.
\par 
\par               mode   The mode= form of the $if directive is used to test whether readline is in emacs or vi mode.  This may be used in conjunction
\par                      with  the  set keymap command, for instance, to set bindings in the emacs-standard and emacs-ctlx keymaps only if readline is
\par                      starting out in emacs mode.
\par 
\par               term   The term= form may be used to include terminal-specific key bindings, perhaps to bind the key sequences output by the  termi-
\par                      nal's  function  keys.  The word on the right side of the = is tested against the both full name of the terminal and the por-
\par                      tion of the terminal name before the first -.  This allows sun to match both sun and sun-cmd, for instance.
\par 
\par               application
\par                      The application construct is used to include application-specific settings.  Each program using the readline library sets the
\par                      application  name,  and  an initialization file can test for a particular value.  This could be used to bind key sequences to
\par                      functions useful for a specific program.  For instance, the following command adds a key sequence that quotes the current  or
\par                      previous word in Bash:
\par 
\par                      $if Bash
\par                      # Quote the current or previous word
\par                      "\\C-xq": "\\eb\\"\\ef\\""
\par                      $endif
\par 
\par        $endif This command, as seen in the previous example, terminates an $if command.
\par 
\par        $else  Commands in this branch of the $if directive are executed if the test fails.
\par 
\par        $include
\par               This  directive  takes  a single filename as an argument and reads commands and bindings from that file.  For example, the following
\par               directive would read /etc/inputrc:
\par 
\par               $include  /etc/inputrc
\par 
\par    Searching
\par        Readline provides commands for searching through the command history (see HISTORY below) for lines containing a  specified  string.   There
\par        are two search modes: incremental and non-incremental.
\par 
\par        Incremental  searches  begin before the user has finished typing the search string.  As each character of the search string is typed, read-
\par        line displays the next entry from the history matching the string typed so far.  An incremental search requires only as many characters  as
\par        needed to find the desired history entry.  The characters present in the value of the isearch-terminators variable are used to terminate an
\par        incremental search.  If that variable has not been assigned a value the Escape and  Control-J  characters  will  terminate  an  incremental
\par        search.   Control-G  will abort an incremental search and restore the original line.  When the search is terminated, the history entry con-
\par        taining the search string becomes the current line.
\par 
\par        To find other matching entries in the history list, type Control-S or Control-R as appropriate.  This will search backward  or  forward  in
\par        the  history for the next entry matching the search string typed so far.  Any other key sequence bound to a readline command will terminate
\par        the search and execute that command.  For instance, a newline will terminate the search and accept the line, thereby executing the  command
\par        from the history list.
\par 
\par        Readline  remembers  the  last  incremental  search  string.  If two Control-Rs are typed without any intervening characters defining a new
\par        search string, any remembered search string is used.
\par 
\par        Non-incremental searches read the entire search string before starting to search for matching history lines.   The  search  string  may  be
\par        typed by the user or be part of the contents of the current line.
\par 
\par    Readline Command Names
\par        The  following  is  a  list  of  the names of the commands and the default key sequences to which they are bound.  Command names without an
\par        accompanying key sequence are unbound by default.  In the following descriptions, point refers to the current  cursor  position,  and  mark
\par        refers to a cursor position saved by the set-mark command.  The text between the point and mark is referred to as the region.
\par 
\par    Commands for Moving
\par        beginning-of-line (C-a)
\par               Move to the start of the current line.
\par        end-of-line (C-e)
\par               Move to the end of the line.
\par        forward-char (C-f)
\par               Move forward a character.
\par        backward-char (C-b)
\par               Move back a character.
\par        forward-word (M-f)
\par               Move forward to the end of the next word.  Words are composed of alphanumeric characters (letters and digits).
\par        backward-word (M-b)
\par               Move back to the start of the current or previous word.  Words are composed of alphanumeric characters (letters and digits).
\par        clear-screen (C-l)
\par               Clear the screen leaving the current line at the top of the screen.  With an argument, refresh the current line without clearing the
\par               screen.
\par        redraw-current-line
\par               Refresh the current line.
\par 
\par    Commands for Manipulating the History
\par        accept-line (Newline, Return)
\par               Accept the line regardless of where the cursor is.  If this line is non-empty, add it to the history list according to the state  of
\par               the HISTCONTROL variable.  If the line is a modified history line, then restore the history line to its original state.
\par        previous-history (C-p)
\par               Fetch the previous command from the history list, moving back in the list.
\par        next-history (C-n)
\par               Fetch the next command from the history list, moving forward in the list.
\par        beginning-of-history (M-<)
\par               Move to the first line in the history.
\par        end-of-history (M->)
\par               Move to the end of the input history, i.e., the line currently being entered.
\par        reverse-search-history (C-r)
\par               Search backward starting at the current line and moving 'up' through the history as necessary.  This is an incremental search.
\par        forward-search-history (C-s)
\par               Search forward starting at the current line and moving 'down' through the history as necessary.  This is an incremental search.
\par        non-incremental-reverse-search-history (M-p)
\par               Search backward through the history starting at the current line using a non-incremental search for a string supplied by the user.
\par        non-incremental-forward-search-history (M-n)
\par               Search forward through the history using a non-incremental search for a string supplied by the user.
\par        history-search-forward
\par               Search forward through the history for the string of characters between the start of the current line and the point.  This is a non-
\par               incremental search.
\par        history-search-backward
\par               Search backward through the history for the string of characters between the start of the current line and the  point.   This  is  a
\par               non-incremental search.
\par        yank-nth-arg (M-C-y)
\par               Insert  the  first  argument  to  the previous command (usually the second word on the previous line) at point.  With an argument n,
\par               insert the nth word from the previous command (the words in the previous command begin with word 0).  A  negative  argument  inserts
\par               the nth word from the end of the previous command.
\par        yank-last-arg (M-., M-_)
\par               Insert  the  last  argument to the previous command (the last word of the previous history entry).  With an argument, behave exactly
\par               like yank-nth-arg.  Successive calls to yank-last-arg move back through the history list, inserting the last argument of  each  line
\par               in turn.
\par        shell-expand-line (M-C-e)
\par               Expand the line as the shell does.  This performs alias and history expansion as well as all of the shell word expansions.  See HIS-
\par               TORY EXPANSION below for a description of history expansion.
\par        history-expand-line (M-^)
\par               Perform history expansion on the current line.  See HISTORY EXPANSION below for a description of history expansion.
\par        magic-space
\par               Perform history expansion on the current line and insert a space.  See HISTORY EXPANSION below for a description of  history  expan-
\par               sion.
\par        alias-expand-line
\par               Perform alias expansion on the current line.  See ALIASES above for a description of alias expansion.
\par        history-and-alias-expand-line
\par               Perform history and alias expansion on the current line.
\par        insert-last-argument (M-., M-_)
\par               A synonym for yank-last-arg.
\par        operate-and-get-next (C-o)
\par               Accept  the current line for execution and fetch the next line relative to the current line from the history for editing.  Any argu-
\par               ment is ignored.
\par        edit-and-execute-command (C-xC-e)
\par               Invoke an editor on the current command line, and execute the result as shell commands.  Bash attempts to invoke  $FCEDIT,  $EDITOR,
\par               and emacs as the editor, in that order.
\par 
\par    Commands for Changing Text
\par        delete-char (C-d)
\par               Delete  the character at point.  If point is at the beginning of the line, there are no characters in the line, and the last charac-
\par               ter typed was not bound to delete-char, then return EOF.
\par        backward-delete-char (Rubout)
\par               Delete the character behind the cursor.  When given a numeric argument, save the deleted text on the kill ring.
\par        forward-backward-delete-char
\par               Delete the character under the cursor, unless the cursor is at the end of the line, in which case the character behind the cursor is
\par               deleted.
\par        quoted-insert (C-q, C-v)
\par               Add the next character typed to the line verbatim.  This is how to insert characters like C-q, for example.
\par        tab-insert (C-v TAB)
\par               Insert a tab character.
\par        self-insert (a, b, A, 1, !, ...)
\par               Insert the character typed.
\par        transpose-chars (C-t)
\par               Drag  the  character  before point forward over the character at point, moving point forward as well.  If point is at the end of the
\par               line, then this transposes the two characters before point.  Negative arguments have no effect.
\par        transpose-words (M-t)
\par               Drag the word before point past the word after point, moving point over that word as well.  If point is at the end of the line, this
\par               transposes the last two words on the line.
\par        upcase-word (M-u)
\par               Uppercase the current (or following) word.  With a negative argument, uppercase the previous word, but do not move point.
\par        downcase-word (M-l)
\par               Lowercase the current (or following) word.  With a negative argument, lowercase the previous word, but do not move point.
\par        capitalize-word (M-c)
\par               Capitalize the current (or following) word.  With a negative argument, capitalize the previous word, but do not move point.
\par        overwrite-mode
\par               Toggle  overwrite  mode.   With  an  explicit  positive numeric argument, switches to overwrite mode.  With an explicit non-positive
\par               numeric argument, switches to insert mode.  This command affects only emacs mode; vi mode does overwrite differently.  Each call  to
\par               readline()  starts in insert mode.  In overwrite mode, characters bound to self-insert replace the text at point rather than pushing
\par               the text to the right.  Characters bound to backward-delete-char replace the character before point with a space.  By default,  this
\par               command is unbound.
\par 
\par    Killing and Yanking
\par        kill-line (C-k)
\par               Kill the text from point to the end of the line.
\par        backward-kill-line (C-x Rubout)
\par               Kill backward to the beginning of the line.
\par        unix-line-discard (C-u)
\par               Kill backward from point to the beginning of the line.  The killed text is saved on the kill-ring.
\par        kill-whole-line
\par               Kill all characters on the current line, no matter where point is.
\par        kill-word (M-d)
\par               Kill  from  point to the end of the current word, or if between words, to the end of the next word.  Word boundaries are the same as
\par               those used by forward-word.
\par        backward-kill-word (M-Rubout)
\par               Kill the word behind point.  Word boundaries are the same as those used by backward-word.
\par        unix-word-rubout (C-w)
\par               Kill the word behind point, using white space as a word boundary.  The killed text is saved on the kill-ring.
\par        unix-filename-rubout
\par               Kill the word behind point, using white space and the slash character as the word boundaries.  The killed text is saved on the kill-
\par               ring.
\par        delete-horizontal-space (M-\\)
\par               Delete all spaces and tabs around point.
\par        kill-region
\par               Kill the text in the current region.
\par        copy-region-as-kill
\par               Copy the text in the region to the kill buffer.
\par        copy-backward-word
\par               Copy the word before point to the kill buffer.  The word boundaries are the same as backward-word.
\par        copy-forward-word
\par               Copy the word following point to the kill buffer.  The word boundaries are the same as forward-word.
\par        yank (C-y)
\par               Yank the top of the kill ring into the buffer at point.
\par        yank-pop (M-y)
\par               Rotate the kill ring, and yank the new top.  Only works following yank or yank-pop.
\par 
\par \plain \f1\b\fs20    Numeric Arguments
\par \plain \f1\fs20        digit-argument (M-0, M-1, ..., M--)
\par               Add this digit to the argument already accumulating, or start a new argument.  M-- starts a negative argument.
\par        universal-argument
\par               This  is  another  way  to  specify an argument.  If this command is followed by one or more digits, optionally with a leading minus
\par               sign, those digits define the argument.  If the command is followed by digits, executing universal-argument again ends  the  numeric
\par               argument,  but  is  otherwise  ignored.  As a special case, if this command is immediately followed by a character that is neither a
\par               digit or minus sign, the argument count for the next command is multiplied by four.  The argument count is initially one, so execut-
\par               ing this function the first time makes the argument count four, a second time makes the argument count sixteen, and so on.
\par 
\par \plain \f1\b\fs20    Completing
\par \plain \f1\fs20        complete (TAB)
\par               Attempt  to  perform  completion  on  the  text before point.  Bash attempts completion treating the text as a variable (if the text
\par               begins with $), username (if the text begins with ~), hostname (if the text begins with @), or command (including aliases and  func-
\par               tions) in turn.  If none of these produces a match, filename completion is attempted.
\par        possible-completions (M-?)
\par               List the possible completions of the text before point.
\par        insert-completions (M-*)
\par               Insert all completions of the text before point that would have been generated by possible-completions.
\par        menu-complete
\par               Similar to complete, but replaces the word to be completed with a single match from the list of possible completions.  Repeated exe-
\par               cution of menu-complete steps through the list of possible completions, inserting each match in turn.  At the end  of  the  list  of
\par               completions,  the  bell  is rung (subject to the setting of bell-style) and the original text is restored.  An argument of n moves n
\par               positions forward in the list of matches; a negative argument may be used to move  backward  through  the  list.   This  command  is
\par               intended to be bound to TAB, but is unbound by default.
\par        delete-char-or-list
\par               Deletes  the  character  under the cursor if not at the beginning or end of the line (like delete-char).  If at the end of the line,
\par               behaves identically to possible-completions.  This command is unbound by default.
\par        complete-filename (M-/)
\par               Attempt filename completion on the text before point.
\par        possible-filename-completions (C-x /)
\par               List the possible completions of the text before point, treating it as a filename.
\par        complete-username (M-~)
\par               Attempt completion on the text before point, treating it as a username.
\par        possible-username-completions (C-x ~)
\par               List the possible completions of the text before point, treating it as a username.
\par        complete-variable (M-$)
\par               Attempt completion on the text before point, treating it as a shell variable.
\par        possible-variable-completions (C-x $)
\par               List the possible completions of the text before point, treating it as a shell variable.
\par        complete-hostname (M-@)
\par               Attempt completion on the text before point, treating it as a hostname.
\par        possible-hostname-completions (C-x @)
\par               List the possible completions of the text before point, treating it as a hostname.
\par        complete-command (M-!)
\par               Attempt completion on the text before point, treating it as a command name.  Command completion attempts to match the  text  against
\par               aliases, reserved words, shell functions, shell builtins, and finally executable filenames, in that order.
\par        possible-command-completions (C-x !)
\par               List the possible completions of the text before point, treating it as a command name.
\par        dynamic-complete-history (M-TAB)
\par               Attempt completion on the text before point, comparing the text against lines from the history list for possible completion matches.
\par        complete-into-braces (M-\{)
\par               Perform filename completion and insert the list of possible completions enclosed within braces so the list is available to the shell
\par               (see Brace Expansion above).
\par 
\par    Keyboard Macros
\par        start-kbd-macro (C-x ()
\par               Begin saving the characters typed into the current keyboard macro.
\par        end-kbd-macro (C-x ))
\par               Stop saving the characters typed into the current keyboard macro and store the definition.
\par        call-last-kbd-macro (C-x e)
\par               Re-execute the last keyboard macro defined, by making the characters in the macro appear as if typed at the keyboard.
\par 
\par    Miscellaneous
\par        re-read-init-file (C-x C-r)
\par               Read in the contents of the inputrc file, and incorporate any bindings or variable assignments found there.
\par        abort (C-g)
\par               Abort the current editing command and ring the terminal's bell (subject to the setting of bell-style).
\par        do-uppercase-version (M-a, M-b, M-x, ...)
\par               If the metafied character x is lowercase, run the command that is bound to the corresponding uppercase character.
\par        prefix-meta (ESC)
\par               Metafy the next character typed.  ESC f is equivalent to Meta-f.
\par        undo (C-_, C-x C-u)
\par               Incremental undo, separately remembered for each line.
\par        revert-line (M-r)
\par               Undo all changes made to this line.  This is like executing the undo command enough times to return the line to its initial state.
\par        tilde-expand (M-&)
\par               Perform tilde expansion on the current word.
\par        set-mark (C-@, M-<space>)
\par               Set the mark to the point.  If a numeric argument is supplied, the mark is set to that position.
\par        exchange-point-and-mark (C-x C-x)
\par               Swap the point with the mark.  The current cursor position is set to the saved position, and the old cursor position is saved as the
\par               mark.
\par        character-search (C-])
\par               A character is read and point is moved to the next occurrence of that character.  A negative  count  searches  for  previous  occur-
\par               rences.
\par        character-search-backward (M-C-])
\par               A  character  is  read  and  point  is moved to the previous occurrence of that character.  A negative count searches for subsequent
\par               occurrences.
\par        insert-comment (M-#)
\par               Without a numeric argument, the value of the readline comment-begin variable is inserted at the beginning of the current line.  If a
\par               numeric  argument is supplied, this command acts as a toggle:  if the characters at the beginning of the line do not match the value
\par               of comment-begin, the value is inserted, otherwise the characters in comment-begin are deleted from the beginning of the  line.   In
\par               either  case,  the  line is accepted as if a newline had been typed.  The default value of comment-begin causes this command to make
\par               the current line a shell comment.  If a numeric argument causes the comment character to be removed, the line will  be  executed  by
\par               the shell.
\par        glob-complete-word (M-g)
\par               The word before point is treated as a pattern for pathname expansion, with an asterisk implicitly appended.  This pattern is used to
\par               generate a list of matching file names for possible completions.
\par        glob-expand-word (C-x *)
\par               The word before point is treated as a pattern for pathname expansion, and the list of matching file names is inserted, replacing the
\par               word.  If a numeric argument is supplied, an asterisk is appended before pathname expansion.
\par        glob-list-expansions (C-x g)
\par               The list of expansions that would have been generated by glob-expand-word is displayed, and the line is redrawn.  If a numeric argu-
\par               ment is supplied, an asterisk is appended before pathname expansion.
\par        dump-functions
\par               Print all of the functions and their key bindings to the readline output stream.  If a numeric argument is supplied, the  output  is
\par               formatted in such a way that it can be made part of an inputrc file.
\par        dump-variables
\par               Print all of the settable readline variables and their values to the readline output stream.  If a numeric argument is supplied, the
\par               output is formatted in such a way that it can be made part of an inputrc file.
\par        dump-macros
\par               Print all of the readline key sequences bound to macros and the strings they ouput.  If a numeric argument is supplied,  the  output
\par               is formatted in such a way that it can be made part of an inputrc file.
\par        display-shell-version (C-x C-v)
\par               Display version information about the current instance of bash.
\par 
\par    Programmable Completion
\par        When word completion is attempted for an argument to a command for which a completion specification (a compspec) has been defined using the
\par        complete builtin (see SHELL BUILTIN COMMANDS below), the programmable completion facilities are invoked.
\par 
\par        First, the command name is identified.  If a compspec has been defined for that command, the compspec is used to generate the list of  pos-
\par        sible  completions  for  the  word.  If the command word is a full pathname, a compspec for the full pathname is searched for first.  If no
\par        compspec is found for the full pathname, an attempt is made to find a compspec for the portion following the final slash.
\par 
\par        Once a compspec has been found, it is used to generate the list of matching words.  If a compspec is not found, the default bash completion
\par        as described above under Completing is performed.
\par 
\par        First, the actions specified by the compspec are used.  Only matches which are prefixed by the word being completed are returned.  When the
\par        -f or -d option is used for filename or directory name completion, the shell variable FIGNORE is used to filter the matches.
\par 
\par        Any completions specified by a filename expansion pattern to the -G option are generated next.  The words generated by the pattern need not
\par        match the word being completed.  The GLOBIGNORE shell variable is not used to filter the matches, but the FIGNORE variable is used.
\par 
\par        Next,  the string specified as the argument to the -W option is considered.  The string is first split using the characters in the IFS spe-
\par        cial variable as delimiters.  Shell quoting is honored.  Each word is then expanded using brace expansion, tilde expansion,  parameter  and
\par        variable  expansion,  command  substitution, arithmetic expansion, and pathname expansion, as described above under EXPANSION.  The results
\par        are split using the rules described above under Word Splitting.  The results of the expansion are prefix-matched  against  the  word  being
\par        completed, and the matching words become the possible completions.
\par 
\par        After  these  matches have been generated, any shell function or command specified with the -F and -C options is invoked.  When the command
\par        or function is invoked, the COMP_LINE and COMP_POINT variables are assigned values as described above under Shell Variables.   If  a  shell
\par        function  is being invoked, the COMP_WORDS and COMP_CWORD variables are also set.  When the function or command is invoked, the first argu-
\par        ment is the name of the command whose arguments are being completed, the second argument is the word being completed, and the  third  argu-
\par        ment  is  the  word  preceding the word being completed on the current command line.  No filtering of the generated completions against the
\par        word being completed is performed; the function or command has complete freedom in generating the matches.
\par 
\par        Any function specified with -F is invoked first.  The function may use any of the shell facilities, including the compgen builtin described
\par        below, to generate the matches.  It must put the possible completions in the COMPREPLY array variable.
\par 
\par        Next,  any command specified with the -C option is invoked in an environment equivalent to command substitution.  It should print a list of
\par        completions, one per line, to the standard output.  Backslash may be used to escape a newline, if necessary.
\par 
\par        After all of the possible completions are generated, any filter specified with the -X option is applied to the list.  The filter is a  pat-
\par        tern  as used for pathname expansion; a & in the pattern is replaced with the text of the word being completed.  A literal & may be escaped
\par        with a backslash; the backslash is removed before attempting a match.  Any completion that matches the pattern will  be  removed  from  the
\par        list.  A leading ! negates the pattern; in this case any completion not matching the pattern will be removed.
\par 
\par        Finally,  any  prefix  and  suffix  specified with the -P and -S options are added to each member of the completion list, and the result is
\par        returned to the readline completion code as the list of possible completions.
\par 
\par        If the previously-applied actions do not generate any matches, and the -o dirnames option was supplied to complete when  the  compspec  was
\par        defined, directory name completion is attempted.
\par 
\par        If  the  -o  plusdirs option was supplied to complete when the compspec was defined, directory name completion is attempted and any matches
\par        are added to the results of the other actions.
\par 
\par        By default, if a compspec is found, whatever it generates is returned to the completion code as the full set of possible completions.   The
\par        default  bash completions are not attempted, and the readline default of filename completion is disabled.  If the -o bashdefault option was
\par        supplied to complete when the compspec was defined, the bash default completions are attempted if the compspec generates  no  matches.   If
\par        the  -o default option was supplied to complete when the compspec was defined, readline's default completion will be performed if the comp-
\par        spec (and, if attempted, the default bash completions) generate no matches.
\par 
\par        When a compspec indicates that directory name completion is desired, the programmable completion functions force readline to append a slash
\par        to  completed  names which are symbolic links to directories, subject to the value of the mark-directories readline variable, regardless of
\par        the setting of the mark-symlinked-directories readline variable.
\par 
\par HISTORY
\par        When the -o history option to the set builtin is enabled, the shell provides access to the command history, the list of commands previously
\par        typed.  The value of the HISTSIZE variable is used as the number of commands to save in a history list.  The text of the last HISTSIZE com-
\par        mands (default 500) is saved.  The shell stores each command in the history list prior to parameter and variable expansion  (see  EXPANSION
\par        above) but after history expansion is performed, subject to the values of the shell variables HISTIGNORE and HISTCONTROL.
\par 
\par        On startup, the history is initialized from the file named by the variable HISTFILE (default ~/.bash_history).  The file named by the value
\par        of HISTFILE is truncated, if necessary, to contain no more than the number of lines specified by the value of HISTFILESIZE.  When an inter-
\par        active shell exits, the last $HISTSIZE lines are copied from the history list to $HISTFILE.  If the histappend shell option is enabled (see
\par        the description of shopt under SHELL BUILTIN COMMANDS below), the lines are appended to the history file, otherwise  the  history  file  is
\par        overwritten.   If HISTFILE is unset, or if the history file is unwritable, the history is not saved.  After saving the history, the history
\par        file is truncated to contain no more than HISTFILESIZE lines.  If HISTFILESIZE is not set, no truncation is performed.
\par 
\par        The builtin command fc (see SHELL BUILTIN COMMANDS below) may be used to list or edit and re-execute a portion of the  history  list.   The
\par        history builtin may be used to display or modify the history list and manipulate the history file.  When using command-line editing, search
\par        commands are available in each editing mode that provide access to the history list.
\par 
\par        The shell allows control over which commands are saved on the history list.  The HISTCONTROL and HISTIGNORE variables may be set  to  cause
\par        the  shell  to  save only a subset of the commands entered.  The cmdhist shell option, if enabled, causes the shell to attempt to save each
\par        line of a multi-line command in the same history entry, adding semicolons where necessary to preserve syntactic correctness.   The  lithist
\par        shell  option  causes the shell to save the command with embedded newlines instead of semicolons.  See the description of the shopt builtin
\par        below under SHELL BUILTIN COMMANDS for information on setting and unsetting shell options.
\par 
\par HISTORY EXPANSION
\par        The shell supports a history expansion feature that is similar to the history expansion in csh.  This section describes  what  syntax  fea-
\par        tures are available.  This feature is enabled by default for interactive shells, and can be disabled using the +H option to the set builtin
\par        command (see SHELL BUILTIN COMMANDS below).  Non-interactive shells do not perform history expansion by default.
\par 
\par        History expansions introduce words from the history list into the input stream, making it easy to repeat commands, insert the arguments  to
\par        a previous command into the current input line, or fix errors in previous commands quickly.
\par 
\par        History  expansion  is  performed  immediately after a complete line is read, before the shell breaks it into words.  It takes place in two
\par        parts.  The first is to determine which line from the history list to use during substitution.  The second is to select  portions  of  that
\par        line  for  inclusion  into  the current one.  The line selected from the history is the event, and the portions of that line that are acted
\par        upon are words.  Various modifiers are available to manipulate the selected words.  The line is broken into words in the  same  fashion  as
\par        when  reading  input,  so  that several metacharacter-separated words surrounded by quotes are considered one word.  History expansions are
\par        introduced by the appearance of the history expansion character, which is ! by default.  Only backslash (\\) and single quotes can quote the
\par        history expansion character.
\par 
\par        Several characters inhibit history expansion if found immediately following the history expansion character, even if it is unquoted: space,
\par        tab, newline, carriage return, and =.  If the extglob shell option is enabled, ( will also inhibit expansion.
\par 
\par        Several shell options settable with the shopt builtin may be used to tailor the behavior of history expansion.   If  the  histverify  shell
\par        option  is enabled (see the description of the shopt builtin), and readline is being used, history substitutions are not immediately passed
\par        to the shell parser.  Instead, the expanded line is reloaded into the readline editing buffer for further  modification.   If  readline  is
\par        being used, and the histreedit shell option is enabled, a failed history substitution will be reloaded into the readline editing buffer for
\par        correction.  The -p option to the history builtin command may be used to see what a history expansion will do  before  using  it.   The  -s
\par        option  to the history builtin may be used to add commands to the end of the history list without actually executing them, so that they are
\par        available for subsequent recall.
\par 
\par        The shell allows control of the various characters used by the history expansion mechanism (see the description of  histchars  above  under
\par        Shell Variables).
\par 
\par    Event Designators
\par        An event designator is a reference to a command line entry in the history list.
\par 
\par        !      Start  a  history  substitution, except when followed by a blank, newline, carriage return, = or ( (when the extglob shell option is
\par               enabled using the shopt builtin).
\par        !n     Refer to command line n.
\par        !-n    Refer to the current command line minus n.
\par        !!     Refer to the previous command.  This is a synonym for '!-1'.
\par        !string
\par               Refer to the most recent command starting with string.
\par        !?string[?]
\par               Refer to the most recent command containing string.  The trailing ? may be omitted if string is followed immediately by a newline.
\par        ^string1^string2^
\par               Quick substitution.  Repeat the last command, replacing string1 with string2.  Equivalent to  ''!!:s/string1/string2/''  (see  Modi-
\par               fiers below).
\par        !#     The entire command line typed so far.
\par 
\par    Word Designators
\par        Word  designators are used to select desired words from the event.  A : separates the event specification from the word designator.  It may
\par        be omitted if the word designator begins with a ^, $, *, -, or %.  Words are numbered from the beginning of the line, with the  first  word
\par        being denoted by 0 (zero).  Words are inserted into the current line separated by single spaces.
\par 
\par        0 (zero)
\par               The zeroth word.  For the shell, this is the command word.
\par        n      The nth word.
\par        ^      The first argument.  That is, word 1.
\par        $      The last argument.
\par        %      The word matched by the most recent '?string?' search.
\par        x-y    A range of words; '-y' abbreviates '0-y'.
\par        *      All  of the words but the zeroth.  This is a synonym for '1-$'.  It is not an error to use * if there is just one word in the event;
\par               the empty string is returned in that case.
\par        x*     Abbreviates x-$.
\par        x-     Abbreviates x-$ like x*, but omits the last word.
\par 
\par        If a word designator is supplied without an event specification, the previous command is used as the event.
\par 
\par    Modifiers
\par        After the optional word designator, there may appear a sequence of one or more of the following modifiers, each preceded by a ':'.
\par 
\par        h      Remove a trailing file name component, leaving only the head.
\par        t      Remove all leading file name components, leaving the tail.
\par        r      Remove a trailing suffix of the form .xxx, leaving the basename.
\par        e      Remove all but the trailing suffix.
\par        p      Print the new command but do not execute it.
\par        q      Quote the substituted words, escaping further substitutions.
\par        x      Quote the substituted words as with q, but break into words at blanks and newlines.
\par        s/old/new/
\par               Substitute new for the first occurrence of old in the event line.  Any delimiter can be used in place of /.  The final delimiter  is
\par               optional  if  it is the last character of the event line.  The delimiter may be quoted in old and new with a single backslash.  If &
\par               appears in new, it is replaced by old.  A single backslash will quote the &.  If old is null, it is set to the last old substituted,
\par               or, if no previous history substitutions took place, the last string in a !?string[?]  search.
\par        &      Repeat the previous substitution.
\par        g      Cause  changes  to be applied over the entire event line.  This is used in conjunction with ':s' (e.g., ':gs/old/new/') or ':&'.  If
\par               used with ':s', any delimiter can be used in place of /, and the final delimiter is optional if it is  the  last  character  of  the
\par               event line.  An a may be used as a synonym for g.
\par        G      Apply the following 's' modifier once to each word in the event line.
\par 
\par SHELL BUILTIN COMMANDS
\par        Unless otherwise noted, each builtin command documented in this section as accepting options preceded by - accepts -- to signify the end of
\par        the options.
\par        : [arguments]
\par               No effect; the command does nothing beyond expanding arguments and performing any specified  redirections.   A  zero  exit  code  is
\par               returned.
\par 
\par         .  filename [arguments]
\par        source filename [arguments]
\par               Read  and  execute  commands  from filename in the current shell environment and return the exit status of the last command executed
\par               from filename.  If filename does not contain a slash, file names in PATH are used to find the directory  containing  filename.   The
\par               file  searched  for in PATH need not be executable.  When bash is not in posix mode, the current directory is searched if no file is
\par               found in PATH.  If the sourcepath option to the shopt builtin command is turned off, the PATH is not searched.  If any arguments are
\par               supplied,  they become the positional parameters when filename is executed.  Otherwise the positional parameters are unchanged.  The
\par               return status is the status of the last command exited within the script (0 if no commands are executed), and false if  filename  is
\par               not found or cannot be read.
\par 
\par        alias [-p] [name[=value] ...]
\par               Alias  with  no  arguments  or  with the -p option prints the list of aliases in the form alias name=value on standard output.  When
\par               arguments are supplied, an alias is defined for each name whose value is given.  A trailing space in  value causes the next word  to
\par               be  checked  for  alias substitution when the alias is expanded.  For each name in the argument list for which no value is supplied,
\par               the name and value of the alias is printed.  Alias returns true unless a name is given for which no alias has been defined.
\par 
\par        bg [jobspec]
\par               Resume the suspended job jobspec in the background, as if it had been started with &.  If jobspec is not present, the shell's notion
\par               of  the current job is used.  bg jobspec returns 0 unless run when job control is disabled or, when run with job control enabled, if
\par               jobspec was not found or started without job control.
\par 
\par        bind [-m keymap] [-lpsvPSV]
\par        bind [-m keymap] [-q function] [-u function] [-r keyseq]
\par        bind [-m keymap] -f filename
\par        bind [-m keymap] -x keyseq:shell-command
\par        bind [-m keymap] keyseq:function-name
\par        bind readline-command
\par               Display current readline key and function bindings, bind a key sequence to a readline function or macro, or set a readline variable.
\par               Each non-option argument is a command as it would appear in .inputrc, but each binding or command must be passed as a separate argu-
\par               ment; e.g., '"\\C-x\\C-r": re-read-init-file'.  Options, if supplied, have the following meanings:
\par               -m keymap
\par                      Use keymap as the keymap to be affected by the subsequent bindings.   Acceptable  keymap  names  are  emacs,  emacs-standard,
\par                      emacs-meta,  emacs-ctlx,  vi,  vi-move,  vi-command,  and  vi-insert.  vi is equivalent to vi-command; emacs is equivalent to
\par                      emacs-standard.
\par               -l     List the names of all readline functions.
\par               -p     Display readline function names and bindings in such a way that they can be re-read.
\par               -P     List current readline function names and bindings.
\par               -v     Display readline variable names and values in such a way that they can be re-read.
\par               -V     List current readline variable names and values.
\par               -s     Display readline key sequences bound to macros and the strings they output in such a way that they can be re-read.
\par               -S     Display readline key sequences bound to macros and the strings they output.
\par               -f filename
\par                      Read key bindings from filename.
\par               -q function
\par                      Query about which keys invoke the named function.
\par               -u function
\par                      Unbind all keys bound to the named function.
\par               -r keyseq
\par                      Remove any current binding for keyseq.
\par               -x keyseq:shell-command
\par                      Cause shell-command to be executed whenever keyseq is entered.
\par 
\par               The return value is 0 unless an unrecognized option is given or an error occurred.
\par 
\par        break [n]
\par               Exit from within a for, while, until, or select loop.  If n is specified, break n levels.  n must be >= 1.  If n is greater than  the
\par               number  of  enclosing  loops,  all  enclosing loops are exited.  The return value is 0 unless the shell is not executing a loop when
\par               break is executed.
\par 
\par        builtin shell-builtin [arguments]
\par               Execute the specified shell builtin, passing it arguments, and return its exit status.  This is  useful  when  defining  a  function
\par               whose  name  is the same as a shell builtin, retaining the functionality of the builtin within the function.  The cd builtin is com-
\par               monly redefined this way.  The return status is false if shell-builtin is not a shell builtin command.
\par 
\par        cd [-L|-P] [dir]
\par               Change the current directory to dir.  The variable HOME is the default dir.  The variable CDPATH defines the  search  path  for  the
\par               directory  containing  dir.  Alternative directory names in CDPATH are separated by a colon (:).  A null directory name in CDPATH is
\par               the same as the current directory, i.e., ''.''.  If dir begins with a slash (/), then CDPATH is not used. The -P option says to  use
\par               the  physical  directory  structure  instead of following symbolic links (see also the -P option to the set builtin command); the -L
\par               option forces symbolic links to be followed.  An argument of - is equivalent to $OLDPWD.  If a non-empty directory name from  CDPATH
\par               is  used,  or if - is the first argument, and the directory change is successful, the absolute pathname of the new working directory
\par               is written to the standard output.  The return value is true if the directory was successfully changed; false otherwise.
\par 
\par        caller [expr]
\par               Returns the context of any active subroutine call (a shell function or a script executed with the .  or  source  builtins.   Without
\par               expr,  caller displays the line number and source filename of the current subroutine call.  If a non-negative integer is supplied as
\par               expr, caller displays the line number, subroutine name, and source file corresponding to that position in the current execution call
\par               stack.  This extra information may be used, for example, to print a stack trace.  The current frame is frame 0.  The return value is
\par               0 unless the shell is not executing a subroutine call or expr does not correspond to a valid position in the call stack.
\par 
\par        command [-pVv] command [arg ...]
\par               Run command with args suppressing the normal shell function lookup. Only builtin commands or commands found in  the  PATH  are  exe-
\par               cuted.  If the -p option is given, the search for command is performed using a default value for PATH that is guaranteed to find all
\par               of the standard utilities.  If either the -V or -v option is supplied, a description of command is printed.  The -v option causes  a
\par               single  word  indicating  the  command  or  file  name used to invoke command to be displayed; the -V option produces a more verbose
\par               description.  If the -V or -v option is supplied, the exit status is 0 if command was found, and 1 if not.   If  neither  option  is
\par               supplied  and  an  error  occurred  or  command  cannot be found, the exit status is 127.  Otherwise, the exit status of the command
\par               builtin is the exit status of command.
\par 
\par        compgen [option] [word]
\par               Generate possible completion matches for word according to the options, which may be any option accepted  by  the  complete  builtin
\par               with  the  exception of -p and -r, and write the matches to the standard output.  When using the -F or -C options, the various shell
\par               variables set by the programmable completion facilities, while available, will not have useful values.
\par 
\par               The matches will be generated in the same way as if the programmable completion code had generated them directly from  a  completion
\par               specification with the same flags.  If word is specified, only those completions matching word will be displayed.
\par 
\par               The return value is true unless an invalid option is supplied, or no matches were generated.
\par 
\par        complete [-abcdefgjksuv] [-o comp-option] [-A action] [-G globpat] [-W wordlist] [-P prefix] [-S suffix]
\par               [-X filterpat] [-F function] [-C command] name [name ...]
\par        complete -pr [name ...]
\par               Specify  how arguments to each name should be completed.  If the -p option is supplied, or if no options are supplied, existing com-
\par               pletion specifications are printed in a way that allows them to be reused as input.  The -r option removes a  completion  specifica-
\par               tion for each name, or, if no names are supplied, all completion specifications.
\par 
\par               The process of applying these completion specifications when word completion is attempted is described above under Programmable Com-
\par               pletion.
\par 
\par               Other options, if specified, have the following meanings.  The arguments to the -G, -W, and -X options (and, if  necessary,  the  -P
\par               and -S options) should be quoted to protect them from expansion before the complete builtin is invoked.
\par               -o comp-option
\par                       The  comp-option  controls  several  aspects  of the compspec's behavior beyond the simple generation of completions.  comp-
\par                       option may be one of:
\par                       bashdefault
\par                               Perform the rest of the default bash completions if the compspec generates no matches.
\par                       default Use readline's default filename completion if the compspec generates no matches.
\par                       dirnames
\par                               Perform directory name completion if the compspec generates no matches.
\par                       filenames
\par                               Tell readline that the compspec generates filenames, so it can perform any filename-specific processing (like adding
\par                               a slash to directory names or suppressing trailing spaces).  Intended to be used with shell functions.
\par                       nospace Tell readline not to append a space (the default) to words completed at the end of the line.
\par               -A action
\par                       The action may be one of the following to generate a list of possible completions:
\par                       alias   Alias names.  May also be specified as -a.
\par                       arrayvar
\par                               Array variable names.
\par                       binding Readline key binding names.
\par                       builtin Names of shell builtin commands.  May also be specified as -b.
\par                       command Command names.  May also be specified as -c.
\par                       directory
\par                               Directory names.  May also be specified as -d.
\par                       disabled
\par                               Names of disabled shell builtins.
\par                       enabled Names of enabled shell builtins.
\par                       export  Names of exported shell variables.  May also be specified as -e.
\par                       file    File names.  May also be specified as -f.
\par                       function
\par                               Names of shell functions.
\par                       group   Group names.  May also be specified as -g.
\par                       helptopic
\par                               Help topics as accepted by the help builtin.
\par                       hostname
\par                               Hostnames, as taken from the file specified by the HOSTFILE shell variable.
\par                       job     Job names, if job control is active.  May also be specified as -j.
\par                       keyword Shell reserved words.  May also be specified as -k.
\par                       running Names of running jobs, if job control is active.
\par                       service Service names.  May also be specified as -s.
\par                       setopt  Valid arguments for the -o option to the set builtin.
\par                       shopt   Shell option names as accepted by the shopt builtin.
\par                       signal  Signal names.
\par                       stopped Names of stopped jobs, if job control is active.
\par                       user    User names.  May also be specified as -u.
\par                       variable
\par                               Names of all shell variables.  May also be specified as -v.
\par               -G globpat
\par                       The filename expansion pattern globpat is expanded to generate the possible completions.
\par               -W wordlist
\par                       The  wordlist  is split using the characters in the IFS special variable as delimiters, and each resultant word is expanded.
\par                       The possible completions are the members of the resultant list which match the word being completed.
\par               -C command
\par                       command is executed in a subshell environment, and its output is used as the possible completions.
\par               -F function
\par                       The shell function function is executed in the current shell environment.  When it finishes, the  possible  completions  are
\par                       retrieved from the value of the COMPREPLY array variable.
\par               -X filterpat
\par                       filterpat  is  a pattern as used for filename expansion.  It is applied to the list of possible completions generated by the
\par                       preceding options and arguments, and each completion matching filterpat is removed from the list.  A leading ! in  filterpat
\par                       negates the pattern; in this case, any completion not matching filterpat is removed.
\par               -P prefix
\par                       prefix is added at the beginning of each possible completion after all other options have been applied.
\par               -S suffix
\par                       suffix is appended to each possible completion after all other options have been applied.
\par 
\par               The return value is true unless an invalid option is supplied, an option other than -p or -r is supplied without a name argument, an
\par               attempt is made to remove a completion specification for a name for which no specification exists, or an error occurs adding a  com-
\par               pletion specification.
\par 
\par        continue [n]
\par               Resume  the next iteration of the enclosing for, while, until, or select loop.  If n is specified, resume at the nth enclosing loop.
\par               n must be >= 1.  If n is greater than the number of enclosing loops, the last enclosing loop (the  ''top-level''  loop)  is  resumed.
\par               The return value is 0 unless the shell is not executing a loop when continue is executed.
\par 
\par        declare [-afFirtx] [-p] [name[=value] ...]
\par        typeset [-afFirtx] [-p] [name[=value] ...]
\par               Declare variables and/or give them attributes.  If no names are given then display the values of variables.  The -p option will dis-
\par               play the attributes and values of each name.  When -p is used, additional options are ignored.  The -F option inhibits  the  display
\par               of  function  definitions;  only the function name and attributes are printed.  If the extdebug shell option is enabled using shopt,
\par               the source file name and line number where the function is defined are displayed as well.  The -F option implies -f.  The  following
\par               options can be used to restrict output to variables with the specified attribute or to give variables attributes:
\par               -a     Each name is an array variable (see Arrays above).
\par               -f     Use function names only.
\par               -i     The  variable  is treated as an integer; arithmetic evaluation (see ARITHMETIC EVALUATION ) is performed when the variable is
\par                      assigned a value.
\par               -r     Make names readonly.  These names cannot then be assigned values by subsequent assignment statements or unset.
\par               -t     Give each name the trace attribute.  Traced functions inherit the DEBUG trap from the calling shell.  The trace attribute has
\par                      no special meaning for variables.
\par               -x     Mark names for export to subsequent commands via the environment.
\par 
\par               Using  '+'  instead of '-' turns off the attribute instead, with the exception that +a may not be used to destroy an array variable.
\par               When used in a function, makes each name local, as with the local command.  If a variable name is followed by =value, the  value  of
\par               the  variable  is set to value.  The return value is 0 unless an invalid option is encountered, an attempt is made to define a func-
\par               tion using ''-f foo=bar'', an attempt is made to assign a value to a readonly variable, an attempt is made to assign a value  to  an
\par               array variable without using the compound assignment syntax (see Arrays above), one of the names is not a valid shell variable name,
\par               an attempt is made to turn off readonly status for a readonly variable, an attempt is made to turn off array  status  for  an  array
\par               variable, or an attempt is made to display a non-existent function with -f.
\par 
\par        dirs [-clpv] [+n] [-n]
\par               Without  options,  displays  the  list  of currently remembered directories.  The default display is on a single line with directory
\par               names separated by spaces.  Directories are added to the list with the pushd command; the popd  command  removes  entries  from  the
\par               list.
\par               +n     Displays the nth entry counting from the left of the list shown by dirs when invoked without options, starting with zero.
\par               -n     Displays the nth entry counting from the right of the list shown by dirs when invoked without options, starting with zero.
\par               -c     Clears the directory stack by deleting all of the entries.
\par               -l     Produces a longer listing; the default listing format uses a tilde to denote the home directory.
\par               -p     Print the directory stack with one entry per line.
\par               -v     Print the directory stack with one entry per line, prefixing each entry with its index in the stack.
\par 
\par               The return value is 0 unless an invalid option is supplied or n indexes beyond the end of the directory stack.
\par 
\par        disown [-ar] [-h] [jobspec ...]
\par               Without options, each jobspec is removed from the table of active jobs.  If the -h option is given, each jobspec is not removed from
\par               the table, but is marked so that SIGHUP is not sent to the job if the shell receives a SIGHUP.  If no jobspec is present,  and  nei-
\par               ther  the  -a  nor  the -r option is supplied, the current job is used.  If no jobspec is supplied, the -a option means to remove or
\par               mark all jobs; the -r option without a jobspec argument restricts operation to running jobs.  The return value is 0 unless a jobspec
\par               does not specify a valid job.
\par 
\par        echo [-neE] [arg ...]
\par               Output  the args, separated by spaces, followed by a newline.  The return status is always 0.  If -n is specified, the trailing new-
\par               line is suppressed.  If the -e option is given, interpretation of the following backslash-escaped characters  is  enabled.   The  -E
\par               option  disables the interpretation of these escape characters, even on systems where they are interpreted by default.  The xpg_echo
\par               shell option may be used to dynamically determine whether or not echo expands these escape characters by  default.   echo  does  not
\par               interpret -- to mean the end of options.  echo interprets the following escape sequences:
\par               \\a     alert (bell)
\par               \\b     backspace
\par               \\c     suppress trailing newline
\par               \\e     an escape character
\par               \\f     form feed
\par               \\n     new line
\par               \\r     carriage return
\par               \\t     horizontal tab
\par               \\v     vertical tab
\par               \\\\     backslash
\par               \\0nnn  the eight-bit character whose value is the octal value nnn (zero to three octal digits)
\par               \\nnn   the eight-bit character whose value is the octal value nnn (one to three octal digits)
\par               \\xHH   the eight-bit character whose value is the hexadecimal value HH (one or two hex digits)
\par 
\par        enable [-adnps] [-f filename] [name ...]
\par               Enable  and disable builtin shell commands.  Disabling a builtin allows a disk command which has the same name as a shell builtin to
\par               be executed without specifying a full pathname, even though the shell normally searches for builtins before disk commands.  If -n is
\par               used,  each  name  is disabled; otherwise, names are enabled.  For example, to use the test binary found via the PATH instead of the
\par               shell builtin version, run ''enable -n test''.  The -f option means to load the new builtin command name from  shared  object  file-
\par               name, on systems that support dynamic loading.  The -d option will delete a builtin previously loaded with -f.  If no name arguments
\par               are given, or if the -p option is supplied, a list of shell builtins is printed.  With no other option arguments, the list  consists
\par               of all enabled shell builtins.  If -n is supplied, only disabled builtins are printed.  If -a is supplied, the list printed includes
\par               all builtins, with an indication of whether or not each is enabled.  If -s is supplied, the output is restricted to the  POSIX  spe-
\par               cial  builtins.  The return value is 0 unless a name is not a shell builtin or there is an error loading a new builtin from a shared
\par               object.
\par 
\par        eval [arg ...]
\par               The args are read and concatenated together into a single command.  This command is then read and executed by  the  shell,  and  its
\par               exit status is returned as the value of eval.  If there are no args, or only null arguments, eval returns 0.
\par 
\par        exec [-cl] [-a name] [command [arguments]]
\par               If  command is specified, it replaces the shell.  No new process is created.  The arguments become the arguments to command.  If the
\par               -l option is supplied, the shell places a dash at the beginning of the zeroth arg passed to command.  This is  what  login(1)  does.
\par               The -c option causes command to be executed with an empty environment.  If -a is supplied, the shell passes name as the zeroth argu-
\par               ment to the executed command.  If command cannot be executed for some reason, a non-interactive shell exits, unless the shell option
\par               execfail  is  enabled,  in  which case it returns failure.  An interactive shell returns failure if the file cannot be executed.  If
\par               command is not specified, any redirections take effect in the current shell, and the return status is 0.  If there is a  redirection
\par               error, the return status is 1.
\par 
\par        exit [n]
\par               Cause  the shell to exit with a status of n.  If n is omitted, the exit status is that of the last command executed.  A trap on EXIT
\par               is executed before the shell terminates.
\par 
\par        export [-fn] [name[=word]] ...
\par        export -p
\par               The supplied names are marked for automatic export to the environment of subsequently executed commands.  If the -f option is given,
\par               the names refer to functions.  If no names are given, or if the -p option is supplied, a list of all names that are exported in this
\par               shell is printed.  The -n option causes the export property to be removed from each name.  If a variable name is followed by  =word,
\par               the  value  of  the variable is set to word.  export returns an exit status of 0 unless an invalid option is encountered, one of the
\par               names is not a valid shell variable name, or -f is supplied with a name that is not a function.
\par 
\par        fc [-e ename] [-nlr] [first] [last]
\par        fc -s [pat=rep] [cmd]
\par               Fix Command.  In the first form, a range of commands from first to last is selected from the history list.  First and  last  may  be
\par               specified  as a string (to locate the last command beginning with that string) or as a number (an index into the history list, where
\par               a negative number is used as an offset from the current command number).  If last is not specified it is set to the current  command
\par               for  listing (so that ''fc -l -10'' prints the last 10 commands) and to first otherwise.  If first is not specified it is set to the
\par               previous command for editing and -16 for listing.
\par 
\par               The -n option suppresses the command numbers when listing.  The -r option reverses the order of the commands.  If the -l  option  is
\par               given,  the commands are listed on standard output.  Otherwise, the editor given by ename is invoked on a file containing those com-
\par               mands.  If ename is not given, the value of the FCEDIT variable is used, and the value of EDITOR if FCEDIT is not set.   If  neither
\par               variable is set, vi is used.  When editing is complete, the edited commands are echoed and executed.
\par 
\par               In  the  second  form,  command  is  re-executed  after each instance of pat is replaced by rep.  A useful alias to use with this is
\par               ''r="fc -s"'', so that typing ''r cc'' runs the last command beginning with ''cc'' and typing ''r'' re-executes the last command.
\par 
\par               If the first form is used, the return value is 0 unless an invalid option is encountered or first or last specify history lines  out
\par               of  range.   If  the -e option is supplied, the return value is the value of the last command executed or failure if an error occurs
\par               with the temporary file of commands.  If the second form is used, the return status is that of the command re-executed,  unless  cmd
\par               does not specify a valid history line, in which case fc returns failure.
\par 
\par        fg [jobspec]
\par               Resume  jobspec in the foreground, and make it the current job.  If jobspec is not present, the shell's notion of the current job is
\par               used.  The return value is that of the command placed into the foreground, or failure if run when job control is disabled  or,  when
\par               run  with  job control enabled, if jobspec does not specify a valid job or jobspec specifies a job that was started without job con-
\par               trol.
\par 
\par        getopts optstring name [args]
\par               getopts is used by shell procedures to parse positional parameters.  optstring contains the option characters to be recognized; if a
\par               character is followed by a colon, the option is expected to have an argument, which should be separated from it by white space.  The
\par               colon and question mark characters may not be used as option characters.  Each time it is invoked, getopts places the next option in
\par               the  shell  variable name, initializing name if it does not exist, and the index of the next argument to be processed into the vari-
\par               able OPTIND.  OPTIND is initialized to 1 each time the shell or a shell script is invoked.  When an  option  requires  an  argument,
\par               getopts  places  that  argument  into the variable OPTARG.  The shell does not reset OPTIND automatically; it must be manually reset
\par               between multiple calls to getopts within the same shell invocation if a new set of parameters is to be used.
\par 
\par               When the end of options is encountered, getopts exits with a return value greater than zero.  OPTIND is set  to  the  index  of  the
\par               first non-option argument, and name is set to ?.
\par 
\par               getopts normally parses the positional parameters, but if more arguments are given in args, getopts parses those instead.
\par 
\par               getopts  can  report errors in two ways.  If the first character of optstring is a colon, silent error reporting is used.  In normal
\par               operation diagnostic messages are printed when invalid options or missing option arguments are encountered.  If the variable  OPTERR
\par               is set to 0, no error messages will be displayed, even if the first character of optstring is not a colon.
\par 
\par               If  an invalid option is seen, getopts places ? into name and, if not silent, prints an error message and unsets OPTARG.  If getopts
\par               is silent, the option character found is placed in OPTARG and no diagnostic message is printed.
\par 
\par               If a required argument is not found, and getopts is not silent, a question mark (?) is placed in name, OPTARG is unset, and a  diag-
\par               nostic  message  is  printed.   If  getopts  is silent, then a colon (:) is placed in name and OPTARG is set to the option character
\par               found.
\par 
\par               getopts returns true if an option, specified or unspecified, is found.  It returns false if the end of options is encountered or  an
\par               error occurs.
\par 
\par        hash [-lr] [-p filename] [-dt] [name]
\par               For  each  name,  the  full  file name of the command is determined by searching the directories in $PATH and remembered.  If the -p
\par               option is supplied, no path search is performed, and filename is used as the full file name of the command.  The  -r  option  causes
\par               the  shell  to  forget all remembered locations.  The -d option causes the shell to forget the remembered location of each name.  If
\par               the -t option is supplied, the full pathname to which each name corresponds is printed.  If multiple  name  arguments  are  supplied
\par               with  -t,  the name is printed before the hashed full pathname.  The -l option causes output to be displayed in a format that may be
\par               reused as input.  If no arguments are given, or if only -l is supplied, information  about  remembered  commands  is  printed.   The
\par               return status is true unless a name is not found or an invalid option is supplied.
\par 
\par        help [-s] [pattern]
\par               Display helpful information about builtin commands.  If pattern is specified, help gives detailed help on all commands matching pat-
\par               tern; otherwise help for all the builtins and shell control structures is printed.  The -s option  restricts  the  information  dis-
\par               played to a short usage synopsis.  The return status is 0 unless no command matches pattern.
\par 
\par        history [n]
\par        history -c
\par        history -d offset
\par        history -anrw [filename]
\par        history -p arg [arg ...]
\par        history -s arg [arg ...]
\par               With  no  options,  display the command history list with line numbers.  Lines listed with a * have been modified.  An argument of n
\par               lists only the last n lines.  If the shell variable HISTTIMEFORMAT is set and not null, it is used as  a  format  string  for  strf-
\par               time(3) to display the time stamp associated with each displayed history entry.  No intervening blank is printed between the format-
\par               ted time stamp and the history line.  If filename is supplied, it is used as the name of the history file;  if  not,  the  value  of
\par               HISTFILE is used.  Options, if supplied, have the following meanings:
\par               -c     Clear the history list by deleting all the entries.
\par               -d offset
\par                      Delete the history entry at position offset.
\par               -a     Append the ''new'' history lines (history lines entered since the beginning of the current bash session) to the history file.
\par               -n     Read the history lines not already read from the history file into the current history list.  These are lines appended to the
\par                      history file since the beginning of the current bash session.
\par               -r     Read the contents of the history file and use them as the current history.
\par               -w     Write the current history to the history file, overwriting the history file's contents.
\par               -p     Perform history substitution on the following args and display the result on the standard output.  Does not store the results
\par                      in the history list.  Each arg must be quoted to disable normal history expansion.
\par               -s     Store the args in the history list as a single entry.  The last command in the history list is removed before  the  args  are
\par                      added.
\par 
\par               If  the  HISTTIMEFORMAT  is  set, the time stamp information associated with each history entry is written to the history file.  The
\par               return value is 0 unless an invalid option is encountered, an error occurs while reading or writing the  history  file,  an  invalid
\par               offset is supplied as an argument to -d, or the history expansion supplied as an argument to -p fails.
\par 
\par        jobs [-lnprs] [ jobspec ... ]
\par        jobs -x command [ args ... ]
\par               The first form lists the active jobs.  The options have the following meanings:
\par               -l     List process IDs in addition to the normal information.
\par               -p     List only the process ID of the job's process group leader.
\par               -n     Display information only about jobs that have changed status since the user was last notified of their status.
\par               -r     Restrict output to running jobs.
\par               -s     Restrict output to stopped jobs.
\par 
\par               If jobspec is given, output is restricted to information about that job.  The return status is 0 unless an invalid option is encoun-
\par               tered or an invalid jobspec is supplied.
\par 
\par               If the -x option is supplied, jobs replaces any jobspec found in command or args with the corresponding process group ID,  and  exe-
\par               cutes command passing it args, returning its exit status.
\par 
\par        kill [-s sigspec | -n signum | -sigspec] [pid | jobspec] ...
\par        kill -l [sigspec | exit_status]
\par               Send  the  signal  named by sigspec or signum to the processes named by pid or jobspec.  sigspec is either a case-insensitive signal
\par               name such as SIGKILL (with or without the SIG prefix) or a signal number; signum is a signal number.  If  sigspec  is  not  present,
\par               then  SIGTERM  is  assumed.  An argument of -l lists the signal names.  If any arguments are supplied when -l is given, the names of
\par               the signals corresponding to the arguments are listed, and the return status is 0.  The exit_status argument to -l is a number spec-
\par               ifying  either a signal number or the exit status of a process terminated by a signal.  kill returns true if at least one signal was
\par               successfully sent, or false if an error occurs or an invalid option is encountered.
\par 
\par        let arg [arg ...]
\par               Each arg is an arithmetic expression to be evaluated (see ARITHMETIC EVALUATION).  If the last arg evaluates to 0, let returns 1;  0
\par               is returned otherwise.
\par 
\par        local [option] [name[=value] ...]
\par               For  each  argument,  a  local variable named name is created, and assigned value.  The option can be any of the options accepted by
\par               declare.  When local is used within a function, it causes the variable name to have a visible scope restricted to that function  and
\par               its  children.   With  no operands, local writes a list of local variables to the standard output.  It is an error to use local when
\par               not within a function.  The return status is 0 unless local is used outside a function, an invalid name is supplied, or  name  is  a
\par               readonly variable.
\par 
\par        logout Exit a login shell.
\par 
\par        popd [-n] [+n] [-n]
\par               Removes entries from the directory stack.  With no arguments, removes the top directory from the stack, and performs a cd to the new
\par               top directory.  Arguments, if supplied, have the following meanings:
\par               +n     Removes the nth entry counting from the left of the list shown by dirs, starting with zero.  For example: ''popd +0'' removes
\par                      the first directory, ''popd +1'' the second.
\par               -n     Removes  the  nth  entry  counting  from  the  right of the list shown by dirs, starting with zero.  For example: ''popd -0''
\par                      removes the last directory, ''popd -1'' the next to last.
\par               -n     Suppresses the normal change of directory when removing directories from the stack, so that only the stack is manipulated.
\par 
\par               If the popd command is successful, a dirs is performed as well, and the return status is 0.  popd returns false if an invalid option
\par               is encountered, the directory stack is empty, a non-existent directory stack entry is specified, or the directory change fails.
\par 
\par        printf format [arguments]
\par               Write  the  formatted arguments to the standard output under the control of the format.  The format is a character string which con-
\par               tains three types of objects: plain characters, which are simply copied to standard output, character escape  sequences,  which  are
\par               converted  and  copied to the standard output, and format specifications, each of which causes printing of the next successive argu-
\par               ment.  In addition to the standard printf(1) formats, %b causes printf to expand backslash escape  sequences  in  the  corresponding
\par               argument  (except  that \\c terminates output, backslashes in \\', \\", and \\? are not removed, and octal escapes beginning with \\0 may
\par               contain up to four digits), and %q causes printf to output the corresponding argument in a format that can be reused as shell input.
\par 
\par               The  format  is  reused  as necessary to consume all of the arguments.  If the format requires more arguments than are supplied, the
\par               extra format specifications behave as if a zero value or null string, as appropriate, had been supplied.  The return value  is  zero
\par               on success, non-zero on failure.
\par 
\par        pushd [-n] [dir]
\par        pushd [-n] [+n] [-n]
\par               Adds a directory to the top of the directory stack, or rotates the stack, making the new top of the stack the current working direc-
\par               tory.  With no arguments, exchanges the top two directories and returns 0, unless the directory stack is empty.  Arguments, if  sup-
\par               plied, have the following meanings:
\par               +n     Rotates  the stack so that the nth directory (counting from the left of the list shown by dirs, starting with zero) is at the
\par                      top.
\par               -n     Rotates the stack so that the nth directory (counting from the right of the list shown by dirs, starting with zero) is at the
\par                      top.
\par               -n     Suppresses the normal change of directory when adding directories to the stack, so that only the stack is manipulated.
\par               dir    Adds dir to the directory stack at the top, making it the new current working directory.
\par 
\par               If  the  pushd  command is successful, a dirs is performed as well.  If the first form is used, pushd returns 0 unless the cd to dir
\par               fails.  With the second form, pushd returns 0 unless the directory stack is empty, a non-existent directory stack element is  speci-
\par               fied, or the directory change to the specified new current directory fails.
\par 
\par        pwd [-LP]
\par               Print  the  absolute pathname of the current working directory.  The pathname printed contains no symbolic links if the -P option is
\par               supplied or the -o physical option to the set builtin command is enabled.  If the -L option is used, the pathname printed  may  con-
\par               tain  symbolic  links.   The return status is 0 unless an error occurs while reading the name of the current directory or an invalid
\par               option is supplied.
\par 
\par        read [-ers] [-u fd] [-t timeout] [-a aname] [-p prompt] [-n nchars] [-d delim] [name ...]
\par               One line is read from the standard input, or from the file descriptor fd supplied as an argument to the -u  option,  and  the  first
\par               word is assigned to the first name, the second word to the second name, and so on, with leftover words and their intervening separa-
\par               tors assigned to the last name.  If there are fewer words read from the input stream than names, the remaining  names  are  assigned
\par               empty  values.   The characters in IFS are used to split the line into words.  The backslash character (\\) may be used to remove any
\par               special meaning for the next character read and for line continuation.  Options, if supplied, have the following meanings:
\par               -a aname
\par                      The words are assigned to sequential indices of the array variable aname, starting at 0.  aname is unset before any new  val-
\par                      ues are assigned.  Other name arguments are ignored.
\par               -d delim
\par                      The first character of delim is used to terminate the input line, rather than newline.
\par               -e     If the standard input is coming from a terminal, readline (see READLINE above) is used to obtain the line.
\par               -n nchars
\par                      read returns after reading nchars characters rather than waiting for a complete line of input.
\par               -p prompt
\par                      Display  prompt  on standard error, without a trailing newline, before attempting to read any input.  The prompt is displayed
\par                      only if input is coming from a terminal.
\par               -r     Backslash does not act as an escape character.  The backslash is considered to be part of the line.  In particular,  a  back-
\par                      slash-newline pair may not be used as a line continuation.
\par               -s     Silent mode.  If input is coming from a terminal, characters are not echoed.
\par               -t timeout
\par                      Cause read to time out and return failure if a complete line of input is not read within timeout seconds.  This option has no
\par                      effect if read is not reading input from the terminal or a pipe.
\par               -u fd  Read input from file descriptor fd.
\par 
\par               If no names are supplied, the line read is assigned to the variable REPLY.  The return code is zero, unless end-of-file  is  encoun-
\par               tered, read times out, or an invalid file descriptor is supplied as the argument to -u.
\par 
\par        readonly [-apf] [name[=word] ...]
\par               The  given  names  are  marked readonly; the values of these names may not be changed by subsequent assignment.  If the -f option is
\par               supplied, the functions corresponding to the names are so marked.  The -a option restricts the variables  to  arrays.   If  no  name
\par               arguments  are  given,  or if the -p option is supplied, a list of all readonly names is printed.  The -p option causes output to be
\par               displayed in a format that may be reused as input.  If a variable name is followed by =word, the value of the  variable  is  set  to
\par               word.  The return status is 0 unless an invalid option is encountered, one of the names is not a valid shell variable name, or -f is
\par               supplied with a name that is not a function.
\par 
\par        return [n]
\par               Causes a function to exit with the return value specified by n.  If n is omitted, the return status is that of the last command exe-
\par               cuted  in the function body.  If used outside a function, but during execution of a script by the .  (source) command, it causes the
\par               shell to stop executing that script and return either n or the exit status of the last command executed within  the  script  as  the
\par               exit  status  of the script.  If used outside a function and not during execution of a script by ., the return status is false.  Any
\par               command associated with the RETURN trap is executed before execution resumes after the function or script.
\par 
\par        set [--abefhkmnptuvxBCHP] [-o option] [arg ...]
\par               Without options, the name and value of each shell variable are displayed in a format that can be reused as  input.   The  output  is
\par               sorted  according  to  the current locale.  When options are specified, they set or unset shell attributes.  Any arguments remaining
\par               after the options are processed are treated as values for the positional parameters and are assigned, in order, to $1, $2, ...   $n.
\par               Options, if specified, have the following meanings:
\par               -a      Automatically  mark  variables  and functions which are modified or created for export to the environment of subsequent com-
\par                       mands.
\par               -b      Report the status of terminated background jobs immediately, rather than before the next primary prompt.  This is  effective
\par                       only when job control is enabled.
\par               -e      Exit immediately if a simple command (see SHELL GRAMMAR above) exits with a non-zero status.  The shell does not exit if the
\par                       command that fails is part of the command list immediately following a while or until keyword, part of the  test  in  an  if
\par                       statement,  part  of  a  && or || list, or if the command's return value is being inverted via !.  A trap on ERR, if set, is
\par                       executed before the shell exits.
\par               -f      Disable pathname expansion.
\par               -h      Remember the location of commands as they are looked up for execution.  This is enabled by default.
\par               -k      All arguments in the form of assignment statements are placed in the environment for a command, not just those that  precede
\par                       the command name.
\par               -m      Monitor  mode.  Job control is enabled.  This option is on by default for interactive shells on systems that support it (see
\par                       JOB CONTROL above).  Background processes run in a separate process group and a line containing their exit status is printed
\par                       upon their completion.
\par               -n      Read  commands  but  do  not  execute them.  This may be used to check a shell script for syntax errors.  This is ignored by
\par                       interactive shells.
\par               -o option-name
\par                       The option-name can be one of the following:
\par                       allexport
\par                               Same as -a.
\par                       braceexpand
\par                               Same as -B.
\par                       emacs   Use an emacs-style command line editing interface.  This is enabled by default when the shell is interactive, unless
\par                               the shell is started with the --noediting option.
\par                       errtrace
\par                               Same as -E.
\par                       functrace
\par                               Same as -T.
\par                       errexit Same as -e.
\par                       hashall Same as -h.
\par                       histexpand
\par                               Same as -H.
\par                       history Enable command history, as described above under HISTORY.  This option is on by default in interactive shells.
\par                       ignoreeof
\par                               The effect is as if the shell command ''IGNOREEOF=10'' had been executed (see Shell Variables above).
\par                       keyword Same as -k.
\par                       monitor Same as -m.
\par                       noclobber
\par                               Same as -C.
\par                       noexec  Same as -n.
\par                       noglob  Same as -f.  nolog Currently ignored.
\par                       notify  Same as -b.
\par                       nounset Same as -u.
\par                       onecmd  Same as -t.
\par                       physical
\par                               Same as -P.
\par                       pipefail
\par                               If  set, the return value of a pipeline is the value of the last (rightmost) command to exit with a non-zero status,
\par                               or zero if all commands in the pipeline exit successfully.  This option is disabled by default.
\par                       posix   Change the behavior of bash where the default operation differs from the POSIX 1003.2 standard to match the standard
\par                               ('posix mode).
\par                       privileged
\par                               Same as -p.
\par                       verbose Same as -v.
\par                       vi      Use a vi-style command line editing interface.
\par                       xtrace  Same as -x.
\par                       If  -o  is  supplied  with  no  option-name,  the  values  of  the  current  options are printed.  If +o is supplied with no
\par                       option-name, a series of set commands to recreate the current option settings is displayed on the standard output.
\par               -p      Turn on privileged mode.  In this mode, the $ENV and $BASH_ENV files are not processed, shell functions  are  not  inherited
\par                       from  the  environment,  and  the SHELLOPTS variable, if it appears in the environment, is ignored.  If the shell is started
\par                       with the effective user (group) id not equal to the real user (group) id, and the -p option is not supplied,  these  actions
\par                       are taken and the effective user id is set to the real user id.  If the -p option is supplied at startup, the effective user
\par                       id is not reset.  Turning this option off causes the effective user and group ids to be set to the real user and group  ids.
\par               -t      Exit after reading and executing one command.
\par               -u      Treat  unset variables as an error when performing parameter expansion.  If expansion is attempted on an unset variable, the
\par                       shell prints an error message, and, if not interactive, exits with a non-zero status.
\par               -v      Print shell input lines as they are read.
\par               -x      After expanding each simple command, for command, case command, select command,  or  arithmetic  for  command,  display  the
\par                       expanded value of PS4, followed by the command and its expanded arguments or associated word list.
\par               -B      The shell performs brace expansion (see Brace Expansion above).  This is on by default.
\par               -C      If  set, bash does not overwrite an existing file with the >, >&, and <> redirection operators.  This may be overridden when
\par                       creating output files by using the redirection operator >| instead of >.
\par               -E      If set, any trap on ERR is inherited by shell functions, command substitutions, and commands executed in a subshell environ-
\par                       ment.  The ERR trap is normally not inherited in such cases.
\par               -H      Enable !  style history substitution.  This option is on by default when the shell is interactive.
\par               -P      If  set,  the shell does not follow symbolic links when executing commands such as cd that change the current working direc-
\par                       tory.  It uses the physical directory structure instead.  By default, bash follows the logical  chain  of  directories  when
\par                       performing commands which change the current directory.
\par               -T      If  set, any trap on DEBUG is inherited by shell functions, command substitutions, and commands executed in a subshell envi-
\par                       ronment.  The DEBUG trap is normally not inherited in such cases.
\par               --      If no arguments follow this option, then the positional parameters are unset.  Otherwise, the positional parameters are  set
\par                       to the args, even if some of them begin with a -.
\par               -       Signal  the end of options, cause all remaining args to be assigned to the positional parameters.  The -x and -v options are
\par                       turned off.  If there are no args, the positional parameters remain unchanged.
\par 
\par               The options are off by default unless otherwise noted.  Using + rather than - causes these options to be turned  off.   The  options
\par               can also be specified as arguments to an invocation of the shell.  The current set of options may be found in $-.  The return status
\par               is always true unless an invalid option is encountered.
\par 
\par        shift [n]
\par               The positional parameters from n+1 ... are renamed to $1 ....  Parameters represented by the numbers $# down to $#-n+1 are unset.  n
\par               must  be a non-negative number less than or equal to $#.  If n is 0, no parameters are changed.  If n is not given, it is assumed to
\par               be 1.  If n is greater than $#, the positional parameters are not changed.  The return status is greater than zero if n  is  greater
\par               than $# or less than zero; otherwise 0.
\par 
\par        shopt [-pqsu] [-o] [optname ...]
\par               Toggle  the values of variables controlling optional shell behavior.  With no options, or with the -p option, a list of all settable
\par               options is displayed, with an indication of whether or not each is set.  The -p option causes output to be displayed in a form  that
\par               may be reused as input.  Other options have the following meanings:
\par               -s     Enable (set) each optname.
\par               -u     Disable (unset) each optname.
\par               -q     Suppresses  normal output (quiet mode); the return status indicates whether the optname is set or unset.  If multiple optname
\par                      arguments are given with -q, the return status is zero if all optnames are enabled; non-zero otherwise.
\par               -o     Restricts the values of optname to be those defined for the -o option to the set builtin.
\par 
\par               If either -s or -u is used with no optname arguments, the display is limited to those options which are set or unset,  respectively.
\par               Unless otherwise noted, the shopt options are disabled (unset) by default.
\par 
\par               The  return status when listing options is zero if all optnames are enabled, non-zero otherwise.  When setting or unsetting options,
\par               the return status is zero unless an optname is not a valid shell option.
\par 
\par               The list of shopt options is:
\par 
\par               cdable_vars
\par                       If set, an argument to the cd builtin command that is not a directory is assumed to be the name of a variable whose value is
\par                       the directory to change to.
\par               cdspell If set, minor errors in the spelling of a directory component in a cd command will be corrected.  The errors checked for are
\par                       transposed characters, a missing character, and one character too many.  If a correction is found, the corrected  file  name
\par                       is printed, and the command proceeds.  This option is only used by interactive shells.
\par               checkhash
\par                       If  set,  bash  checks  that  a  command found in the hash table exists before trying to execute it.  If a hashed command no
\par                       longer exists, a normal path search is performed.
\par               checkwinsize
\par                       If set, bash checks the window size after each command and, if necessary, updates the values of LINES and COLUMNS.
\par               cmdhist If set, bash attempts to save all lines of a multiple-line command in the same history entry.  This allows  easy  re-editing
\par                       of multi-line commands.
\par               dotglob If set, bash includes filenames beginning with a '.' in the results of pathname expansion.
\par               execfail
\par                       If  set,  a  non-interactive  shell will not exit if it cannot execute the file specified as an argument to the exec builtin
\par                       command.  An interactive shell does not exit if exec fails.
\par               expand_aliases
\par                       If set, aliases are expanded as described above under ALIASES.  This option is enabled by default for interactive shells.
\par extdebug
\par                       If set, behavior intended for use by debuggers is enabled:
\par                       1.     The -F option to the declare builtin displays the source file name and line number  corresponding  to  each  function
\par                              name supplied as an argument.
\par                       2.     If the command run by the DEBUG trap returns a non-zero value, the next command is skipped and not executed.
\par                       3.     If  the command run by the DEBUG trap returns a value of 2, and the shell is executing in a subroutine (a shell func-
\par                              tion or a shell script executed by the . or source builtins), a call to return is simulated.
\par               extglob If set, the extended pattern matching features described above under Pathname Expansion are enabled.
\par               extquote
\par                       If set, $'string' and $"string" quoting is performed within $\{parameter\} expansions enclosed in double quotes.  This  option
\par                       is enabled by default.
\par               failglob
\par                       If set, patterns which fail to match filenames during pathname expansion result in an expansion error.
\par               force_fignore
\par                       If  set, the suffixes specified by the FIGNORE shell variable cause words to be ignored when performing word completion even
\par                       if the ignored words are the only possible completions.  See SHELL VARIABLES above  for  a  description  of  FIGNORE.   This
\par                       option is enabled by default.
\par               gnu_errfmt
\par                       If set, shell error messages are written in the standard GNU error message format.
\par               histappend
\par                       If  set,  the  history list is appended to the file named by the value of the HISTFILE variable when the shell exits, rather
\par                       than overwriting the file.
\par               histreedit
\par                       If set, and readline is being used, a user is given the opportunity to re-edit a failed history substitution.
\par               histverify
\par                       If set, and readline is being used, the results of history substitution are not immediately  passed  to  the  shell  parser.
\par                       Instead, the resulting line is loaded into the readline editing buffer, allowing further modification.
\par               hostcomplete
\par                       If  set,  and  readline  is being used, bash will attempt to perform hostname completion when a word containing a @ is being
\par                       completed (see Completing under READLINE above).  This is enabled by default.
\par               huponexit
\par                       If set, bash will send SIGHUP to all jobs when an interactive login shell exits.
\par               interactive_comments
\par                       If set, allow a word beginning with # to cause that word and all remaining characters on that  line  to  be  ignored  in  an
\par                       interactive shell (see COMMENTS above).  This option is enabled by default.
\par               lithist If  set,  and the cmdhist option is enabled, multi-line commands are saved to the history with embedded newlines rather than
\par                       using semicolon separators where possible.
\par               login_shell
\par                       The shell sets this option if it is started as a login shell (see INVOCATION above).  The value may not be changed.
\par               mailwarn
\par                       If set, and a file that bash is checking for mail has been accessed since the last time it was checked,  the  message  ''The
\par                       mail in mailfile has been read'' is displayed.
\par               no_empty_cmd_completion
\par                       If  set,  and  readline  is being used, bash will not attempt to search the PATH for possible completions when completion is
\par                       attempted on an empty line.
\par               nocaseglob
\par                       If set, bash matches filenames in a case-insensitive fashion when performing  pathname  expansion  (see  Pathname  Expansion
\par                       above).
\par               nullglob
\par                       If  set,  bash  allows  patterns which match no files (see Pathname Expansion above) to expand to a null string, rather than
\par                       themselves.
\par               progcomp
\par                       If set, the programmable completion facilities (see Programmable Completion above) are enabled.  This option is  enabled  by
\par                       default.
\par               promptvars
\par                       If  set,  prompt  strings  undergo  parameter expansion, command substitution, arithmetic expansion, and quote removal after
\par                       being expanded as described in PROMPTING above.  This option is enabled by default.
\par               restricted_shell
\par                       The shell sets this option if it is started in restricted mode (see RESTRICTED SHELL below).  The value may not be  changed.
\par                       This  is  not  reset  when  the startup files are executed, allowing the startup files to discover whether or not a shell is
\par                       restricted.
\par               shift_verbose
\par                       If set, the shift builtin prints an error message when the shift count exceeds the number of positional parameters.
\par               sourcepath
\par                       If set, the source (.) builtin uses the value of PATH to find the directory containing the file  supplied  as  an  argument.
\par                       This option is enabled by default.
\par               xpg_echo
\par                       If set, the echo builtin expands backslash-escape sequences by default.
\par        suspend [-f]
\par               Suspend  the  execution  of  this  shell  until it receives a SIGCONT signal.  The -f option says not to complain if this is a login
\par               shell; just suspend anyway.  The return status is 0 unless the shell is a login shell and -f is not supplied, or if job  control  is
\par               not enabled.
\par        test expr
\par        [ expr ]
\par               Return a status of 0 or 1 depending on the evaluation of the conditional expression expr.  Each operator and operand must be a sepa-
\par               rate argument.  Expressions are composed of the primaries described above under CONDITIONAL EXPRESSIONS.
\par 
\par               Expressions may be combined using the following operators, listed in decreasing order of precedence.
\par               ! expr True if expr is false.
\par               ( expr )
\par                      Returns the value of expr.  This may be used to override the normal precedence of operators.
\par               expr1 -a expr2
\par                      True if both expr1 and expr2 are true.
\par               expr1 -o expr2
\par                      True if either expr1 or expr2 is true.
\par 
\par               test and [ evaluate conditional expressions using a set of rules based on the number of arguments.
\par 
\par               0 arguments
\par                      The expression is false.
\par               1 argument
\par                      The expression is true if and only if the argument is not null.
\par               2 arguments
\par                      If the first argument is !, the expression is true if and only if the second argument is null.  If the first argument is  one
\par                      of  the  unary  conditional operators listed above under CONDITIONAL EXPRESSIONS, the expression is true if the unary test is
\par                      true.  If the first argument is not a valid unary conditional operator, the expression is false.
\par               3 arguments
\par                      If the second argument is one of the binary conditional operators listed above under CONDITIONAL EXPRESSIONS, the  result  of
\par                      the expression is the result of the binary test using the first and third arguments as operands.  If the first argument is !,
\par                      the value is the negation of the two-argument test using the second and third arguments.  If the first argument is exactly  (
\par                      and  the  third argument is exactly ), the result is the one-argument test of the second argument.  Otherwise, the expression
\par                      is false.  The -a and -o operators are considered binary operators in this case.
\par               4 arguments
\par                      If the first argument is !, the result is the negation of the three-argument expression composed of the remaining  arguments.
\par                      Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above.
\par               5 or more arguments
\par                      The expression is parsed and evaluated according to precedence using the rules listed above.
\par 
\par        times  Print the accumulated user and system times for the shell and for processes run from the shell.  The return status is 0.
\par 
\par        trap [-lp] [[arg] sigspec ...]
\par               The  command  arg  is  to  be  read and executed when the shell receives signal(s) sigspec.  If arg is absent (and there is a single
\par               sigspec) or -, each specified signal is reset to its original disposition (the value it had upon entrance to the shell).  If arg  is
\par               the  null string the signal specified by each sigspec is ignored by the shell and by the commands it invokes.  If arg is not present
\par               and -p has been supplied, then the trap commands associated with each sigspec are displayed.  If no arguments  are  supplied  or  if
\par               only  -p  is given, trap prints the list of commands associated with each signal.  The -l option causes the shell to print a list of
\par               signal names and their corresponding numbers.  Each sigspec is either a signal name defined in <signal.h>, or a signal number.  Sig-
\par               nal  names  are  case insensitive and the SIG prefix is optional.  If a sigspec is EXIT (0) the command arg is executed on exit from
\par               the shell.  If a sigspec is DEBUG, the command arg is executed before every simple command, for command, case command,  select  com-
\par               mand,  every  arithmetic for command, and before the first command executes in a shell function (see SHELL GRAMMAR above).  Refer to
\par               the description of the extglob option to the shopt builtin for details of its effect on the DEBUG trap.  If a sigspec  is  ERR,  the
\par               command  arg is executed whenever a simple command has a non-zero exit status, subject to the following conditions.  The ERR trap is
\par               not executed if the failed command is part of the command list immediately following a while or until keyword, part of the  test  in
\par               an  if  statement, part of a && or || list, or if the command's return value is being inverted via !.  These are the same conditions
\par               obeyed by the errexit option.  If a sigspec is RETURN, the command arg is executed each time a shell function or a  script  executed
\par               with the . or source builtins finishes executing.  Signals ignored upon entry to the shell cannot be trapped or reset.  Trapped sig-
\par               nals are reset to their original values in a child process when it is created.  The  return  status  is  false  if  any  sigspec  is
\par               invalid; otherwise trap returns true.
\par 
\par        type [-aftpP] name [name ...]
\par               With  no  options,  indicate  how each name would be interpreted if used as a command name.  If the -t option is used, type prints a
\par               string which is one of alias, keyword, function, builtin, or file if name is an alias, shell reserved word,  function,  builtin,  or
\par               disk  file,  respectively.   If  the name is not found, then nothing is printed, and an exit status of false is returned.  If the -p
\par               option is used, type either returns the name of the disk file that would be executed if name were specified as a  command  name,  or
\par               nothing if ''type -t name'' would not return file.  The -P option forces a PATH search for each name, even if ''type -t name'' would
\par               not return file.  If a command is hashed, -p and -P print the hashed value, not necessarily the file that appears first in PATH.  If
\par               the -a option is used, type prints all of the places that contain an executable named name.  This includes aliases and functions, if
\par               and only if the -p option is not also used.  The table of hashed commands is not consulted when using -a.  The -f option  suppresses
\par               shell function lookup, as with the command builtin.  type returns true if any of the arguments are found, false if none are found.
\par 
\par        ulimit [-SHacdflmnpstuv [limit]]
\par               Provides  control over the resources available to the shell and to processes started by it, on systems that allow such control.  The
\par               -H and -S options specify that the hard or soft limit is set for the given resource.  A hard limit cannot be increased  once  it  is
\par               set;  a  soft  limit  may be increased up to the value of the hard limit.  If neither -H nor -S is specified, both the soft and hard
\par               limits are set.  The value of limit can be a number in the unit specified for the resource or one of the special values hard,  soft,
\par               or  unlimited, which stand for the current hard limit, the current soft limit, and no limit, respectively.  If limit is omitted, the
\par               current value of the soft limit of the resource is printed, unless the -H option is given.  When more than one  resource  is  speci-
\par               fied, the limit name and unit are printed before the value.  Other options are interpreted as follows:
\par               -a     All current limits are reported
\par               -c     The maximum size of core files created
\par               -d     The maximum size of a process's data segment
\par               -f     The maximum size of files created by the shell
\par               -l     The maximum size that may be locked into memory
\par               -m     The maximum resident set size
\par               -n     The maximum number of open file descriptors (most systems do not allow this value to be set)
\par               -p     The pipe size in 512-byte blocks (this may not be set)
\par               -s     The maximum stack size
\par               -t     The maximum amount of cpu time in seconds
\par               -u     The maximum number of processes available to a single user
\par               -v     The maximum amount of virtual memory available to the shell
\par 
\par               If limit is given, it is the new value of the specified resource (the -a option is display only).  If no option is given, then -f is
\par               assumed.  Values are in 1024-byte increments, except for -t, which is in seconds, -p, which is in units of 512-byte blocks,  and  -n
\par               and  -u,  which  are  unscaled  values.  The return status is 0 unless an invalid option or argument is supplied, or an error occurs
\par               while setting a new limit.
\par 
\par        umask [-p] [-S] [mode]
\par               The user file-creation mask is set to mode.  If mode begins with a digit, it is interpreted as an  octal  number;  otherwise  it  is
\par               interpreted  as  a  symbolic  mode  mask similar to that accepted by chmod(1).  If mode is omitted, the current value of the mask is
\par               printed.  The -S option causes the mask to be printed in symbolic form; the default output is an octal number.  If the -p option  is
\par               supplied, and mode is omitted, the output is in a form that may be reused as input.  The return status is 0 if the mode was success-
\par               fully changed or if no mode argument was supplied, and false otherwise.
\par 
\par        unalias [-a] [name ...]
\par               Remove each name from the list of defined aliases.  If -a is supplied, all alias definitions are removed.  The return value is  true
\par               unless a supplied name is not a defined alias.
\par 
\par        unset [-fv] [name ...]
\par               For  each  name,  remove  the  corresponding variable or function.  If no options are supplied, or the -v option is given, each name
\par               refers to a shell variable.  Read-only variables may not be unset.  If -f is specifed, each name refers to a shell function, and the
\par               function  definition is removed.  Each unset variable or function is removed from the environment passed to subsequent commands.  If
\par               any of RANDOM, SECONDS, LINENO, HISTCMD, FUNCNAME, GROUPS, or DIRSTACK are unset, they lose their special properties, even  if  they
\par               are subsequently reset.  The exit status is true unless a name is readonly.
\par 
\par        wait [n]
\par               Wait  for  the  specified process and return its termination status.  n may be a process ID or a job specification; if a job spec is
\par               given, all processes in that job's pipeline are waited for.  If n is not given, all currently active child processes are waited for,
\par               and  the return status is zero.  If n specifies a non-existent process or job, the return status is 127.  Otherwise, the return sta-
\par               tus is the exit status of the last process or job waited for.
\par 
\par RESTRICTED SHELL
\par        If bash is started with the name rbash, or the -r option is supplied at invocation, the shell becomes restricted.  A  restricted  shell  is
\par        used  to set up an environment more controlled than the standard shell.  It behaves identically to bash with the exception that the follow-
\par        ing are disallowed or not performed:
\par 
\par             changing directories with cd
\par 
\par             setting or unsetting the values of SHELL, PATH, ENV, or BASH_ENV
\par 
\par             specifying command names containing /
\par 
\par             specifying a file name containing a / as an argument to the .  builtin command
\par 
\par             Specifying a filename containing a slash as an argument to the -p option to the hash builtin command
\par 
\par             importing function definitions from the shell environment at startup
\par 
\par             parsing the value of SHELLOPTS from the shell environment at startup
\par 
\par             redirecting output using the >, >|, <>, >&, &>, and >> redirection operators
\par 
\par             using the exec builtin command to replace the shell with another command
\par 
\par             adding or deleting builtin commands with the -f and -d options to the enable builtin command
\par 
\par             Using the enable builtin command to enable disabled shell builtins
\par 
\par             specifying the -p option to the command builtin command
\par 
\par             turning off restricted mode with set +r or set +o restricted.
\par 
\par        These restrictions are enforced after any startup files are read.
\par 
\par        When a command that is found to be a shell script is executed (see COMMAND EXECUTION above), rbash turns off any restrictions in the  shell
\par        spawned to execute the script.
\par 
\par SEE ALSO
\par        Bash Reference Manual, Brian Fox and Chet Ramey
\par        The Gnu Readline Library, Brian Fox and Chet Ramey
\par        The Gnu History Library, Brian Fox and Chet Ramey
\par        Portable Operating System Interface (POSIX) Part 2: Shell and Utilities, IEEE
\par        sh(1), ksh(1), csh(1)
\par        emacs(1), vi(1)
\par        readline(3)
\par 
\par FILES
\par        /bin/bash
\par               The bash executable
\par        /etc/profile
\par               The systemwide initialization file, executed for login shells
\par        ~/.bash_profile
\par               The personal initialization file, executed for login shells
\par        ~/.bashrc
\par               The individual per-interactive-shell startup file
\par        ~/.bash_logout
\par               The individual login shell cleanup file, executed when a login shell exits
\par        ~/.inputrc
\par               Individual readline initialization file
\par 
\par AUTHORS
\par        Brian Fox, Free Software Foundation
\par        bfox@gnu.org
\par 
\par        Chet Ramey, Case Western Reserve University
\par        chet@po.CWRU.Edu
\par 
\par BUG REPORTS
\par        If  you find a bug in bash, you should report it.  But first, you should make sure that it really is a bug, and that it appears in the lat-
\par        est version of bash.  The latest version is always available from ftp://ftp.gnu.org/pub/bash/.
\par 
\par        Once you have determined that a bug actually exists, use the bashbug command to submit a bug report.  If you have a fix, you are encouraged
\par        to  mail  that  as  well!   Suggestions and 'philosophical' bug reports may be mailed to bug-bash@gnu.org or posted to the Usenet newsgroup
\par        gnu.bash.bug.
\par 
\par        ALL bug reports should include:
\par 
\par        The version number of bash
\par        The hardware and operating system
\par        The compiler used to compile
\par        A description of the bug behaviour
\par        A short script or 'recipe' which exercises the bug
\par 
\par        bashbug inserts the first three items automatically into the template it provides for filing a bug report.
\par 
\par        Comments and bug reports concerning this manual page should be directed to chet@po.CWRU.Edu.
\par 
\par BUGS
\par        It's too big and too slow.
\par 
\par        There are some subtle differences between bash and traditional versions of sh, mostly because of the POSIX specification.
\par 
\par        Aliases are confusing in some uses.
\par 
\par        Shell builtin commands and functions are not stoppable/restartable.
\par 
\par        Compound commands and command sequences of the form 'a ; b ; c' are not handled gracefully when process suspension is  attempted.   When  a
\par        process is stopped, the shell immediately executes the next command in the sequence.  It suffices to place the sequence of commands between
\par        parentheses to force it into a subshell, which may be stopped as a unit.
\par 
\par        Commands inside of $(...) command substitution are not parsed until substitution is attempted.  This will delay error reporting until  some
\par        time after the command is entered.  For example, unmatched parentheses, even inside shell comments, will result in error messages while the
\par        construct is being read.
\par 
\par        Array variables may not (yet) be exported.
\par 
\par GNU Bash-3.0                                                       2004 June 26                                                            BASH(1)\par}