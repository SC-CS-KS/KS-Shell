{\rtf1\fbidis\ansi\ansicpg0\uc1\deff0\deflang0\deflangfe0{\fonttbl{\f0\fnil \'cb\'ce\'cc\'e5;}{\f1\fnil \'ce\'a2\'c8\'ed\'d1\'c5\'ba\'da;}{\f2\fnil\fcharset134 \'cb\'ce\'cc\'e5;}{\f3\fnil\fcharset0 Times New Roman;}}{\colortbl;\red0\green0\blue255;\red0\green0\blue0;\red79\green129\blue189;\red255\green255\blue255;}{\*\listtable{\list\listtemplateid1877570812
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\b\i\fs28}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
{\listlevel\levelnfc0\leveljc0\li0\fi0\jclisttab\tx0\levelstartat1{\leveltext\'00;}{\levelnumbers;}\f3\fs24}
\listid600702707}
{\list\listtemplateid35375812\listsimple1
{\listlevel\levelnfc0\leveljc0\li1380\fi-420\jclisttab\tx1380\levelstartat1{\leveltext\'02\'00);}{\levelnumbers\'01;}\f3\b\i\fs24\cf3}
\listid1497122774}
}
{\*\listoverridetable
{\listoverride\listid600702707\listoverridecount0\ls1}
{\listoverride\listid1497122774\listoverridecount0\ls2}
}


\pard\fi0\li0\qc\ri0\sb0\sa0\itap0 \plain \f2\b\lang2052\fs24\cf2 test_string.sh
\par \pard\fi0\li0\ql\ri0\sb0\sa0\itap0 
\par \plain \f1\fs20 #!/bin/bash
\par 
\par testTolower()
\par \{
\par \tab out=`tolower A a B b ABCD abcd`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" "a a b b abcd abcd"
\par \}
\par 
\par testToupper()
\par \{
\par         out=`toupper A a B b ABCD abcd`
\par         assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" "A A B B ABCD ABCD"
\par \}
\par 
\par testStrcat()
\par \{
\par \tab out=`strcat a b c d`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" "abcd"
\par \}
\par 
\par testStrlen()
\par \{
\par \tab out=`strlen abcd`
\par \tab assertEquals "the result of '$\{out\}' was wrong" $\{out\} 4
\par \}
\par 
\par testStrcmp()
\par \{
\par \tab strcmp abc abc
\par \tab ret=$?
\par \tab assertEquals "the result of '$\{ret\}' was wrong" $\{ret\} 0
\par 
\par \tab strcmp abc ABC
\par \tab ret=$?
\par \tab assertEquals "the result of '$\{ret\}' was wrong" $\{ret\} 1
\par \}
\par 
\par testStricmp()
\par \{
\par \tab stricmp abc ABC
\par \tab ret=$?
\par \tab assertEquals "the result of '$\{ret\}' was wrong" $\{ret\} 0
\par \}
\par 
\par testSubstr()
\par \{
\par \tab out=`substr abcd 1`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" "bcd"
\par 
\par \tab out=`substr abcd 1 2`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" "bc"
\par \}
\par 
\par testIndex()
\par \{
\par \tab out=`index abcd bc`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" 2
\par 
\par \tab out=`index abcd c`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" 3
\par 
\par \tab out=`index abcd k`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" 0
\par \}
\par 
\par testStrrev()
\par \{
\par \tab out=`strrev abcd efg hi`
\par \tab assertEquals "the result of '$\{out\}' was wrong" "$\{out\}" "ih gfe dcba"
\par \}
\par 
\par oneTimeSetUp()
\par \{
\par \tab . ./string.sh
\par \}
\par 
\par . ./shunit2\par}